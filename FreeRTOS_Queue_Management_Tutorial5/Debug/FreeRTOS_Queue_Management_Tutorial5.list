
FreeRTOS_Queue_Management_Tutorial5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003224  08003224  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800322c  0800322c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003240  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003240  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ee5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244c  00000000  00000000  00031f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  000351e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000029a3  00000000  00000000  00035f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010882  00000000  00000000  0003892b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1af0  00000000  00000000  000491ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ac9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c60  00000000  00000000  0011acf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031f4 	.word	0x080031f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080031f4 	.word	0x080031f4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fb4e 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f806 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f898 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f86c 	bl	80005b4 <MX_USART2_UART_Init>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <main+0x14>
	...

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	; 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2230      	movs	r2, #48	; 0x30
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fe78 	bl	80031e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <SystemClock_Config+0xcc>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050c:	4a27      	ldr	r2, [pc, #156]	; (80005ac <SystemClock_Config+0xcc>)
 800050e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000512:	6413      	str	r3, [r2, #64]	; 0x40
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <SystemClock_Config+0xd0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <SystemClock_Config+0xd0>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053c:	2301      	movs	r3, #1
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000550:	2304      	movs	r3, #4
 8000552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000554:	23a8      	movs	r3, #168	; 0xa8
 8000556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000558:	2302      	movs	r3, #2
 800055a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055c:	2307      	movs	r3, #7
 800055e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0320 	add.w	r3, r7, #32
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fe6d 	bl	8001244 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000570:	f000 f9ba 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2302      	movs	r3, #2
 800057a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000580:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2105      	movs	r1, #5
 8000592:	4618      	mov	r0, r3
 8000594:	f001 f8ce 	bl	8001734 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059e:	f000 f9a3 	bl	80008e8 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3750      	adds	r7, #80	; 0x50
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_USART2_UART_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005ec:	f001 fd7e 	bl	80020ec <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 f977 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000dc 	.word	0x200000dc
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	4ba2      	ldr	r3, [pc, #648]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4aa1      	ldr	r2, [pc, #644]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b9f      	ldr	r3, [pc, #636]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	61bb      	str	r3, [r7, #24]
 8000638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	4b9b      	ldr	r3, [pc, #620]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a9a      	ldr	r2, [pc, #616]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b98      	ldr	r3, [pc, #608]	; (80008ac <MX_GPIO_Init+0x2a4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	4b94      	ldr	r3, [pc, #592]	; (80008ac <MX_GPIO_Init+0x2a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a93      	ldr	r2, [pc, #588]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b91      	ldr	r3, [pc, #580]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b8d      	ldr	r3, [pc, #564]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a8c      	ldr	r2, [pc, #560]	; (80008ac <MX_GPIO_Init+0x2a4>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b8a      	ldr	r3, [pc, #552]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b86      	ldr	r3, [pc, #536]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a85      	ldr	r2, [pc, #532]	; (80008ac <MX_GPIO_Init+0x2a4>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b83      	ldr	r3, [pc, #524]	; (80008ac <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b7f      	ldr	r3, [pc, #508]	; (80008ac <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a7e      	ldr	r2, [pc, #504]	; (80008ac <MX_GPIO_Init+0x2a4>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b7c      	ldr	r3, [pc, #496]	; (80008ac <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0308 	and.w	r3, r3, #8
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2108      	movs	r1, #8
 80006ca:	4879      	ldr	r0, [pc, #484]	; (80008b0 <MX_GPIO_Init+0x2a8>)
 80006cc:	f000 fda0 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	4877      	ldr	r0, [pc, #476]	; (80008b4 <MX_GPIO_Init+0x2ac>)
 80006d6:	f000 fd9b 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006da:	2200      	movs	r2, #0
 80006dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80006e0:	4875      	ldr	r0, [pc, #468]	; (80008b8 <MX_GPIO_Init+0x2b0>)
 80006e2:	f000 fd95 	bl	8001210 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006e6:	2308      	movs	r3, #8
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	486c      	ldr	r0, [pc, #432]	; (80008b0 <MX_GPIO_Init+0x2a8>)
 80006fe:	f000 fbeb 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000702:	2301      	movs	r3, #1
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	4866      	ldr	r0, [pc, #408]	; (80008b4 <MX_GPIO_Init+0x2ac>)
 800071a:	f000 fbdd 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800071e:	2308      	movs	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800072e:	2305      	movs	r3, #5
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	485e      	ldr	r0, [pc, #376]	; (80008b4 <MX_GPIO_Init+0x2ac>)
 800073a:	f000 fbcd 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800073e:	2301      	movs	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	485a      	ldr	r0, [pc, #360]	; (80008bc <MX_GPIO_Init+0x2b4>)
 8000754:	f000 fbc0 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000758:	2310      	movs	r3, #16
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000768:	2306      	movs	r3, #6
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4852      	ldr	r0, [pc, #328]	; (80008bc <MX_GPIO_Init+0x2b4>)
 8000774:	f000 fbb0 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000778:	23e0      	movs	r3, #224	; 0xe0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000788:	2305      	movs	r3, #5
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4619      	mov	r1, r3
 8000792:	484a      	ldr	r0, [pc, #296]	; (80008bc <MX_GPIO_Init+0x2b4>)
 8000794:	f000 fba0 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000798:	2304      	movs	r3, #4
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4845      	ldr	r0, [pc, #276]	; (80008c0 <MX_GPIO_Init+0x2b8>)
 80007ac:	f000 fb94 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007c2:	2305      	movs	r3, #5
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	483c      	ldr	r0, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x2b8>)
 80007ce:	f000 fb83 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007d6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4833      	ldr	r0, [pc, #204]	; (80008b8 <MX_GPIO_Init+0x2b0>)
 80007ec:	f000 fb74 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007f0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000802:	2306      	movs	r3, #6
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4829      	ldr	r0, [pc, #164]	; (80008b4 <MX_GPIO_Init+0x2ac>)
 800080e:	f000 fb63 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4825      	ldr	r0, [pc, #148]	; (80008bc <MX_GPIO_Init+0x2b4>)
 8000828:	f000 fb56 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800082c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800083e:	230a      	movs	r3, #10
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	481c      	ldr	r0, [pc, #112]	; (80008bc <MX_GPIO_Init+0x2b4>)
 800084a:	f000 fb45 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4815      	ldr	r0, [pc, #84]	; (80008b8 <MX_GPIO_Init+0x2b0>)
 8000862:	f000 fb39 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000866:	f44f 7310 	mov.w	r3, #576	; 0x240
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086c:	2312      	movs	r3, #18
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000878:	2304      	movs	r3, #4
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_GPIO_Init+0x2b8>)
 8000884:	f000 fb28 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000888:	2302      	movs	r3, #2
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800088c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_GPIO_Init+0x2a8>)
 800089e:	f000 fb1b 	bl	8000ed8 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020c00 	.word	0x40020c00
 80008bc:	40020000 	.word	0x40020000
 80008c0:	40020400 	.word	0x40020400

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f96b 	bl	8000bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40001000 	.word	0x40001000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fa11 	bl	8000d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <HAL_UART_MspInit+0x94>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d133      	bne.n	80009d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <HAL_UART_MspInit+0x98>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <HAL_UART_MspInit+0x98>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <HAL_UART_MspInit+0x98>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_UART_MspInit+0x98>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_UART_MspInit+0x98>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_UART_MspInit+0x98>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <HAL_UART_MspInit+0x9c>)
 80009c2:	f000 fa89 	bl	8000ed8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2105      	movs	r1, #5
 80009ca:	2026      	movs	r0, #38	; 0x26
 80009cc:	f000 f9c8 	bl	8000d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009d0:	2026      	movs	r0, #38	; 0x26
 80009d2:	f000 f9e1 	bl	8000d98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40004400 	.word	0x40004400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	; 0x30
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2036      	movs	r0, #54	; 0x36
 8000a02:	f000 f9ad 	bl	8000d60 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a06:	2036      	movs	r0, #54	; 0x36
 8000a08:	f000 f9c6 	bl	8000d98 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_InitTick+0xa4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a28:	f107 0210 	add.w	r2, r7, #16
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f87a 	bl	8001b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a38:	f001 f850 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_InitTick+0xa8>)
 8000a46:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4a:	0c9b      	lsrs	r3, r3, #18
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <HAL_InitTick+0xac>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <HAL_InitTick+0xb0>)
 8000a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_InitTick+0xac>)
 8000a58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_InitTick+0xac>)
 8000a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_InitTick+0xac>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_InitTick+0xac>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_InitTick+0xac>)
 8000a72:	f001 f88d 	bl	8001b90 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a7c:	4806      	ldr	r0, [pc, #24]	; (8000a98 <HAL_InitTick+0xac>)
 8000a7e:	f001 f8e1 	bl	8001c44 <HAL_TIM_Base_Start_IT>
 8000a82:	4603      	mov	r3, r0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3730      	adds	r7, #48	; 0x30
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	431bde83 	.word	0x431bde83
 8000a98:	20000120 	.word	0x20000120
 8000a9c:	40001000 	.word	0x40001000

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	f001 fb59 	bl	8002188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000dc 	.word	0x200000dc

08000ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM6_DAC_IRQHandler+0x10>)
 8000ae6:	f001 f91d 	bl	8001d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000120 	.word	0x20000120

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1e:	490e      	ldr	r1, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b34:	4c0b      	ldr	r4, [pc, #44]	; (8000b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b42:	f7ff ffd7 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f002 fb29 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fcbd 	bl	80004c8 <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	2000016c 	.word	0x2000016c

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_Init+0x40>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_Init+0x40>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x40>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f8d8 	bl	8000d4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff26 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fea8 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000168 	.word	0x20000168

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000168 	.word	0x20000168

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff4c 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d72:	f7ff ff61 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6978      	ldr	r0, [r7, #20]
 8000d7e:	f7ff ffb1 	bl	8000ce4 <NVIC_EncodePriority>
 8000d82:	4602      	mov	r2, r0
 8000d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff80 	bl	8000c90 <__NVIC_SetPriority>
}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff54 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dc2:	f7ff ff09 	bl	8000bd8 <HAL_GetTick>
 8000dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d008      	beq.n	8000de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e052      	b.n	8000e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0216 	bic.w	r2, r2, #22
 8000df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	695a      	ldr	r2, [r3, #20]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d103      	bne.n	8000e16 <HAL_DMA_Abort+0x62>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0208 	bic.w	r2, r2, #8
 8000e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0201 	bic.w	r2, r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e36:	e013      	b.n	8000e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e38:	f7ff fece 	bl	8000bd8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d90c      	bls.n	8000e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2203      	movs	r2, #3
 8000e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e015      	b.n	8000e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1e4      	bne.n	8000e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e72:	223f      	movs	r2, #63	; 0x3f
 8000e74:	409a      	lsls	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d004      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00c      	b.n	8000ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 0201 	bic.w	r2, r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	e16b      	b.n	80011cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 815a 	bne.w	80011c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d017      	beq.n	8000fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d123      	bne.n	800101c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	08da      	lsrs	r2, r3, #3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	08da      	lsrs	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3208      	adds	r2, #8
 8001016:	69b9      	ldr	r1, [r7, #24]
 8001018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0203 	and.w	r2, r3, #3
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80b4 	beq.w	80011c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b60      	ldr	r3, [pc, #384]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a5f      	ldr	r2, [pc, #380]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800107a:	4a5b      	ldr	r2, [pc, #364]	; (80011e8 <HAL_GPIO_Init+0x310>)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	220f      	movs	r2, #15
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a52      	ldr	r2, [pc, #328]	; (80011ec <HAL_GPIO_Init+0x314>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d02b      	beq.n	80010fe <HAL_GPIO_Init+0x226>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a51      	ldr	r2, [pc, #324]	; (80011f0 <HAL_GPIO_Init+0x318>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x222>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a50      	ldr	r2, [pc, #320]	; (80011f4 <HAL_GPIO_Init+0x31c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x21e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_GPIO_Init+0x320>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x21a>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <HAL_GPIO_Init+0x324>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x216>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4d      	ldr	r2, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x328>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x212>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x32c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x20e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4b      	ldr	r2, [pc, #300]	; (8001208 <HAL_GPIO_Init+0x330>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x20a>
 80010de:	2307      	movs	r3, #7
 80010e0:	e00e      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010e2:	2308      	movs	r3, #8
 80010e4:	e00c      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010e6:	2306      	movs	r3, #6
 80010e8:	e00a      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010ee:	2304      	movs	r3, #4
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x228>
 80010fe:	2300      	movs	r3, #0
 8001100:	69fa      	ldr	r2, [r7, #28]
 8001102:	f002 0203 	and.w	r2, r2, #3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4093      	lsls	r3, r2
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <HAL_GPIO_Init+0x310>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_GPIO_Init+0x334>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001142:	4a32      	ldr	r2, [pc, #200]	; (800120c <HAL_GPIO_Init+0x334>)
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_GPIO_Init+0x334>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116c:	4a27      	ldr	r2, [pc, #156]	; (800120c <HAL_GPIO_Init+0x334>)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_GPIO_Init+0x334>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001196:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_GPIO_Init+0x334>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_GPIO_Init+0x334>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c0:	4a12      	ldr	r2, [pc, #72]	; (800120c <HAL_GPIO_Init+0x334>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3301      	adds	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	f67f ae90 	bls.w	8000ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40013800 	.word	0x40013800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40021000 	.word	0x40021000
 8001200:	40021400 	.word	0x40021400
 8001204:	40021800 	.word	0x40021800
 8001208:	40021c00 	.word	0x40021c00
 800120c:	40013c00 	.word	0x40013c00

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800122c:	e003      	b.n	8001236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	619a      	str	r2, [r3, #24]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e264      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4ba3      	ldr	r3, [pc, #652]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4ba0      	ldr	r3, [pc, #640]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b9d      	ldr	r3, [pc, #628]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b99      	ldr	r3, [pc, #612]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e23f      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b91      	ldr	r3, [pc, #580]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a90      	ldr	r2, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a8a      	ldr	r2, [pc, #552]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b88      	ldr	r3, [pc, #544]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a87      	ldr	r2, [pc, #540]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a80      	ldr	r2, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc6c 	bl	8000bd8 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fc68 	bl	8000bd8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e204      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fc58 	bl	8000bd8 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fc54 	bl	8000bd8 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f0      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b65      	ldr	r3, [pc, #404]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b62      	ldr	r3, [pc, #392]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b5c      	ldr	r3, [pc, #368]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c4      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4952      	ldr	r1, [pc, #328]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fc0d 	bl	8000bd8 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fc09 	bl	8000bd8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a5      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4940      	ldr	r1, [pc, #256]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <HAL_RCC_OscConfig+0x2b0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fbec 	bl	8000bd8 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fbe8 	bl	8000bd8 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e184      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d030      	beq.n	8001490 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fbcc 	bl	8000bd8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fbc8 	bl	8000bd8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e164      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_RCC_OscConfig+0x2b4>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fbb5 	bl	8000bd8 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fbb1 	bl	8000bd8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e14d      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a0 	beq.w	80015de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d121      	bne.n	800151e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fb77 	bl	8000bd8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e011      	b.n	8001512 <HAL_RCC_OscConfig+0x2ce>
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	42470000 	.word	0x42470000
 80014f8:	42470e80 	.word	0x42470e80
 80014fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff fb6a 	bl	8000bd8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e106      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <HAL_RCC_OscConfig+0x4e4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f0>
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a80      	ldr	r2, [pc, #512]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	e01c      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d10c      	bne.n	8001556 <HAL_RCC_OscConfig+0x312>
 800153c:	4b7b      	ldr	r3, [pc, #492]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a7a      	ldr	r2, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	e00b      	b.n	800156e <HAL_RCC_OscConfig+0x32a>
 8001556:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a74      	ldr	r2, [pc, #464]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
 8001562:	4b72      	ldr	r3, [pc, #456]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001566:	4a71      	ldr	r2, [pc, #452]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fb2f 	bl	8000bd8 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fb2b 	bl	8000bd8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0c5      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	4b65      	ldr	r3, [pc, #404]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ee      	beq.n	800157e <HAL_RCC_OscConfig+0x33a>
 80015a0:	e014      	b.n	80015cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fb19 	bl	8000bd8 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fb15 	bl	8000bd8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0af      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a55      	ldr	r2, [pc, #340]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 809b 	beq.w	800171e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d05c      	beq.n	80016ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d141      	bne.n	8001680 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fae9 	bl	8000bd8 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff fae5 	bl	8000bd8 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e081      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	041b      	lsls	r3, r3, #16
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	061b      	lsls	r3, r3, #24
 800164c:	4937      	ldr	r1, [pc, #220]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fabe 	bl	8000bd8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff faba 	bl	8000bd8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e056      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x41c>
 800167e:	e04e      	b.n	800171e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff faa7 	bl	8000bd8 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff faa3 	bl	8000bd8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e03f      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x44a>
 80016ac:	e037      	b.n	800171e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e032      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d028      	beq.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d121      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d11a      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d111      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d107      	bne.n	800171a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001714:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40007000 	.word	0x40007000
 800172c:	40023800 	.word	0x40023800
 8001730:	42470060 	.word	0x42470060

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff f9d8 	bl	8000bd8 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff f9d4 	bl	8000bd8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f886 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	0800320c 	.word	0x0800320c
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	2300      	movs	r3, #0
 8001912:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b67      	ldr	r3, [pc, #412]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80bd 	bhi.w	8001aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e0b7      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001936:	60bb      	str	r3, [r7, #8]
       break;
 8001938:	e0b7      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800193c:	60bb      	str	r3, [r7, #8]
      break;
 800193e:	e0b4      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b5b      	ldr	r3, [pc, #364]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d04d      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	461a      	mov	r2, r3
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	ea02 0800 	and.w	r8, r2, r0
 800196e:	ea03 0901 	and.w	r9, r3, r1
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	014b      	lsls	r3, r1, #5
 8001980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001984:	0142      	lsls	r2, r0, #5
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	ebb0 0008 	subs.w	r0, r0, r8
 800198e:	eb61 0109 	sbc.w	r1, r1, r9
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	f04f 0300 	mov.w	r3, #0
 800199a:	018b      	lsls	r3, r1, #6
 800199c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a0:	0182      	lsls	r2, r0, #6
 80019a2:	1a12      	subs	r2, r2, r0
 80019a4:	eb63 0301 	sbc.w	r3, r3, r1
 80019a8:	f04f 0000 	mov.w	r0, #0
 80019ac:	f04f 0100 	mov.w	r1, #0
 80019b0:	00d9      	lsls	r1, r3, #3
 80019b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b6:	00d0      	lsls	r0, r2, #3
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	eb12 0208 	adds.w	r2, r2, r8
 80019c0:	eb43 0309 	adc.w	r3, r3, r9
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0259      	lsls	r1, r3, #9
 80019ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80019d2:	0250      	lsls	r0, r2, #9
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f7fe fbf4 	bl	80001d0 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e04a      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	461a      	mov	r2, r3
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	ea02 0400 	and.w	r4, r2, r0
 8001a0a:	ea03 0501 	and.w	r5, r3, r1
 8001a0e:	4620      	mov	r0, r4
 8001a10:	4629      	mov	r1, r5
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	014b      	lsls	r3, r1, #5
 8001a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a20:	0142      	lsls	r2, r0, #5
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	1b00      	subs	r0, r0, r4
 8001a28:	eb61 0105 	sbc.w	r1, r1, r5
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	018b      	lsls	r3, r1, #6
 8001a36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a3a:	0182      	lsls	r2, r0, #6
 8001a3c:	1a12      	subs	r2, r2, r0
 8001a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	00d9      	lsls	r1, r3, #3
 8001a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a50:	00d0      	lsls	r0, r2, #3
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	1912      	adds	r2, r2, r4
 8001a58:	eb45 0303 	adc.w	r3, r5, r3
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0299      	lsls	r1, r3, #10
 8001a66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a6a:	0290      	lsls	r0, r2, #10
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	f7fe fba8 	bl	80001d0 <__aeabi_uldivmod>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4613      	mov	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	60bb      	str	r3, [r7, #8]
      break;
 8001aa2:	e002      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aa6:	60bb      	str	r3, [r7, #8]
      break;
 8001aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000000 	.word	0x20000000

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	0800321c 	.word	0x0800321c

08001b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b08:	f7ff ffdc 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0b5b      	lsrs	r3, r3, #13
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	0800321c 	.word	0x0800321c

08001b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCC_GetClockConfig+0x60>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0207 	and.w	r2, r3, #7
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e041      	b.n	8001c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f839 	bl	8001c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 f9d8 	bl	8001f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e04e      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d022      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c86:	d01d      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <HAL_TIM_Base_Start_IT+0xc8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a18      	ldr	r2, [pc, #96]	; (8001d20 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40010400 	.word	0x40010400
 8001d1c:	40014000 	.word	0x40014000
 8001d20:	40001800 	.word	0x40001800

08001d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d122      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d11b      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0202 	mvn.w	r2, #2
 8001d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8ee 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8e0 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8f1 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d122      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0204 	mvn.w	r2, #4
 8001da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8c4 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8b6 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8c7 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d122      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d11b      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f06f 0208 	mvn.w	r2, #8
 8001df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f89a 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e14:	e005      	b.n	8001e22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f88c 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f89d 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d122      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d11b      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0210 	mvn.w	r2, #16
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2208      	movs	r2, #8
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f870 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f862 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f873 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d107      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0201 	mvn.w	r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fd0e 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b80      	cmp	r3, #128	; 0x80
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d107      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f902 	bl	80020d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b40      	cmp	r3, #64	; 0x40
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f838 	bl	8001f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0220 	mvn.w	r2, #32
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8cc 	bl	80020c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a40      	ldr	r2, [pc, #256]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d00f      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <TIM_Base_SetConfig+0x118>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3c      	ldr	r2, [pc, #240]	; (80020a0 <TIM_Base_SetConfig+0x11c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <TIM_Base_SetConfig+0x120>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a2f      	ldr	r2, [pc, #188]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d027      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <TIM_Base_SetConfig+0x118>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d023      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2b      	ldr	r2, [pc, #172]	; (80020a0 <TIM_Base_SetConfig+0x11c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <TIM_Base_SetConfig+0x120>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a28      	ldr	r2, [pc, #160]	; (80020ac <TIM_Base_SetConfig+0x128>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <TIM_Base_SetConfig+0x12c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <TIM_Base_SetConfig+0x130>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a25      	ldr	r2, [pc, #148]	; (80020b8 <TIM_Base_SetConfig+0x134>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <TIM_Base_SetConfig+0x138>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <TIM_Base_SetConfig+0x114>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0xf8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <TIM_Base_SetConfig+0x124>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d103      	bne.n	8002084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40010400 	.word	0x40010400
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800
 80020b8:	40001800 	.word	0x40001800
 80020bc:	40001c00 	.word	0x40001c00
 80020c0:	40002000 	.word	0x40002000

080020c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e03f      	b.n	800217e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fc1a 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fc7b 	bl	8002a2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0ba      	sub	sp, #232	; 0xe8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_UART_IRQHandler+0x66>
 80021da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fb65 	bl	80028b6 <UART_Receive_IT>
      return;
 80021ec:	e256      	b.n	800269c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80de 	beq.w	80023b4 <HAL_UART_IRQHandler+0x22c>
 80021f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002208:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80d1 	beq.w	80023b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_UART_IRQHandler+0xae>
 800221e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_UART_IRQHandler+0xd2>
 8002242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0202 	orr.w	r2, r3, #2
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800225a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_UART_IRQHandler+0xf6>
 8002266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0204 	orr.w	r2, r3, #4
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800227e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d011      	beq.n	80022ae <HAL_UART_IRQHandler+0x126>
 800228a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b00      	cmp	r3, #0
 8002294:	d105      	bne.n	80022a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0208 	orr.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 81ed 	beq.w	8002692 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_UART_IRQHandler+0x14e>
 80022c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 faf0 	bl	80028b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <HAL_UART_IRQHandler+0x17a>
 80022fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d04f      	beq.n	80023a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9f8 	bl	80026f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d141      	bne.n	800239a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3314      	adds	r3, #20
 800231c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	e853 3f00 	ldrex	r3, [r3]
 8002328:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800232c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002334:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3314      	adds	r3, #20
 800233e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002342:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800234a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800234e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002352:	e841 2300 	strex	r3, r2, [r1]
 8002356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800235a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1d9      	bne.n	8002316 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	2b00      	cmp	r3, #0
 8002368:	d013      	beq.n	8002392 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	4a7d      	ldr	r2, [pc, #500]	; (8002564 <HAL_UART_IRQHandler+0x3dc>)
 8002370:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fd8c 	bl	8000e94 <HAL_DMA_Abort_IT>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800238c:	4610      	mov	r0, r2
 800238e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002390:	e00e      	b.n	80023b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f99a 	bl	80026cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002398:	e00a      	b.n	80023b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f996 	bl	80026cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	e006      	b.n	80023b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f992 	bl	80026cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023ae:	e170      	b.n	8002692 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	bf00      	nop
    return;
 80023b2:	e16e      	b.n	8002692 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f040 814a 	bne.w	8002652 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8143 	beq.w	8002652 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 813c 	beq.w	8002652 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	f040 80b4 	bne.w	8002568 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800240c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8140 	beq.w	8002696 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800241a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800241e:	429a      	cmp	r2, r3
 8002420:	f080 8139 	bcs.w	8002696 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800242a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002436:	f000 8088 	beq.w	800254a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002448:	e853 3f00 	ldrex	r3, [r3]
 800244c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002466:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800246a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800247e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1d9      	bne.n	800243a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3314      	adds	r3, #20
 800248c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024b6:	e841 2300 	strex	r3, r2, [r1]
 80024ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e1      	bne.n	8002486 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	3314      	adds	r3, #20
 80024c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024ee:	e841 2300 	strex	r3, r2, [r1]
 80024f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80024f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e3      	bne.n	80024c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002512:	e853 3f00 	ldrex	r3, [r3]
 8002516:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	f023 0310 	bic.w	r3, r3, #16
 800251e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800252c:	65ba      	str	r2, [r7, #88]	; 0x58
 800252e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002534:	e841 2300 	strex	r3, r2, [r1]
 8002538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1e3      	bne.n	8002508 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fc35 	bl	8000db4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002552:	b29b      	uxth	r3, r3
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8c0 	bl	80026e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002560:	e099      	b.n	8002696 <HAL_UART_IRQHandler+0x50e>
 8002562:	bf00      	nop
 8002564:	080027bf 	.word	0x080027bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002570:	b29b      	uxth	r3, r3
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 808b 	beq.w	800269a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8086 	beq.w	800269a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	330c      	adds	r3, #12
 8002594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	e853 3f00 	ldrex	r3, [r3]
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800259e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025b2:	647a      	str	r2, [r7, #68]	; 0x44
 80025b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ba:	e841 2300 	strex	r3, r2, [r1]
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1e3      	bne.n	800258e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	623b      	str	r3, [r7, #32]
   return(result);
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3314      	adds	r3, #20
 80025e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025ea:	633a      	str	r2, [r7, #48]	; 0x30
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e3      	bne.n	80025c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	60fb      	str	r3, [r7, #12]
   return(result);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0310 	bic.w	r3, r3, #16
 8002622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002630:	61fa      	str	r2, [r7, #28]
 8002632:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	69b9      	ldr	r1, [r7, #24]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	617b      	str	r3, [r7, #20]
   return(result);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e3      	bne.n	800260c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f848 	bl	80026e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002650:	e023      	b.n	800269a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_UART_IRQHandler+0x4ea>
 800265e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8bb 	bl	80027e6 <UART_Transmit_IT>
    return;
 8002670:	e014      	b.n	800269c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00e      	beq.n	800269c <HAL_UART_IRQHandler+0x514>
 800267e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8fb 	bl	8002886 <UART_EndTransmit_IT>
    return;
 8002690:	e004      	b.n	800269c <HAL_UART_IRQHandler+0x514>
    return;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <HAL_UART_IRQHandler+0x514>
      return;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <HAL_UART_IRQHandler+0x514>
      return;
 800269a:	bf00      	nop
  }
}
 800269c:	37e8      	adds	r7, #232	; 0xe8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b095      	sub	sp, #84	; 0x54
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	e853 3f00 	ldrex	r3, [r3]
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	330c      	adds	r3, #12
 800271e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002720:	643a      	str	r2, [r7, #64]	; 0x40
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002726:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002728:	e841 2300 	strex	r3, r2, [r1]
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e5      	bne.n	8002700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	61fb      	str	r3, [r7, #28]
   return(result);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	64bb      	str	r3, [r7, #72]	; 0x48
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3314      	adds	r3, #20
 8002752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	2b01      	cmp	r3, #1
 800276e:	d119      	bne.n	80027a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	e853 3f00 	ldrex	r3, [r3]
 800277e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f023 0310 	bic.w	r3, r3, #16
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002790:	61ba      	str	r2, [r7, #24]
 8002792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002794:	6979      	ldr	r1, [r7, #20]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	e841 2300 	strex	r3, r2, [r1]
 800279c:	613b      	str	r3, [r7, #16]
   return(result);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e5      	bne.n	8002770 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027b2:	bf00      	nop
 80027b4:	3754      	adds	r7, #84	; 0x54
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff ff77 	bl	80026cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b21      	cmp	r3, #33	; 0x21
 80027f8:	d13e      	bne.n	8002878 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d114      	bne.n	800282e <UART_Transmit_IT+0x48>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1c9a      	adds	r2, r3, #2
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]
 800282c:	e008      	b.n	8002840 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6211      	str	r1, [r2, #32]
 8002838:	781a      	ldrb	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002862:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002872:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800289c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff fefc 	bl	80026a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08c      	sub	sp, #48	; 0x30
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b22      	cmp	r3, #34	; 0x22
 80028c8:	f040 80ab 	bne.w	8002a22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d117      	bne.n	8002906 <UART_Receive_IT+0x50>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d113      	bne.n	8002906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
 8002904:	e026      	b.n	8002954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d007      	beq.n	800292a <UART_Receive_IT+0x74>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <UART_Receive_IT+0x82>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e008      	b.n	800294a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002944:	b2da      	uxtb	r2, r3
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4619      	mov	r1, r3
 8002962:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002964:	2b00      	cmp	r3, #0
 8002966:	d15a      	bne.n	8002a1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0220 	bic.w	r2, r2, #32
 8002976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d135      	bne.n	8002a14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	613b      	str	r3, [r7, #16]
   return(result);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f023 0310 	bic.w	r3, r3, #16
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	623a      	str	r2, [r7, #32]
 80029d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	69f9      	ldr	r1, [r7, #28]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	61bb      	str	r3, [r7, #24]
   return(result);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d10a      	bne.n	8002a06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fe67 	bl	80026e0 <HAL_UARTEx_RxEventCallback>
 8002a12:	e002      	b.n	8002a1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fe4f 	bl	80026b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e002      	b.n	8002a24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3730      	adds	r7, #48	; 0x30
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a30:	b09f      	sub	sp, #124	; 0x7c
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	ea40 0301 	orr.w	r3, r0, r1
 8002a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a70:	f021 010c 	bic.w	r1, r1, #12
 8002a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8a:	6999      	ldr	r1, [r3, #24]
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	ea40 0301 	orr.w	r3, r0, r1
 8002a94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4bc5      	ldr	r3, [pc, #788]	; (8002db0 <UART_SetConfig+0x384>)
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d004      	beq.n	8002aaa <UART_SetConfig+0x7e>
 8002aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4bc3      	ldr	r3, [pc, #780]	; (8002db4 <UART_SetConfig+0x388>)
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d103      	bne.n	8002ab2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aaa:	f7ff f82b 	bl	8001b04 <HAL_RCC_GetPCLK2Freq>
 8002aae:	6778      	str	r0, [r7, #116]	; 0x74
 8002ab0:	e002      	b.n	8002ab8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ab2:	f7ff f813 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002ab6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac0:	f040 80b6 	bne.w	8002c30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	f04f 0500 	mov.w	r5, #0
 8002acc:	4622      	mov	r2, r4
 8002ace:	462b      	mov	r3, r5
 8002ad0:	1891      	adds	r1, r2, r2
 8002ad2:	6439      	str	r1, [r7, #64]	; 0x40
 8002ad4:	415b      	adcs	r3, r3
 8002ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ad8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002adc:	1912      	adds	r2, r2, r4
 8002ade:	eb45 0303 	adc.w	r3, r5, r3
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	00d9      	lsls	r1, r3, #3
 8002aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af0:	00d0      	lsls	r0, r2, #3
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	1911      	adds	r1, r2, r4
 8002af8:	6639      	str	r1, [r7, #96]	; 0x60
 8002afa:	416b      	adcs	r3, r5
 8002afc:	667b      	str	r3, [r7, #100]	; 0x64
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	1891      	adds	r1, r2, r2
 8002b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b0c:	415b      	adcs	r3, r3
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002b18:	f7fd fb5a 	bl	80001d0 <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4ba5      	ldr	r3, [pc, #660]	; (8002db8 <UART_SetConfig+0x38c>)
 8002b22:	fba3 2302 	umull	r2, r3, r3, r2
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	011e      	lsls	r6, r3, #4
 8002b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2c:	461c      	mov	r4, r3
 8002b2e:	f04f 0500 	mov.w	r5, #0
 8002b32:	4622      	mov	r2, r4
 8002b34:	462b      	mov	r3, r5
 8002b36:	1891      	adds	r1, r2, r2
 8002b38:	6339      	str	r1, [r7, #48]	; 0x30
 8002b3a:	415b      	adcs	r3, r3
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b42:	1912      	adds	r2, r2, r4
 8002b44:	eb45 0303 	adc.w	r3, r5, r3
 8002b48:	f04f 0000 	mov.w	r0, #0
 8002b4c:	f04f 0100 	mov.w	r1, #0
 8002b50:	00d9      	lsls	r1, r3, #3
 8002b52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b56:	00d0      	lsls	r0, r2, #3
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	1911      	adds	r1, r2, r4
 8002b5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b60:	416b      	adcs	r3, r5
 8002b62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	1891      	adds	r1, r2, r2
 8002b70:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b72:	415b      	adcs	r3, r3
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002b7e:	f7fd fb27 	bl	80001d0 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4b8c      	ldr	r3, [pc, #560]	; (8002db8 <UART_SetConfig+0x38c>)
 8002b88:	fba3 1302 	umull	r1, r3, r3, r2
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	2164      	movs	r1, #100	; 0x64
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	3332      	adds	r3, #50	; 0x32
 8002b9a:	4a87      	ldr	r2, [pc, #540]	; (8002db8 <UART_SetConfig+0x38c>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ba8:	441e      	add	r6, r3
 8002baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bac:	4618      	mov	r0, r3
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	1894      	adds	r4, r2, r2
 8002bb8:	623c      	str	r4, [r7, #32]
 8002bba:	415b      	adcs	r3, r3
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bc2:	1812      	adds	r2, r2, r0
 8002bc4:	eb41 0303 	adc.w	r3, r1, r3
 8002bc8:	f04f 0400 	mov.w	r4, #0
 8002bcc:	f04f 0500 	mov.w	r5, #0
 8002bd0:	00dd      	lsls	r5, r3, #3
 8002bd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bd6:	00d4      	lsls	r4, r2, #3
 8002bd8:	4622      	mov	r2, r4
 8002bda:	462b      	mov	r3, r5
 8002bdc:	1814      	adds	r4, r2, r0
 8002bde:	653c      	str	r4, [r7, #80]	; 0x50
 8002be0:	414b      	adcs	r3, r1
 8002be2:	657b      	str	r3, [r7, #84]	; 0x54
 8002be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	1891      	adds	r1, r2, r2
 8002bf0:	61b9      	str	r1, [r7, #24]
 8002bf2:	415b      	adcs	r3, r3
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002bfe:	f7fd fae7 	bl	80001d0 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b6c      	ldr	r3, [pc, #432]	; (8002db8 <UART_SetConfig+0x38c>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	; 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a67      	ldr	r2, [pc, #412]	; (8002db8 <UART_SetConfig+0x38c>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 0207 	and.w	r2, r3, #7
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4432      	add	r2, r6
 8002c2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c2e:	e0b9      	b.n	8002da4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c32:	461c      	mov	r4, r3
 8002c34:	f04f 0500 	mov.w	r5, #0
 8002c38:	4622      	mov	r2, r4
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	6139      	str	r1, [r7, #16]
 8002c40:	415b      	adcs	r3, r3
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c48:	1912      	adds	r2, r2, r4
 8002c4a:	eb45 0303 	adc.w	r3, r5, r3
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	00d9      	lsls	r1, r3, #3
 8002c58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c5c:	00d0      	lsls	r0, r2, #3
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	eb12 0804 	adds.w	r8, r2, r4
 8002c66:	eb43 0905 	adc.w	r9, r3, r5
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	008b      	lsls	r3, r1, #2
 8002c7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c82:	0082      	lsls	r2, r0, #2
 8002c84:	4640      	mov	r0, r8
 8002c86:	4649      	mov	r1, r9
 8002c88:	f7fd faa2 	bl	80001d0 <__aeabi_uldivmod>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <UART_SetConfig+0x38c>)
 8002c92:	fba3 2302 	umull	r2, r3, r3, r2
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	011e      	lsls	r6, r3, #4
 8002c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	1894      	adds	r4, r2, r2
 8002ca8:	60bc      	str	r4, [r7, #8]
 8002caa:	415b      	adcs	r3, r3
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cb2:	1812      	adds	r2, r2, r0
 8002cb4:	eb41 0303 	adc.w	r3, r1, r3
 8002cb8:	f04f 0400 	mov.w	r4, #0
 8002cbc:	f04f 0500 	mov.w	r5, #0
 8002cc0:	00dd      	lsls	r5, r3, #3
 8002cc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cc6:	00d4      	lsls	r4, r2, #3
 8002cc8:	4622      	mov	r2, r4
 8002cca:	462b      	mov	r3, r5
 8002ccc:	1814      	adds	r4, r2, r0
 8002cce:	64bc      	str	r4, [r7, #72]	; 0x48
 8002cd0:	414b      	adcs	r3, r1
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	008b      	lsls	r3, r1, #2
 8002ce8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cec:	0082      	lsls	r2, r0, #2
 8002cee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002cf2:	f7fd fa6d 	bl	80001d0 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <UART_SetConfig+0x38c>)
 8002cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2164      	movs	r1, #100	; 0x64
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	3332      	adds	r3, #50	; 0x32
 8002d0e:	4a2a      	ldr	r2, [pc, #168]	; (8002db8 <UART_SetConfig+0x38c>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d1a:	441e      	add	r6, r3
 8002d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	1894      	adds	r4, r2, r2
 8002d2a:	603c      	str	r4, [r7, #0]
 8002d2c:	415b      	adcs	r3, r3
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d34:	1812      	adds	r2, r2, r0
 8002d36:	eb41 0303 	adc.w	r3, r1, r3
 8002d3a:	f04f 0400 	mov.w	r4, #0
 8002d3e:	f04f 0500 	mov.w	r5, #0
 8002d42:	00dd      	lsls	r5, r3, #3
 8002d44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d48:	00d4      	lsls	r4, r2, #3
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	eb12 0a00 	adds.w	sl, r2, r0
 8002d52:	eb43 0b01 	adc.w	fp, r3, r1
 8002d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	008b      	lsls	r3, r1, #2
 8002d6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d6e:	0082      	lsls	r2, r0, #2
 8002d70:	4650      	mov	r0, sl
 8002d72:	4659      	mov	r1, fp
 8002d74:	f7fd fa2c 	bl	80001d0 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <UART_SetConfig+0x38c>)
 8002d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2164      	movs	r1, #100	; 0x64
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	3332      	adds	r3, #50	; 0x32
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <UART_SetConfig+0x38c>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4432      	add	r2, r6
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	377c      	adds	r7, #124	; 0x7c
 8002da8:	46bd      	mov	sp, r7
 8002daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dae:	bf00      	nop
 8002db0:	40011000 	.word	0x40011000
 8002db4:	40011400 	.word	0x40011400
 8002db8:	51eb851f 	.word	0x51eb851f

08002dbc <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	601a      	str	r2, [r3, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6892      	ldr	r2, [r2, #8]
 8002e1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d103      	bne.n	8002e38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e62:	4b4e      	ldr	r3, [pc, #312]	; (8002f9c <xTaskIncrementTick+0x144>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 808e 	bne.w	8002f88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <xTaskIncrementTick+0x148>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e74:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <xTaskIncrementTick+0x148>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d120      	bne.n	8002ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e80:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <xTaskIncrementTick+0x46>
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a3e      	ldr	r2, [pc, #248]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4a3e      	ldr	r2, [pc, #248]	; (8002fa8 <xTaskIncrementTick+0x150>)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <xTaskIncrementTick+0x154>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a3c      	ldr	r2, [pc, #240]	; (8002fac <xTaskIncrementTick+0x154>)
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	f000 f8df 	bl	8003080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <xTaskIncrementTick+0x158>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d348      	bcc.n	8002f5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ecc:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed6:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <xTaskIncrementTick+0x158>)
 8002ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8002edc:	601a      	str	r2, [r3, #0]
					break;
 8002ede:	e03e      	b.n	8002f5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <xTaskIncrementTick+0x14c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d203      	bcs.n	8002f00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	; (8002fb0 <xTaskIncrementTick+0x158>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002efe:	e02e      	b.n	8002f5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff7d 	bl	8002e04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3318      	adds	r3, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff74 	bl	8002e04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <xTaskIncrementTick+0x15c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <xTaskIncrementTick+0x15c>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <xTaskIncrementTick+0x160>)
 8002f3c:	441a      	add	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f7ff ff39 	bl	8002dbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <xTaskIncrementTick+0x164>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d3b9      	bcc.n	8002ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5c:	e7b6      	b.n	8002ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <xTaskIncrementTick+0x164>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	4914      	ldr	r1, [pc, #80]	; (8002fb8 <xTaskIncrementTick+0x160>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d901      	bls.n	8002f7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <xTaskIncrementTick+0x168>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002f82:	2301      	movs	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e004      	b.n	8002f92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <xTaskIncrementTick+0x16c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <xTaskIncrementTick+0x16c>)
 8002f90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f92:	697b      	ldr	r3, [r7, #20]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200000d8 	.word	0x200000d8
 8002fa0:	200000c0 	.word	0x200000c0
 8002fa4:	200000b8 	.word	0x200000b8
 8002fa8:	200000bc 	.word	0x200000bc
 8002fac:	200000d0 	.word	0x200000d0
 8002fb0:	200000d4 	.word	0x200000d4
 8002fb4:	200000c4 	.word	0x200000c4
 8002fb8:	2000002c 	.word	0x2000002c
 8002fbc:	20000028 	.word	0x20000028
 8002fc0:	200000cc 	.word	0x200000cc
 8002fc4:	200000c8 	.word	0x200000c8

08002fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <vTaskSwitchContext+0xa4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <vTaskSwitchContext+0xa8>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fdc:	e03f      	b.n	800305e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <vTaskSwitchContext+0xa8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <vTaskSwitchContext+0xac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f1c3 031f 	rsb	r3, r3, #31
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	491f      	ldr	r1, [pc, #124]	; (8003078 <vTaskSwitchContext+0xb0>)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <vTaskSwitchContext+0x5c>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	607b      	str	r3, [r7, #4]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <vTaskSwitchContext+0x5a>
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <vTaskSwitchContext+0xb0>)
 8003030:	4413      	add	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3308      	adds	r3, #8
 8003046:	429a      	cmp	r2, r3
 8003048:	d104      	bne.n	8003054 <vTaskSwitchContext+0x8c>
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <vTaskSwitchContext+0xb4>)
 800305c:	6013      	str	r3, [r2, #0]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200000d8 	.word	0x200000d8
 8003070:	200000cc 	.word	0x200000cc
 8003074:	200000c4 	.word	0x200000c4
 8003078:	2000002c 	.word	0x2000002c
 800307c:	20000028 	.word	0x20000028

08003080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <prvResetNextTaskUnblockTime+0x38>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <prvResetNextTaskUnblockTime+0x3c>)
 8003092:	f04f 32ff 	mov.w	r2, #4294967295
 8003096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003098:	e008      	b.n	80030ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <prvResetNextTaskUnblockTime+0x38>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <prvResetNextTaskUnblockTime+0x3c>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	200000b8 	.word	0x200000b8
 80030bc:	200000d4 	.word	0x200000d4

080030c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pxCurrentTCBConst2>)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	f380 8809 	msr	PSP, r0
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8811 	msr	BASEPRI, r0
 80030da:	4770      	bx	lr
 80030dc:	f3af 8000 	nop.w

080030e0 <pxCurrentTCBConst2>:
 80030e0:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop
	...

080030f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80030f0:	f3ef 8009 	mrs	r0, PSP
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	4b15      	ldr	r3, [pc, #84]	; (8003150 <pxCurrentTCBConst>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	f01e 0f10 	tst.w	lr, #16
 8003100:	bf08      	it	eq
 8003102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310a:	6010      	str	r0, [r2, #0]
 800310c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003114:	f380 8811 	msr	BASEPRI, r0
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f7ff ff52 	bl	8002fc8 <vTaskSwitchContext>
 8003124:	f04f 0000 	mov.w	r0, #0
 8003128:	f380 8811 	msr	BASEPRI, r0
 800312c:	bc09      	pop	{r0, r3}
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	6808      	ldr	r0, [r1, #0]
 8003132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003136:	f01e 0f10 	tst.w	lr, #16
 800313a:	bf08      	it	eq
 800313c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003140:	f380 8809 	msr	PSP, r0
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w

08003150 <pxCurrentTCBConst>:
 8003150:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop

08003158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	607b      	str	r3, [r7, #4]
}
 8003170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003172:	f7ff fe71 	bl	8002e58 <xTaskIncrementTick>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <SysTick_Handler+0x40>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800318e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	e000ed04 	.word	0xe000ed04

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	4d0d      	ldr	r5, [pc, #52]	; (80031d4 <__libc_init_array+0x38>)
 80031a0:	4c0d      	ldr	r4, [pc, #52]	; (80031d8 <__libc_init_array+0x3c>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	2600      	movs	r6, #0
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	4d0b      	ldr	r5, [pc, #44]	; (80031dc <__libc_init_array+0x40>)
 80031ae:	4c0c      	ldr	r4, [pc, #48]	; (80031e0 <__libc_init_array+0x44>)
 80031b0:	f000 f820 	bl	80031f4 <_init>
 80031b4:	1b64      	subs	r4, r4, r5
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	2600      	movs	r6, #0
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	0800322c 	.word	0x0800322c
 80031d8:	0800322c 	.word	0x0800322c
 80031dc:	0800322c 	.word	0x0800322c
 80031e0:	08003230 	.word	0x08003230

080031e4 <memset>:
 80031e4:	4402      	add	r2, r0
 80031e6:	4603      	mov	r3, r0
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d100      	bne.n	80031ee <memset+0xa>
 80031ec:	4770      	bx	lr
 80031ee:	f803 1b01 	strb.w	r1, [r3], #1
 80031f2:	e7f9      	b.n	80031e8 <memset+0x4>

080031f4 <_init>:
 80031f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f6:	bf00      	nop
 80031f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fa:	bc08      	pop	{r3}
 80031fc:	469e      	mov	lr, r3
 80031fe:	4770      	bx	lr

08003200 <_fini>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	bf00      	nop
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr
