
FreeRTOS_cubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800411c  0800411c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004124  08004124  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800412c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004050  20000010  0800413c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004060  0800413c  00024060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011467  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028df  00000000  00000000  000314a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00034d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c4c  00000000  00000000  00035c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f37c  00000000  00000000  0005787c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d170c  00000000  00000000  00066bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e8  00000000  00000000  00138358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fe4 	.word	0x08003fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003fe4 	.word	0x08003fe4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	20000080 	.word	0x20000080

080004fc <send_deftask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void send_deftask(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
	uint8_t data[] = "Wake up!\r\n";
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <send_deftask+0x2c>)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	ca07      	ldmia	r2, {r0, r1, r2}
 8000508:	c303      	stmia	r3!, {r0, r1}
 800050a:	801a      	strh	r2, [r3, #0]
 800050c:	3302      	adds	r3, #2
 800050e:	0c12      	lsrs	r2, r2, #16
 8000510:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), 500);
 8000512:	1d39      	adds	r1, r7, #4
 8000514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000518:	220b      	movs	r2, #11
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <send_deftask+0x30>)
 800051c:	f001 fe79 	bl	8002212 <HAL_UART_Transmit>
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	0800402c 	.word	0x0800402c
 800052c:	20003fdc 	.word	0x20003fdc

08000530 <send_task2>:

void send_task2(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
	uint8_t data[] = " 7.30  - 17.30 Work wisely! \r\n";
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <send_task2+0x34>)
 8000538:	463c      	mov	r4, r7
 800053a:	461d      	mov	r5, r3
 800053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000544:	c407      	stmia	r4!, {r0, r1, r2}
 8000546:	8023      	strh	r3, [r4, #0]
 8000548:	3402      	adds	r4, #2
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), 500);
 800054e:	4639      	mov	r1, r7
 8000550:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000554:	221f      	movs	r2, #31
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <send_task2+0x38>)
 8000558:	f001 fe5b 	bl	8002212 <HAL_UART_Transmit>
}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bdb0      	pop	{r4, r5, r7, pc}
 8000564:	08004038 	.word	0x08004038
 8000568:	20003fdc 	.word	0x20003fdc

0800056c <send_task3>:

void send_task3(void)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b08e      	sub	sp, #56	; 0x38
 8000570:	af00      	add	r7, sp, #0
	uint8_t data[] = "Sleep! \r\n";
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <send_task3+0x50>)
 8000574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000578:	ca07      	ldmia	r2, {r0, r1, r2}
 800057a:	c303      	stmia	r3!, {r0, r1}
 800057c:	801a      	strh	r2, [r3, #0]
	uint8_t seperator[] = "********************************* \r\n";
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <send_task3+0x54>)
 8000580:	1d3c      	adds	r4, r7, #4
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800058c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000590:	6020      	str	r0, [r4, #0]
 8000592:	3404      	adds	r4, #4
 8000594:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)data, sizeof(data), 500);
 8000596:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800059a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800059e:	220a      	movs	r2, #10
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <send_task3+0x58>)
 80005a2:	f001 fe36 	bl	8002212 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)seperator, sizeof(seperator), 500);
 80005a6:	1d39      	adds	r1, r7, #4
 80005a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005ac:	2225      	movs	r2, #37	; 0x25
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <send_task3+0x58>)
 80005b0:	f001 fe2f 	bl	8002212 <HAL_UART_Transmit>

}
 80005b4:	bf00      	nop
 80005b6:	3738      	adds	r7, #56	; 0x38
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bdb0      	pop	{r4, r5, r7, pc}
 80005bc:	08004058 	.word	0x08004058
 80005c0:	08004064 	.word	0x08004064
 80005c4:	20003fdc 	.word	0x20003fdc

080005c8 <send_task4>:

void send_task4(void)
{
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
		uint8_t seperator[] = "********************************* \r\n";
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <send_task4+0x34>)
 80005d0:	463c      	mov	r4, r7
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e0:	6020      	str	r0, [r4, #0]
 80005e2:	3404      	adds	r4, #4
 80005e4:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)seperator, sizeof(seperator), 500);
 80005e6:	4639      	mov	r1, r7
 80005e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005ec:	2225      	movs	r2, #37	; 0x25
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <send_task4+0x38>)
 80005f0:	f001 fe0f 	bl	8002212 <HAL_UART_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bdb0      	pop	{r4, r5, r7, pc}
 80005fc:	08004064 	.word	0x08004064
 8000600:	20003fdc 	.word	0x20003fdc

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b09c      	sub	sp, #112	; 0x70
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fbe5 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f861 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f8f3 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000616:	f000 f8c7 	bl	80007a8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <main+0xb0>)
 800061c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800062e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fa8a 	bl	8002b4e <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <main+0xb4>)
 800063e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <main+0xb8>)
 8000642:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000654:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fa77 	bl	8002b4e <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <main+0xbc>)
 8000664:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <main+0xc0>)
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fa64 	bl	8002b4e <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <main+0xc4>)
 800068a:	6013      	str	r3, [r2, #0]

  osThreadDef(myTask04, StartTask04, osPriorityNormal, 0, 128);
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xc8>)
 800068e:	463c      	mov	r4, r7
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 fa53 	bl	8002b4e <osThreadCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <main+0xcc>)
 80006ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f002 fa47 	bl	8002b40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0xae>
 80006b4:	0800408c 	.word	0x0800408c
 80006b8:	20003fcc 	.word	0x20003fcc
 80006bc:	080040a8 	.word	0x080040a8
 80006c0:	20003fd4 	.word	0x20003fd4
 80006c4:	080040c4 	.word	0x080040c4
 80006c8:	20003fd8 	.word	0x20003fd8
 80006cc:	080040e0 	.word	0x080040e0
 80006d0:	20003fd0 	.word	0x20003fd0

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f003 fc76 	bl	8003fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000748:	2332      	movs	r3, #50	; 0x32
 800074a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074c:	2304      	movs	r3, #4
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000750:	2307      	movs	r3, #7
 8000752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 0320 	add.w	r3, r7, #32
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fe31 	bl	80013c0 <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000764:	f000 fa04 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000768:	230f      	movs	r3, #15
 800076a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	2302      	movs	r3, #2
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f88a 	bl	80018a0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000792:	f000 f9ed 	bl	8000b70 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART2_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f001 fcca 	bl	8002178 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f9c1 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20003fdc 	.word	0x20003fdc
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4ba1      	ldr	r3, [pc, #644]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4aa0      	ldr	r2, [pc, #640]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b9e      	ldr	r3, [pc, #632]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b9a      	ldr	r3, [pc, #616]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a99      	ldr	r2, [pc, #612]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b97      	ldr	r3, [pc, #604]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b93      	ldr	r3, [pc, #588]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a92      	ldr	r2, [pc, #584]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b90      	ldr	r3, [pc, #576]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b8c      	ldr	r3, [pc, #560]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a8b      	ldr	r2, [pc, #556]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b89      	ldr	r3, [pc, #548]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b85      	ldr	r3, [pc, #532]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a84      	ldr	r2, [pc, #528]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b82      	ldr	r3, [pc, #520]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b7e      	ldr	r3, [pc, #504]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a7d      	ldr	r2, [pc, #500]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b7b      	ldr	r3, [pc, #492]	; (8000a9c <MX_GPIO_Init+0x2a0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	4878      	ldr	r0, [pc, #480]	; (8000aa0 <MX_GPIO_Init+0x2a4>)
 80008c0:	f000 fd4a 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2101      	movs	r1, #1
 80008c8:	4876      	ldr	r0, [pc, #472]	; (8000aa4 <MX_GPIO_Init+0x2a8>)
 80008ca:	f000 fd45 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ce:	2200      	movs	r2, #0
 80008d0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008d4:	4874      	ldr	r0, [pc, #464]	; (8000aa8 <MX_GPIO_Init+0x2ac>)
 80008d6:	f000 fd3f 	bl	8001358 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	486b      	ldr	r0, [pc, #428]	; (8000aa0 <MX_GPIO_Init+0x2a4>)
 80008f2:	f000 fb95 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4865      	ldr	r0, [pc, #404]	; (8000aa4 <MX_GPIO_Init+0x2a8>)
 800090e:	f000 fb87 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	485d      	ldr	r0, [pc, #372]	; (8000aa4 <MX_GPIO_Init+0x2a8>)
 800092e:	f000 fb77 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	4b5d      	ldr	r3, [pc, #372]	; (8000aac <MX_GPIO_Init+0x2b0>)
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	485a      	ldr	r0, [pc, #360]	; (8000ab0 <MX_GPIO_Init+0x2b4>)
 8000946:	f000 fb6b 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800094a:	2310      	movs	r3, #16
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095a:	2306      	movs	r3, #6
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4852      	ldr	r0, [pc, #328]	; (8000ab0 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fb5b 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800096a:	23e0      	movs	r3, #224	; 0xe0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800097a:	2305      	movs	r3, #5
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	484a      	ldr	r0, [pc, #296]	; (8000ab0 <MX_GPIO_Init+0x2b4>)
 8000986:	f000 fb4b 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800098a:	2304      	movs	r3, #4
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4845      	ldr	r0, [pc, #276]	; (8000ab4 <MX_GPIO_Init+0x2b8>)
 800099e:	f000 fb3f 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b4:	2305      	movs	r3, #5
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	483d      	ldr	r0, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x2b8>)
 80009c0:	f000 fb2e 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4832      	ldr	r0, [pc, #200]	; (8000aa8 <MX_GPIO_Init+0x2ac>)
 80009de:	f000 fb1f 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f4:	2306      	movs	r3, #6
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4829      	ldr	r0, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0x2a8>)
 8000a00:	f000 fb0e 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0x2b4>)
 8000a1a:	f000 fb01 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a30:	230a      	movs	r3, #10
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <MX_GPIO_Init+0x2b4>)
 8000a3c:	f000 faf0 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a40:	2320      	movs	r3, #32
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x2ac>)
 8000a54:	f000 fae4 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a58:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5e:	2312      	movs	r3, #18
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <MX_GPIO_Init+0x2b8>)
 8000a76:	f000 fad3 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_GPIO_Init+0x2bc>)
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0x2a4>)
 8000a8e:	f000 fac7 	bl	8001020 <HAL_GPIO_Init>

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	10110000 	.word	0x10110000
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	10120000 	.word	0x10120000

08000abc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <StartDefaultTask+0x20>)
 8000aca:	f000 fc5e 	bl	800138a <HAL_GPIO_TogglePin>
	  send_deftask();
 8000ace:	f7ff fd15 	bl	80004fc <send_deftask>
	  osDelay(1000);
 8000ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad6:	f002 f886 	bl	8002be6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ada:	e7f3      	b.n	8000ac4 <StartDefaultTask+0x8>
 8000adc:	40020c00 	.word	0x40020c00

08000ae0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <StartTask02+0x20>)
 8000aee:	f000 fc4c 	bl	800138a <HAL_GPIO_TogglePin>
	  send_task2();
 8000af2:	f7ff fd1d 	bl	8000530 <send_task2>
	  osDelay(1010);
 8000af6:	f240 30f2 	movw	r0, #1010	; 0x3f2
 8000afa:	f002 f874 	bl	8002be6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000afe:	e7f3      	b.n	8000ae8 <StartTask02+0x8>
 8000b00:	40020c00 	.word	0x40020c00

08000b04 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  send_task3();
 8000b0c:	f7ff fd2e 	bl	800056c <send_task3>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000b10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <StartTask03+0x20>)
 8000b16:	f000 fc38 	bl	800138a <HAL_GPIO_TogglePin>

    osDelay(1020);
 8000b1a:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 8000b1e:	f002 f862 	bl	8002be6 <osDelay>
	  send_task3();
 8000b22:	e7f3      	b.n	8000b0c <StartTask03+0x8>
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <StartTask04>:
  }
  /* USER CODE END StartTask03 */
}
void StartTask04(void const * argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  send_task4();
 8000b30:	f7ff fd4a 	bl	80005c8 <send_task4>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <StartTask04+0x20>)
 8000b3a:	f000 fc26 	bl	800138a <HAL_GPIO_TogglePin>

    osDelay(1030);
 8000b3e:	f240 4006 	movw	r0, #1030	; 0x406
 8000b42:	f002 f850 	bl	8002be6 <osDelay>
	  send_task4();
 8000b46:	e7f3      	b.n	8000b30 <StartTask04+0x8>
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f000 f95d 	bl	8000e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010000 	.word	0x40010000

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x54>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_MspInit+0x54>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fa03 	bl	8000fcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <HAL_UART_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a10      	ldr	r2, [pc, #64]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x8c>)
 8000c4a:	f000 f9e9 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	; 0x30
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2019      	movs	r0, #25
 8000c7a:	f000 f9a7 	bl	8000fcc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c7e:	2019      	movs	r0, #25
 8000c80:	f000 f9c0 	bl	8001004 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6453      	str	r3, [r2, #68]	; 0x44
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_InitTick+0xa4>)
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca0:	f107 0210 	add.w	r2, r7, #16
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fff4 	bl	8001c98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cb0:	f000 ffde 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_InitTick+0xa8>)
 8000cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc2:	0c9b      	lsrs	r3, r3, #18
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_InitTick+0xac>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_InitTick+0xb0>)
 8000ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_InitTick+0xac>)
 8000cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_InitTick+0xac>)
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_InitTick+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_InitTick+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_InitTick+0xac>)
 8000cea:	f001 f807 	bl	8001cfc <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <HAL_InitTick+0xac>)
 8000cf6:	f001 f836 	bl	8001d66 <HAL_TIM_Base_Start_IT>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3730      	adds	r7, #48	; 0x30
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	2000401c 	.word	0x2000401c
 8000d14:	40010000 	.word	0x40010000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d4a:	f001 f830 	bl	8001dae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000401c 	.word	0x2000401c

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <SystemInit+0x28>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <SystemInit+0x28>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SystemInit+0x28>)
 8000d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d72:	609a      	str	r2, [r3, #8]
#endif
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d8a:	e003      	b.n	8000d94 <LoopCopyDataInit>

08000d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d92:	3104      	adds	r1, #4

08000d94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d9c:	d3f6      	bcc.n	8000d8c <CopyDataInit>
  ldr  r2, =_sbss
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000da0:	e002      	b.n	8000da8 <LoopFillZerobss>

08000da2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000da2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000da4:	f842 3b04 	str.w	r3, [r2], #4

08000da8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dac:	d3f9      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dae:	f7ff ffd3 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f003 f8eb 	bl	8003f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fc25 	bl	8000604 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dc0:	0800412c 	.word	0x0800412c
  ldr  r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dc8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000dcc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000dd0:	20004060 	.word	0x20004060

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f8d8 	bl	8000fb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff2c 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff feb6 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	2000405c 	.word	0x2000405c

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	2000405c 	.word	0x2000405c

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff4c 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fde:	f7ff ff61 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff ffb1 	bl	8000f50 <NVIC_EncodePriority>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff80 	bl	8000efc <__NVIC_SetPriority>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff54 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e16b      	b.n	8001314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 815a 	bne.w	800130e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d00b      	beq.n	800107a <HAL_GPIO_Init+0x5a>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106e:	2b11      	cmp	r3, #17
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b12      	cmp	r3, #18
 8001078:	d130      	bne.n	80010dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0xfc>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b12      	cmp	r3, #18
 800111a:	d123      	bne.n	8001164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80b4 	beq.w	800130e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b60      	ldr	r3, [pc, #384]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a5f      	ldr	r2, [pc, #380]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <HAL_GPIO_Init+0x30c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c2:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <HAL_GPIO_Init+0x310>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <HAL_GPIO_Init+0x314>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_GPIO_Init+0x318>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	; (800133c <HAL_GPIO_Init+0x31c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_GPIO_Init+0x320>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x21a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_GPIO_Init+0x324>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x216>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4d      	ldr	r2, [pc, #308]	; (8001348 <HAL_GPIO_Init+0x328>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x212>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x32c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x20e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <HAL_GPIO_Init+0x330>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x20a>
 8001226:	2307      	movs	r3, #7
 8001228:	e00e      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122a:	2308      	movs	r3, #8
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122e:	2306      	movs	r3, #6
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <HAL_GPIO_Init+0x310>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001266:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128a:	4a32      	ldr	r2, [pc, #200]	; (8001354 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <HAL_GPIO_Init+0x334>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012de:	4a1d      	ldr	r2, [pc, #116]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_GPIO_Init+0x334>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f ae90 	bls.w	800103c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	; 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	401a      	ands	r2, r3
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d104      	bne.n	80013ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e25b      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d075      	beq.n	80014ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013de:	4ba3      	ldr	r3, [pc, #652]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d00c      	beq.n	8001404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4ba0      	ldr	r3, [pc, #640]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d112      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4b9d      	ldr	r3, [pc, #628]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001402:	d10b      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	4b99      	ldr	r3, [pc, #612]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d05b      	beq.n	80014c8 <HAL_RCC_OscConfig+0x108>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d157      	bne.n	80014c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e236      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d106      	bne.n	8001434 <HAL_RCC_OscConfig+0x74>
 8001426:	4b91      	ldr	r3, [pc, #580]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a90      	ldr	r2, [pc, #576]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b8b      	ldr	r3, [pc, #556]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a8a      	ldr	r2, [pc, #552]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a87      	ldr	r2, [pc, #540]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001458:	4b84      	ldr	r3, [pc, #528]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a83      	ldr	r2, [pc, #524]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a80      	ldr	r2, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fce4 	bl	8000e44 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fce0 	bl	8000e44 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1fb      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b76      	ldr	r3, [pc, #472]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0xc0>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fcd0 	bl	8000e44 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fccc 	bl	8000e44 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1e7      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b6c      	ldr	r3, [pc, #432]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0xe8>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d063      	beq.n	800159e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b62      	ldr	r3, [pc, #392]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d11c      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b5c      	ldr	r3, [pc, #368]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e1bb      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b56      	ldr	r3, [pc, #344]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4952      	ldr	r1, [pc, #328]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e03a      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <HAL_RCC_OscConfig+0x2b0>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fc85 	bl	8000e44 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fc81 	bl	8000e44 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e19c      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4940      	ldr	r1, [pc, #256]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e015      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x2b0>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fc64 	bl	8000e44 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fc60 	bl	8000e44 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e17b      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	4b36      	ldr	r3, [pc, #216]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d030      	beq.n	800160c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d016      	beq.n	80015e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <HAL_RCC_OscConfig+0x2b4>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fc44 	bl	8000e44 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc40 	bl	8000e44 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e15b      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x200>
 80015de:	e015      	b.n	800160c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x2b4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fc2d 	bl	8000e44 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fc29 	bl	8000e44 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e144      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a0 	beq.w	800175a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_RCC_OscConfig+0x2ac>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_OscConfig+0x2b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d121      	bne.n	800169a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_RCC_OscConfig+0x2b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_RCC_OscConfig+0x2b8>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fbef 	bl	8000e44 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e011      	b.n	800168e <HAL_RCC_OscConfig+0x2ce>
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	42470000 	.word	0x42470000
 8001674:	42470e80 	.word	0x42470e80
 8001678:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167c:	f7ff fbe2 	bl	8000e44 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0fd      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b81      	ldr	r3, [pc, #516]	; (8001894 <HAL_RCC_OscConfig+0x4d4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d106      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
 80016a2:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	4a7c      	ldr	r2, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6713      	str	r3, [r2, #112]	; 0x70
 80016ae:	e01c      	b.n	80016ea <HAL_RCC_OscConfig+0x32a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x312>
 80016b8:	4b77      	ldr	r3, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	4a76      	ldr	r2, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6713      	str	r3, [r2, #112]	; 0x70
 80016c4:	4b74      	ldr	r3, [pc, #464]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a73      	ldr	r2, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	e00b      	b.n	80016ea <HAL_RCC_OscConfig+0x32a>
 80016d2:	4b71      	ldr	r3, [pc, #452]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a70      	ldr	r2, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
 80016de:	4b6e      	ldr	r3, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e2:	4a6d      	ldr	r2, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d015      	beq.n	800171e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff fba7 	bl	8000e44 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fba3 	bl	8000e44 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0bc      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ee      	beq.n	80016fa <HAL_RCC_OscConfig+0x33a>
 800171c:	e014      	b.n	8001748 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171e:	f7ff fb91 	bl	8000e44 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff fb8d 	bl	8000e44 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0a6      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173c:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d105      	bne.n	800175a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174e:	4b52      	ldr	r3, [pc, #328]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a51      	ldr	r2, [pc, #324]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 8001754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8092 	beq.w	8001888 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d05c      	beq.n	800182a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d141      	bne.n	80017fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_RCC_OscConfig+0x4dc>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fb61 	bl	8000e44 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff fb5d 	bl	8000e44 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e078      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69da      	ldr	r2, [r3, #28]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	019b      	lsls	r3, r3, #6
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	3b01      	subs	r3, #1
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	061b      	lsls	r3, r3, #24
 80017c8:	4933      	ldr	r1, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ce:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_RCC_OscConfig+0x4dc>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb36 	bl	8000e44 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fb32 	bl	8000e44 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04d      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x41c>
 80017fa:	e045      	b.n	8001888 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x4dc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff fb1f 	bl	8000e44 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff fb1b 	bl	8000e44 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e036      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x44a>
 8001828:	e02e      	b.n	8001888 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e029      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_RCC_OscConfig+0x4d8>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	429a      	cmp	r2, r3
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d115      	bne.n	8001884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001864:	4293      	cmp	r3, r2
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000
 8001898:	40023800 	.word	0x40023800
 800189c:	42470060 	.word	0x42470060

080018a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0cc      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d90c      	bls.n	80018dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b65      	ldr	r3, [pc, #404]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ca:	4b63      	ldr	r3, [pc, #396]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d001      	beq.n	80018dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b8      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	494d      	ldr	r1, [pc, #308]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d044      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d107      	bne.n	800194e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d119      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e07f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d003      	beq.n	800195e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	2b03      	cmp	r3, #3
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e06f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e067      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001990:	f7ff fa58 	bl	8000e44 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff fa54 	bl	8000e44 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e04f      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d20c      	bcs.n	80019e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e032      	b.n	8001a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4916      	ldr	r1, [pc, #88]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	490e      	ldr	r1, [pc, #56]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a26:	f000 f821 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	490a      	ldr	r1, [pc, #40]	; (8001a60 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	5ccb      	ldrb	r3, [r1, r3]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	4a09      	ldr	r2, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f90c 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	08004104 	.word	0x08004104
 8001a64:	20000000 	.word	0x20000000
 8001a68:	20000004 	.word	0x20000004

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a84:	4b67      	ldr	r3, [pc, #412]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d00d      	beq.n	8001aac <HAL_RCC_GetSysClockFreq+0x40>
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	f200 80bd 	bhi.w	8001c10 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d003      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a9e:	e0b7      	b.n	8001c10 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001aa2:	60bb      	str	r3, [r7, #8]
       break;
 8001aa4:	e0b7      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001aa8:	60bb      	str	r3, [r7, #8]
      break;
 8001aaa:	e0b4      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aac:	4b5d      	ldr	r3, [pc, #372]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ab4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab6:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d04d      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b58      	ldr	r3, [pc, #352]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	ea02 0800 	and.w	r8, r2, r0
 8001ada:	ea03 0901 	and.w	r9, r3, r1
 8001ade:	4640      	mov	r0, r8
 8001ae0:	4649      	mov	r1, r9
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	014b      	lsls	r3, r1, #5
 8001aec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001af0:	0142      	lsls	r2, r0, #5
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	ebb0 0008 	subs.w	r0, r0, r8
 8001afa:	eb61 0109 	sbc.w	r1, r1, r9
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	018b      	lsls	r3, r1, #6
 8001b08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b0c:	0182      	lsls	r2, r0, #6
 8001b0e:	1a12      	subs	r2, r2, r0
 8001b10:	eb63 0301 	sbc.w	r3, r3, r1
 8001b14:	f04f 0000 	mov.w	r0, #0
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	00d9      	lsls	r1, r3, #3
 8001b1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b22:	00d0      	lsls	r0, r2, #3
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	eb12 0208 	adds.w	r2, r2, r8
 8001b2c:	eb43 0309 	adc.w	r3, r3, r9
 8001b30:	f04f 0000 	mov.w	r0, #0
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	0259      	lsls	r1, r3, #9
 8001b3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b3e:	0250      	lsls	r0, r2, #9
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	f7fe fb3e 	bl	80001d0 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e04a      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	461a      	mov	r2, r3
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	ea02 0400 	and.w	r4, r2, r0
 8001b76:	ea03 0501 	and.w	r5, r3, r1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	014b      	lsls	r3, r1, #5
 8001b88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b8c:	0142      	lsls	r2, r0, #5
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	1b00      	subs	r0, r0, r4
 8001b94:	eb61 0105 	sbc.w	r1, r1, r5
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	018b      	lsls	r3, r1, #6
 8001ba2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ba6:	0182      	lsls	r2, r0, #6
 8001ba8:	1a12      	subs	r2, r2, r0
 8001baa:	eb63 0301 	sbc.w	r3, r3, r1
 8001bae:	f04f 0000 	mov.w	r0, #0
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	00d9      	lsls	r1, r3, #3
 8001bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bbc:	00d0      	lsls	r0, r2, #3
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	1912      	adds	r2, r2, r4
 8001bc4:	eb45 0303 	adc.w	r3, r5, r3
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0299      	lsls	r1, r3, #10
 8001bd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bd6:	0290      	lsls	r0, r2, #10
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f7fe faf2 	bl	80001d0 <__aeabi_uldivmod>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	60bb      	str	r3, [r7, #8]
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c12:	60bb      	str	r3, [r7, #8]
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	68bb      	ldr	r3, [r7, #8]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a9b      	lsrs	r3, r3, #10
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08004114 	.word	0x08004114

08001c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c74:	f7ff ffdc 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0b5b      	lsrs	r3, r3, #13
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4903      	ldr	r1, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08004114 	.word	0x08004114

08001c98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <HAL_RCC_GetClockConfig+0x60>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	601a      	str	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e01d      	b.n	8001d4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f815 	bl	8001d52 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f000 f968 	bl	8002010 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b085      	sub	sp, #20
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d122      	bne.n	8001e0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d11b      	bne.n	8001e0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0202 	mvn.w	r2, #2
 8001dda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8ee 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001df6:	e005      	b.n	8001e04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8e0 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8f1 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d122      	bne.n	8001e5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d11b      	bne.n	8001e5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f06f 0204 	mvn.w	r2, #4
 8001e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8c4 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001e4a:	e005      	b.n	8001e58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8b6 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8c7 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d122      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11b      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0208 	mvn.w	r2, #8
 8001e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2204      	movs	r2, #4
 8001e88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f89a 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001e9e:	e005      	b.n	8001eac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f88c 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f89d 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d122      	bne.n	8001f06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d11b      	bne.n	8001f06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0210 	mvn.w	r2, #16
 8001ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2208      	movs	r2, #8
 8001edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f870 	bl	8001fd2 <HAL_TIM_IC_CaptureCallback>
 8001ef2:	e005      	b.n	8001f00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f862 	bl	8001fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f873 	bl	8001fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10e      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f06f 0201 	mvn.w	r2, #1
 8001f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe fe0d 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d10e      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	2b80      	cmp	r3, #128	; 0x80
 8001f4c:	d107      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f903 	bl	8002164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d10e      	bne.n	8001f8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	2b40      	cmp	r3, #64	; 0x40
 8001f78:	d107      	bne.n	8001f8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f838 	bl	8001ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d10e      	bne.n	8001fb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d107      	bne.n	8001fb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f06f 0220 	mvn.w	r2, #32
 8001fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8cd 	bl	8002150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a40      	ldr	r2, [pc, #256]	; (8002124 <TIM_Base_SetConfig+0x114>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d013      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202e:	d00f      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <TIM_Base_SetConfig+0x118>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00b      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3c      	ldr	r2, [pc, #240]	; (800212c <TIM_Base_SetConfig+0x11c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <TIM_Base_SetConfig+0x120>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_Base_SetConfig+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <TIM_Base_SetConfig+0x124>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d108      	bne.n	8002062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2f      	ldr	r2, [pc, #188]	; (8002124 <TIM_Base_SetConfig+0x114>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d02b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d027      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <TIM_Base_SetConfig+0x118>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d023      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a2b      	ldr	r2, [pc, #172]	; (800212c <TIM_Base_SetConfig+0x11c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d01f      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <TIM_Base_SetConfig+0x120>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a29      	ldr	r2, [pc, #164]	; (8002134 <TIM_Base_SetConfig+0x124>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d017      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <TIM_Base_SetConfig+0x128>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a27      	ldr	r2, [pc, #156]	; (800213c <TIM_Base_SetConfig+0x12c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00f      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <TIM_Base_SetConfig+0x130>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00b      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a25      	ldr	r2, [pc, #148]	; (8002144 <TIM_Base_SetConfig+0x134>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <TIM_Base_SetConfig+0x138>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d003      	beq.n	80020c2 <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <TIM_Base_SetConfig+0x13c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d108      	bne.n	80020d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <TIM_Base_SetConfig+0x114>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0xf8>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <TIM_Base_SetConfig+0x124>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d103      	bne.n	8002110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	615a      	str	r2, [r3, #20]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40010000 	.word	0x40010000
 8002128:	40000400 	.word	0x40000400
 800212c:	40000800 	.word	0x40000800
 8002130:	40000c00 	.word	0x40000c00
 8002134:	40010400 	.word	0x40010400
 8002138:	40014000 	.word	0x40014000
 800213c:	40014400 	.word	0x40014400
 8002140:	40014800 	.word	0x40014800
 8002144:	40001800 	.word	0x40001800
 8002148:	40001c00 	.word	0x40001c00
 800214c:	40002000 	.word	0x40002000

08002150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e03f      	b.n	800220a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fd18 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f90b 	bl	80023d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b088      	sub	sp, #32
 8002216:	af02      	add	r7, sp, #8
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	f040 8083 	bne.w	800233a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_UART_Transmit+0x2e>
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e07b      	b.n	800233c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_UART_Transmit+0x40>
 800224e:	2302      	movs	r3, #2
 8002250:	e074      	b.n	800233c <HAL_UART_Transmit+0x12a>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2221      	movs	r2, #33	; 0x21
 8002264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002268:	f7fe fdec 	bl	8000e44 <HAL_GetTick>
 800226c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002282:	e042      	b.n	800230a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002288:	b29b      	uxth	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229a:	d122      	bne.n	80022e2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f84c 	bl	8002344 <UART_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e042      	b.n	800233c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022c8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3302      	adds	r3, #2
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	e017      	b.n	800230a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	e013      	b.n	800230a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f829 	bl	8002344 <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e01f      	b.n	800233c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1b7      	bne.n	8002284 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	2140      	movs	r1, #64	; 0x40
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f810 	bl	8002344 <UART_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e006      	b.n	800233c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002354:	e02c      	b.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d028      	beq.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <UART_WaitOnFlagUntilTimeout+0x30>
 8002364:	f7fe fd6e 	bl	8000e44 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	429a      	cmp	r2, r3
 8002372:	d21d      	bcs.n	80023b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002382:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e00f      	b.n	80023d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	429a      	cmp	r2, r3
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d0c3      	beq.n	8002356 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023dc:	b0bd      	sub	sp, #244	; 0xf4
 80023de:	af00      	add	r7, sp, #0
 80023e0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80023f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	ea40 0301 	orr.w	r3, r0, r1
 8002400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	431a      	orrs	r2, r3
 8002418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8002424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002430:	f021 010c 	bic.w	r1, r1, #12
 8002434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800244e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002452:	6999      	ldr	r1, [r3, #24]
 8002454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	ea40 0301 	orr.w	r3, r0, r1
 800245e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246a:	f040 81a5 	bne.w	80027b8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800246e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4bcd      	ldr	r3, [pc, #820]	; (80027ac <UART_SetConfig+0x3d4>)
 8002476:	429a      	cmp	r2, r3
 8002478:	d006      	beq.n	8002488 <UART_SetConfig+0xb0>
 800247a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4bcb      	ldr	r3, [pc, #812]	; (80027b0 <UART_SetConfig+0x3d8>)
 8002482:	429a      	cmp	r2, r3
 8002484:	f040 80cb 	bne.w	800261e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002488:	f7ff fbf2 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 800248c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002494:	461c      	mov	r4, r3
 8002496:	f04f 0500 	mov.w	r5, #0
 800249a:	4622      	mov	r2, r4
 800249c:	462b      	mov	r3, r5
 800249e:	1891      	adds	r1, r2, r2
 80024a0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80024a4:	415b      	adcs	r3, r3
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024aa:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80024ae:	1912      	adds	r2, r2, r4
 80024b0:	eb45 0303 	adc.w	r3, r5, r3
 80024b4:	f04f 0000 	mov.w	r0, #0
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	00d9      	lsls	r1, r3, #3
 80024be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024c2:	00d0      	lsls	r0, r2, #3
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	1911      	adds	r1, r2, r4
 80024ca:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80024ce:	416b      	adcs	r3, r5
 80024d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80024d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	461a      	mov	r2, r3
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	1891      	adds	r1, r2, r2
 80024e2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80024e6:	415b      	adcs	r3, r3
 80024e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80024f0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80024f4:	f7fd fe6c 	bl	80001d0 <__aeabi_uldivmod>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4bad      	ldr	r3, [pc, #692]	; (80027b4 <UART_SetConfig+0x3dc>)
 80024fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	011e      	lsls	r6, r3, #4
 8002506:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800250a:	461c      	mov	r4, r3
 800250c:	f04f 0500 	mov.w	r5, #0
 8002510:	4622      	mov	r2, r4
 8002512:	462b      	mov	r3, r5
 8002514:	1891      	adds	r1, r2, r2
 8002516:	67b9      	str	r1, [r7, #120]	; 0x78
 8002518:	415b      	adcs	r3, r3
 800251a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800251c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002520:	1912      	adds	r2, r2, r4
 8002522:	eb45 0303 	adc.w	r3, r5, r3
 8002526:	f04f 0000 	mov.w	r0, #0
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	00d9      	lsls	r1, r3, #3
 8002530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002534:	00d0      	lsls	r0, r2, #3
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	1911      	adds	r1, r2, r4
 800253c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002540:	416b      	adcs	r3, r5
 8002542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	461a      	mov	r2, r3
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	1891      	adds	r1, r2, r2
 8002554:	6739      	str	r1, [r7, #112]	; 0x70
 8002556:	415b      	adcs	r3, r3
 8002558:	677b      	str	r3, [r7, #116]	; 0x74
 800255a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800255e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002562:	f7fd fe35 	bl	80001d0 <__aeabi_uldivmod>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4b92      	ldr	r3, [pc, #584]	; (80027b4 <UART_SetConfig+0x3dc>)
 800256c:	fba3 1302 	umull	r1, r3, r3, r2
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	2164      	movs	r1, #100	; 0x64
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3332      	adds	r3, #50	; 0x32
 800257e:	4a8d      	ldr	r2, [pc, #564]	; (80027b4 <UART_SetConfig+0x3dc>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800258c:	441e      	add	r6, r3
 800258e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002592:	4618      	mov	r0, r3
 8002594:	f04f 0100 	mov.w	r1, #0
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	1894      	adds	r4, r2, r2
 800259e:	66bc      	str	r4, [r7, #104]	; 0x68
 80025a0:	415b      	adcs	r3, r3
 80025a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80025a8:	1812      	adds	r2, r2, r0
 80025aa:	eb41 0303 	adc.w	r3, r1, r3
 80025ae:	f04f 0400 	mov.w	r4, #0
 80025b2:	f04f 0500 	mov.w	r5, #0
 80025b6:	00dd      	lsls	r5, r3, #3
 80025b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025bc:	00d4      	lsls	r4, r2, #3
 80025be:	4622      	mov	r2, r4
 80025c0:	462b      	mov	r3, r5
 80025c2:	1814      	adds	r4, r2, r0
 80025c4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80025c8:	414b      	adcs	r3, r1
 80025ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	1891      	adds	r1, r2, r2
 80025dc:	6639      	str	r1, [r7, #96]	; 0x60
 80025de:	415b      	adcs	r3, r3
 80025e0:	667b      	str	r3, [r7, #100]	; 0x64
 80025e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80025e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025ea:	f7fd fdf1 	bl	80001d0 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <UART_SetConfig+0x3dc>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	; 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a6b      	ldr	r2, [pc, #428]	; (80027b4 <UART_SetConfig+0x3dc>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4432      	add	r2, r6
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e26d      	b.n	8002afa <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800261e:	f7ff fb13 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002622:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002626:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800262a:	461c      	mov	r4, r3
 800262c:	f04f 0500 	mov.w	r5, #0
 8002630:	4622      	mov	r2, r4
 8002632:	462b      	mov	r3, r5
 8002634:	1891      	adds	r1, r2, r2
 8002636:	65b9      	str	r1, [r7, #88]	; 0x58
 8002638:	415b      	adcs	r3, r3
 800263a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800263c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002640:	1912      	adds	r2, r2, r4
 8002642:	eb45 0303 	adc.w	r3, r5, r3
 8002646:	f04f 0000 	mov.w	r0, #0
 800264a:	f04f 0100 	mov.w	r1, #0
 800264e:	00d9      	lsls	r1, r3, #3
 8002650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002654:	00d0      	lsls	r0, r2, #3
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	1911      	adds	r1, r2, r4
 800265c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002660:	416b      	adcs	r3, r5
 8002662:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	1891      	adds	r1, r2, r2
 8002674:	6539      	str	r1, [r7, #80]	; 0x50
 8002676:	415b      	adcs	r3, r3
 8002678:	657b      	str	r3, [r7, #84]	; 0x54
 800267a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800267e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002682:	f7fd fda5 	bl	80001d0 <__aeabi_uldivmod>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <UART_SetConfig+0x3dc>)
 800268c:	fba3 2302 	umull	r2, r3, r3, r2
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	011e      	lsls	r6, r3, #4
 8002694:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002698:	461c      	mov	r4, r3
 800269a:	f04f 0500 	mov.w	r5, #0
 800269e:	4622      	mov	r2, r4
 80026a0:	462b      	mov	r3, r5
 80026a2:	1891      	adds	r1, r2, r2
 80026a4:	64b9      	str	r1, [r7, #72]	; 0x48
 80026a6:	415b      	adcs	r3, r3
 80026a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026ae:	1912      	adds	r2, r2, r4
 80026b0:	eb45 0303 	adc.w	r3, r5, r3
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	00d9      	lsls	r1, r3, #3
 80026be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026c2:	00d0      	lsls	r0, r2, #3
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	1911      	adds	r1, r2, r4
 80026ca:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80026ce:	416b      	adcs	r3, r5
 80026d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	461a      	mov	r2, r3
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	1891      	adds	r1, r2, r2
 80026e2:	6439      	str	r1, [r7, #64]	; 0x40
 80026e4:	415b      	adcs	r3, r3
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
 80026e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026ec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80026f0:	f7fd fd6e 	bl	80001d0 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <UART_SetConfig+0x3dc>)
 80026fa:	fba3 1302 	umull	r1, r3, r3, r2
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2164      	movs	r1, #100	; 0x64
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	3332      	adds	r3, #50	; 0x32
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <UART_SetConfig+0x3dc>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800271a:	441e      	add	r6, r3
 800271c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002720:	4618      	mov	r0, r3
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	1894      	adds	r4, r2, r2
 800272c:	63bc      	str	r4, [r7, #56]	; 0x38
 800272e:	415b      	adcs	r3, r3
 8002730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002732:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002736:	1812      	adds	r2, r2, r0
 8002738:	eb41 0303 	adc.w	r3, r1, r3
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	f04f 0500 	mov.w	r5, #0
 8002744:	00dd      	lsls	r5, r3, #3
 8002746:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800274a:	00d4      	lsls	r4, r2, #3
 800274c:	4622      	mov	r2, r4
 800274e:	462b      	mov	r3, r5
 8002750:	1814      	adds	r4, r2, r0
 8002752:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8002756:	414b      	adcs	r3, r1
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800275c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	1891      	adds	r1, r2, r2
 800276a:	6339      	str	r1, [r7, #48]	; 0x30
 800276c:	415b      	adcs	r3, r3
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
 8002770:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002774:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002778:	f7fd fd2a 	bl	80001d0 <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <UART_SetConfig+0x3dc>)
 8002782:	fba3 1302 	umull	r1, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2164      	movs	r1, #100	; 0x64
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	3332      	adds	r3, #50	; 0x32
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <UART_SetConfig+0x3dc>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 0207 	and.w	r2, r3, #7
 80027a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4432      	add	r2, r6
 80027a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80027aa:	e1a6      	b.n	8002afa <UART_SetConfig+0x722>
 80027ac:	40011000 	.word	0x40011000
 80027b0:	40011400 	.word	0x40011400
 80027b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4bd1      	ldr	r3, [pc, #836]	; (8002b04 <UART_SetConfig+0x72c>)
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d006      	beq.n	80027d2 <UART_SetConfig+0x3fa>
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4bcf      	ldr	r3, [pc, #828]	; (8002b08 <UART_SetConfig+0x730>)
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 80ca 	bne.w	8002966 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027d2:	f7ff fa4d 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 80027d6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027de:	461c      	mov	r4, r3
 80027e0:	f04f 0500 	mov.w	r5, #0
 80027e4:	4622      	mov	r2, r4
 80027e6:	462b      	mov	r3, r5
 80027e8:	1891      	adds	r1, r2, r2
 80027ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80027ec:	415b      	adcs	r3, r3
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027f4:	1912      	adds	r2, r2, r4
 80027f6:	eb45 0303 	adc.w	r3, r5, r3
 80027fa:	f04f 0000 	mov.w	r0, #0
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	00d9      	lsls	r1, r3, #3
 8002804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002808:	00d0      	lsls	r0, r2, #3
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	eb12 0a04 	adds.w	sl, r2, r4
 8002812:	eb43 0b05 	adc.w	fp, r3, r5
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4618      	mov	r0, r3
 800281e:	f04f 0100 	mov.w	r1, #0
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	008b      	lsls	r3, r1, #2
 800282c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002830:	0082      	lsls	r2, r0, #2
 8002832:	4650      	mov	r0, sl
 8002834:	4659      	mov	r1, fp
 8002836:	f7fd fccb 	bl	80001d0 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4bb3      	ldr	r3, [pc, #716]	; (8002b0c <UART_SetConfig+0x734>)
 8002840:	fba3 2302 	umull	r2, r3, r3, r2
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	011e      	lsls	r6, r3, #4
 8002848:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800284c:	4618      	mov	r0, r3
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	1894      	adds	r4, r2, r2
 8002858:	623c      	str	r4, [r7, #32]
 800285a:	415b      	adcs	r3, r3
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002862:	1812      	adds	r2, r2, r0
 8002864:	eb41 0303 	adc.w	r3, r1, r3
 8002868:	f04f 0400 	mov.w	r4, #0
 800286c:	f04f 0500 	mov.w	r5, #0
 8002870:	00dd      	lsls	r5, r3, #3
 8002872:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002876:	00d4      	lsls	r4, r2, #3
 8002878:	4622      	mov	r2, r4
 800287a:	462b      	mov	r3, r5
 800287c:	1814      	adds	r4, r2, r0
 800287e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002882:	414b      	adcs	r3, r1
 8002884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	f04f 0100 	mov.w	r1, #0
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	008b      	lsls	r3, r1, #2
 800289e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028a2:	0082      	lsls	r2, r0, #2
 80028a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80028a8:	f7fd fc92 	bl	80001d0 <__aeabi_uldivmod>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4b96      	ldr	r3, [pc, #600]	; (8002b0c <UART_SetConfig+0x734>)
 80028b2:	fba3 1302 	umull	r1, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2164      	movs	r1, #100	; 0x64
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	3332      	adds	r3, #50	; 0x32
 80028c4:	4a91      	ldr	r2, [pc, #580]	; (8002b0c <UART_SetConfig+0x734>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	441e      	add	r6, r3
 80028d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028d6:	4618      	mov	r0, r3
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	1894      	adds	r4, r2, r2
 80028e2:	61bc      	str	r4, [r7, #24]
 80028e4:	415b      	adcs	r3, r3
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ec:	1812      	adds	r2, r2, r0
 80028ee:	eb41 0303 	adc.w	r3, r1, r3
 80028f2:	f04f 0400 	mov.w	r4, #0
 80028f6:	f04f 0500 	mov.w	r5, #0
 80028fa:	00dd      	lsls	r5, r3, #3
 80028fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002900:	00d4      	lsls	r4, r2, #3
 8002902:	4622      	mov	r2, r4
 8002904:	462b      	mov	r3, r5
 8002906:	1814      	adds	r4, r2, r0
 8002908:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800290c:	414b      	adcs	r3, r1
 800290e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	008b      	lsls	r3, r1, #2
 8002928:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800292c:	0082      	lsls	r2, r0, #2
 800292e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002932:	f7fd fc4d 	bl	80001d0 <__aeabi_uldivmod>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <UART_SetConfig+0x734>)
 800293c:	fba3 1302 	umull	r1, r3, r3, r2
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	2164      	movs	r1, #100	; 0x64
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	3332      	adds	r3, #50	; 0x32
 800294e:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <UART_SetConfig+0x734>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	f003 020f 	and.w	r2, r3, #15
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4432      	add	r2, r6
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	e0c9      	b.n	8002afa <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002966:	f7ff f96f 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 800296a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002972:	461c      	mov	r4, r3
 8002974:	f04f 0500 	mov.w	r5, #0
 8002978:	4622      	mov	r2, r4
 800297a:	462b      	mov	r3, r5
 800297c:	1891      	adds	r1, r2, r2
 800297e:	6139      	str	r1, [r7, #16]
 8002980:	415b      	adcs	r3, r3
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002988:	1912      	adds	r2, r2, r4
 800298a:	eb45 0303 	adc.w	r3, r5, r3
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	00d9      	lsls	r1, r3, #3
 8002998:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800299c:	00d0      	lsls	r0, r2, #3
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	eb12 0804 	adds.w	r8, r2, r4
 80029a6:	eb43 0905 	adc.w	r9, r3, r5
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	008b      	lsls	r3, r1, #2
 80029c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029c4:	0082      	lsls	r2, r0, #2
 80029c6:	4640      	mov	r0, r8
 80029c8:	4649      	mov	r1, r9
 80029ca:	f7fd fc01 	bl	80001d0 <__aeabi_uldivmod>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <UART_SetConfig+0x734>)
 80029d4:	fba3 2302 	umull	r2, r3, r3, r2
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	011e      	lsls	r6, r3, #4
 80029dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029e0:	4618      	mov	r0, r3
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	1894      	adds	r4, r2, r2
 80029ec:	60bc      	str	r4, [r7, #8]
 80029ee:	415b      	adcs	r3, r3
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f6:	1812      	adds	r2, r2, r0
 80029f8:	eb41 0303 	adc.w	r3, r1, r3
 80029fc:	f04f 0400 	mov.w	r4, #0
 8002a00:	f04f 0500 	mov.w	r5, #0
 8002a04:	00dd      	lsls	r5, r3, #3
 8002a06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a0a:	00d4      	lsls	r4, r2, #3
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	462b      	mov	r3, r5
 8002a10:	1814      	adds	r4, r2, r0
 8002a12:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002a16:	414b      	adcs	r3, r1
 8002a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f04f 0100 	mov.w	r1, #0
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	008b      	lsls	r3, r1, #2
 8002a32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a36:	0082      	lsls	r2, r0, #2
 8002a38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a3c:	f7fd fbc8 	bl	80001d0 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4b31      	ldr	r3, [pc, #196]	; (8002b0c <UART_SetConfig+0x734>)
 8002a46:	fba3 1302 	umull	r1, r3, r3, r2
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2164      	movs	r1, #100	; 0x64
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	3332      	adds	r3, #50	; 0x32
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <UART_SetConfig+0x734>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a64:	441e      	add	r6, r3
 8002a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	1894      	adds	r4, r2, r2
 8002a76:	603c      	str	r4, [r7, #0]
 8002a78:	415b      	adcs	r3, r3
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a80:	1812      	adds	r2, r2, r0
 8002a82:	eb41 0303 	adc.w	r3, r1, r3
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	f04f 0500 	mov.w	r5, #0
 8002a8e:	00dd      	lsls	r5, r3, #3
 8002a90:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a94:	00d4      	lsls	r4, r2, #3
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	1814      	adds	r4, r2, r0
 8002a9c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002aa0:	414b      	adcs	r3, r1
 8002aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	008b      	lsls	r3, r1, #2
 8002abc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ac0:	0082      	lsls	r2, r0, #2
 8002ac2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002ac6:	f7fd fb83 	bl	80001d0 <__aeabi_uldivmod>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <UART_SetConfig+0x734>)
 8002ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	2164      	movs	r1, #100	; 0x64
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	3332      	adds	r3, #50	; 0x32
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <UART_SetConfig+0x734>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4432      	add	r2, r6
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	e7ff      	b.n	8002afa <UART_SetConfig+0x722>
 8002afa:	bf00      	nop
 8002afc:	37f4      	adds	r7, #244	; 0xf4
 8002afe:	46bd      	mov	sp, r7
 8002b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b04:	40011000 	.word	0x40011000
 8002b08:	40011400 	.word	0x40011400
 8002b0c:	51eb851f 	.word	0x51eb851f

08002b10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b22:	2b84      	cmp	r3, #132	; 0x84
 8002b24:	d005      	beq.n	8002b32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3303      	adds	r3, #3
 8002b30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b32:	68fb      	ldr	r3, [r7, #12]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b44:	f000 fade 	bl	8003104 <vTaskStartScheduler>
  
  return osOK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b50:	b089      	sub	sp, #36	; 0x24
 8002b52:	af04      	add	r7, sp, #16
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <osThreadCreate+0x54>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01c      	beq.n	8002ba2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685c      	ldr	r4, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681d      	ldr	r5, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691e      	ldr	r6, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ffc8 	bl	8002b10 <makeFreeRtosPriority>
 8002b80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8a:	9202      	str	r2, [sp, #8]
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	9100      	str	r1, [sp, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4632      	mov	r2, r6
 8002b94:	4629      	mov	r1, r5
 8002b96:	4620      	mov	r0, r4
 8002b98:	f000 f8ed 	bl	8002d76 <xTaskCreateStatic>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e01c      	b.n	8002bdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685c      	ldr	r4, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bae:	b29e      	uxth	r6, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ffaa 	bl	8002b10 <makeFreeRtosPriority>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	9200      	str	r2, [sp, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	4632      	mov	r2, r6
 8002bca:	4629      	mov	r1, r5
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f000 f92f 	bl	8002e30 <xTaskCreate>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d001      	beq.n	8002bdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <osDelay+0x16>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	e000      	b.n	8002bfe <osDelay+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa4c 	bl	800309c <vTaskDelay>
  
  return osOK;
 8002c04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0208 	add.w	r2, r3, #8
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 0208 	add.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0208 	add.w	r2, r3, #8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	601a      	str	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d103      	bne.n	8002cd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e00c      	b.n	8002cea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e002      	b.n	8002cde <vListInsert+0x2e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d2f6      	bcs.n	8002cd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
 8002d38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6852      	ldr	r2, [r2, #4]
 8002d42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d103      	bne.n	8002d56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	1e5a      	subs	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08e      	sub	sp, #56	; 0x38
 8002d7a:	af04      	add	r7, sp, #16
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <xTaskCreateStatic+0x46>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	61fb      	str	r3, [r7, #28]
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dbc:	2354      	movs	r3, #84	; 0x54
 8002dbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b54      	cmp	r3, #84	; 0x54
 8002dc4:	d00a      	beq.n	8002ddc <xTaskCreateStatic+0x66>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	61bb      	str	r3, [r7, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ddc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01e      	beq.n	8002e22 <xTaskCreateStatic+0xac>
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01b      	beq.n	8002e22 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9303      	str	r3, [sp, #12]
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f850 	bl	8002eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e1c:	f000 f8d4 	bl	8002fc8 <prvAddNewTaskToReadyList>
 8002e20:	e001      	b.n	8002e26 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e26:	697b      	ldr	r3, [r7, #20]
	}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fec7 	bl	8003bd8 <pvPortMalloc>
 8002e4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e52:	2054      	movs	r0, #84	; 0x54
 8002e54:	f000 fec0 	bl	8003bd8 <pvPortMalloc>
 8002e58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	e005      	b.n	8002e74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f000 ff79 	bl	8003d60 <vPortFree>
 8002e6e:	e001      	b.n	8002e74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e82:	88fa      	ldrh	r2, [r7, #6]
 8002e84:	2300      	movs	r3, #0
 8002e86:	9303      	str	r3, [sp, #12]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	9302      	str	r3, [sp, #8]
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f80e 	bl	8002eba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e9e:	69f8      	ldr	r0, [r7, #28]
 8002ea0:	f000 f892 	bl	8002fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e002      	b.n	8002eb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b088      	sub	sp, #32
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f023 0307 	bic.w	r3, r3, #7
 8002ee0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	617b      	str	r3, [r7, #20]
}
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01f      	beq.n	8002f48 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	e012      	b.n	8002f34 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	7819      	ldrb	r1, [r3, #0]
 8002f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3334      	adds	r3, #52	; 0x34
 8002f1e:	460a      	mov	r2, r1
 8002f20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d006      	beq.n	8002f3c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	d9e9      	bls.n	8002f0e <prvInitialiseNewTask+0x54>
 8002f3a:	e000      	b.n	8002f3e <prvInitialiseNewTask+0x84>
			{
				break;
 8002f3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f46:	e003      	b.n	8002f50 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d901      	bls.n	8002f5a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f56:	2306      	movs	r3, #6
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	2200      	movs	r2, #0
 8002f6a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe6c 	bl	8002c4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	3318      	adds	r3, #24
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe67 	bl	8002c4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	f1c3 0207 	rsb	r2, r3, #7
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	69b8      	ldr	r0, [r7, #24]
 8002faa:	f000 fc05 	bl	80037b8 <pxPortInitialiseStack>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fd0:	f000 fd20 	bl	8003a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <prvAddNewTaskToReadyList+0xb8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	4a29      	ldr	r2, [pc, #164]	; (8003080 <prvAddNewTaskToReadyList+0xb8>)
 8002fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fde:	4b29      	ldr	r3, [pc, #164]	; (8003084 <prvAddNewTaskToReadyList+0xbc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fe6:	4a27      	ldr	r2, [pc, #156]	; (8003084 <prvAddNewTaskToReadyList+0xbc>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <prvAddNewTaskToReadyList+0xb8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d110      	bne.n	8003016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ff4:	f000 fabc 	bl	8003570 <prvInitialiseTaskLists>
 8002ff8:	e00d      	b.n	8003016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <prvAddNewTaskToReadyList+0xc0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003002:	4b20      	ldr	r3, [pc, #128]	; (8003084 <prvAddNewTaskToReadyList+0xbc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	429a      	cmp	r2, r3
 800300e:	d802      	bhi.n	8003016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <prvAddNewTaskToReadyList+0xbc>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003016:	4b1d      	ldr	r3, [pc, #116]	; (800308c <prvAddNewTaskToReadyList+0xc4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <prvAddNewTaskToReadyList+0xc4>)
 800301e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	2201      	movs	r2, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <prvAddNewTaskToReadyList+0xc8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <prvAddNewTaskToReadyList+0xc8>)
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <prvAddNewTaskToReadyList+0xcc>)
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f7ff fe0d 	bl	8002c68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800304e:	f000 fd11 	bl	8003a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <prvAddNewTaskToReadyList+0xc0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00e      	beq.n	8003078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <prvAddNewTaskToReadyList+0xbc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <prvAddNewTaskToReadyList+0xd0>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000380 	.word	0x20000380
 8003084:	20000280 	.word	0x20000280
 8003088:	2000038c 	.word	0x2000038c
 800308c:	2000039c 	.word	0x2000039c
 8003090:	20000388 	.word	0x20000388
 8003094:	20000284 	.word	0x20000284
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d017      	beq.n	80030de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <vTaskDelay+0x60>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <vTaskDelay+0x30>
	__asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	60bb      	str	r3, [r7, #8]
}
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030cc:	f000 f87a 	bl	80031c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030d0:	2100      	movs	r1, #0
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fb0a 	bl	80036ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030d8:	f000 f882 	bl	80031e0 <xTaskResumeAll>
 80030dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <vTaskDelay+0x64>)
 80030e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200003a8 	.word	0x200003a8
 8003100:	e000ed04 	.word	0xe000ed04

08003104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003112:	463a      	mov	r2, r7
 8003114:	1d39      	adds	r1, r7, #4
 8003116:	f107 0308 	add.w	r3, r7, #8
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd f9d4 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	9202      	str	r2, [sp, #8]
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2300      	movs	r3, #0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	2300      	movs	r3, #0
 8003130:	460a      	mov	r2, r1
 8003132:	491e      	ldr	r1, [pc, #120]	; (80031ac <vTaskStartScheduler+0xa8>)
 8003134:	481e      	ldr	r0, [pc, #120]	; (80031b0 <vTaskStartScheduler+0xac>)
 8003136:	f7ff fe1e 	bl	8002d76 <xTaskCreateStatic>
 800313a:	4603      	mov	r3, r0
 800313c:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <vTaskStartScheduler+0xb0>)
 800313e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <vTaskStartScheduler+0xb0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003148:	2301      	movs	r3, #1
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e001      	b.n	8003152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d116      	bne.n	8003186 <vTaskStartScheduler+0x82>
	__asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	613b      	str	r3, [r7, #16]
}
 800316a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <vTaskStartScheduler+0xb4>)
 800316e:	f04f 32ff 	mov.w	r2, #4294967295
 8003172:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <vTaskStartScheduler+0xb8>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <vTaskStartScheduler+0xbc>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003180:	f000 fba6 	bl	80038d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003184:	e00e      	b.n	80031a4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d10a      	bne.n	80031a4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	60fb      	str	r3, [r7, #12]
}
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <vTaskStartScheduler+0x9e>
}
 80031a4:	bf00      	nop
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	080040fc 	.word	0x080040fc
 80031b0:	08003541 	.word	0x08003541
 80031b4:	200003a4 	.word	0x200003a4
 80031b8:	200003a0 	.word	0x200003a0
 80031bc:	2000038c 	.word	0x2000038c
 80031c0:	20000384 	.word	0x20000384

080031c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <vTaskSuspendAll+0x18>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a03      	ldr	r2, [pc, #12]	; (80031dc <vTaskSuspendAll+0x18>)
 80031d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	200003a8 	.word	0x200003a8

080031e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <xTaskResumeAll+0x114>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <xTaskResumeAll+0x2c>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	603b      	str	r3, [r7, #0]
}
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800320c:	f000 fc02 	bl	8003a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003210:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <xTaskResumeAll+0x114>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3b01      	subs	r3, #1
 8003216:	4a37      	ldr	r2, [pc, #220]	; (80032f4 <xTaskResumeAll+0x114>)
 8003218:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <xTaskResumeAll+0x114>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d161      	bne.n	80032e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003222:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <xTaskResumeAll+0x118>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d05d      	beq.n	80032e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800322a:	e02e      	b.n	800328a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322c:	4b33      	ldr	r3, [pc, #204]	; (80032fc <xTaskResumeAll+0x11c>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3318      	adds	r3, #24
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fd72 	bl	8002d22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fd6d 	bl	8002d22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2201      	movs	r2, #1
 800324e:	409a      	lsls	r2, r3
 8003250:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <xTaskResumeAll+0x120>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	4a2a      	ldr	r2, [pc, #168]	; (8003300 <xTaskResumeAll+0x120>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4a27      	ldr	r2, [pc, #156]	; (8003304 <xTaskResumeAll+0x124>)
 8003268:	441a      	add	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7ff fcf9 	bl	8002c68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327a:	4b23      	ldr	r3, [pc, #140]	; (8003308 <xTaskResumeAll+0x128>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <xTaskResumeAll+0x12c>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <xTaskResumeAll+0x11c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1cc      	bne.n	800322c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003298:	f000 fa08 	bl	80036ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <xTaskResumeAll+0x130>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032a8:	f000 f836 	bl	8003318 <xTaskIncrementTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <xTaskResumeAll+0x12c>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f1      	bne.n	80032a8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <xTaskResumeAll+0x130>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <xTaskResumeAll+0x12c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <xTaskResumeAll+0x134>)
 80032d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032e6:	f000 fbc5 	bl	8003a74 <vPortExitCritical>

	return xAlreadyYielded;
 80032ea:	68bb      	ldr	r3, [r7, #8]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200003a8 	.word	0x200003a8
 80032f8:	20000380 	.word	0x20000380
 80032fc:	20000340 	.word	0x20000340
 8003300:	20000388 	.word	0x20000388
 8003304:	20000284 	.word	0x20000284
 8003308:	20000280 	.word	0x20000280
 800330c:	20000394 	.word	0x20000394
 8003310:	20000390 	.word	0x20000390
 8003314:	e000ed04 	.word	0xe000ed04

08003318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003322:	4b4e      	ldr	r3, [pc, #312]	; (800345c <xTaskIncrementTick+0x144>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 8088 	bne.w	800343c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800332c:	4b4c      	ldr	r3, [pc, #304]	; (8003460 <xTaskIncrementTick+0x148>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003334:	4a4a      	ldr	r2, [pc, #296]	; (8003460 <xTaskIncrementTick+0x148>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d120      	bne.n	8003382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003340:	4b48      	ldr	r3, [pc, #288]	; (8003464 <xTaskIncrementTick+0x14c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <xTaskIncrementTick+0x48>
	__asm volatile
 800334a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334e:	f383 8811 	msr	BASEPRI, r3
 8003352:	f3bf 8f6f 	isb	sy
 8003356:	f3bf 8f4f 	dsb	sy
 800335a:	603b      	str	r3, [r7, #0]
}
 800335c:	bf00      	nop
 800335e:	e7fe      	b.n	800335e <xTaskIncrementTick+0x46>
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <xTaskIncrementTick+0x14c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b40      	ldr	r3, [pc, #256]	; (8003468 <xTaskIncrementTick+0x150>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <xTaskIncrementTick+0x14c>)
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4a3e      	ldr	r2, [pc, #248]	; (8003468 <xTaskIncrementTick+0x150>)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b3d      	ldr	r3, [pc, #244]	; (800346c <xTaskIncrementTick+0x154>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a3c      	ldr	r2, [pc, #240]	; (800346c <xTaskIncrementTick+0x154>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	f000 f995 	bl	80036ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003382:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <xTaskIncrementTick+0x158>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	d348      	bcc.n	800341e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <xTaskIncrementTick+0x14c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003396:	4b36      	ldr	r3, [pc, #216]	; (8003470 <xTaskIncrementTick+0x158>)
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	601a      	str	r2, [r3, #0]
					break;
 800339e:	e03e      	b.n	800341e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033a0:	4b30      	ldr	r3, [pc, #192]	; (8003464 <xTaskIncrementTick+0x14c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d203      	bcs.n	80033c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033b8:	4a2d      	ldr	r2, [pc, #180]	; (8003470 <xTaskIncrementTick+0x158>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033be:	e02e      	b.n	800341e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fcac 	bl	8002d22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3318      	adds	r3, #24
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fca3 	bl	8002d22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <xTaskIncrementTick+0x15c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <xTaskIncrementTick+0x15c>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <xTaskIncrementTick+0x160>)
 80033fc:	441a      	add	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7ff fc2f 	bl	8002c68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	4b1b      	ldr	r3, [pc, #108]	; (800347c <xTaskIncrementTick+0x164>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	429a      	cmp	r2, r3
 8003416:	d3b9      	bcc.n	800338c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003418:	2301      	movs	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800341c:	e7b6      	b.n	800338c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <xTaskIncrementTick+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4914      	ldr	r1, [pc, #80]	; (8003478 <xTaskIncrementTick+0x160>)
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d907      	bls.n	8003446 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003436:	2301      	movs	r3, #1
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e004      	b.n	8003446 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <xTaskIncrementTick+0x168>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <xTaskIncrementTick+0x168>)
 8003444:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003446:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <xTaskIncrementTick+0x16c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800344e:	2301      	movs	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003452:	697b      	ldr	r3, [r7, #20]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200003a8 	.word	0x200003a8
 8003460:	20000384 	.word	0x20000384
 8003464:	20000338 	.word	0x20000338
 8003468:	2000033c 	.word	0x2000033c
 800346c:	20000398 	.word	0x20000398
 8003470:	200003a0 	.word	0x200003a0
 8003474:	20000388 	.word	0x20000388
 8003478:	20000284 	.word	0x20000284
 800347c:	20000280 	.word	0x20000280
 8003480:	20000390 	.word	0x20000390
 8003484:	20000394 	.word	0x20000394

08003488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <vTaskSwitchContext+0xa4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <vTaskSwitchContext+0xa8>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800349c:	e03f      	b.n	800351e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <vTaskSwitchContext+0xa8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <vTaskSwitchContext+0xac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	f1c3 031f 	rsb	r3, r3, #31
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	491f      	ldr	r1, [pc, #124]	; (8003538 <vTaskSwitchContext+0xb0>)
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	607b      	str	r3, [r7, #4]
}
 80034e0:	bf00      	nop
 80034e2:	e7fe      	b.n	80034e2 <vTaskSwitchContext+0x5a>
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <vTaskSwitchContext+0xb0>)
 80034f0:	4413      	add	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	3308      	adds	r3, #8
 8003506:	429a      	cmp	r2, r3
 8003508:	d104      	bne.n	8003514 <vTaskSwitchContext+0x8c>
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a08      	ldr	r2, [pc, #32]	; (800353c <vTaskSwitchContext+0xb4>)
 800351c:	6013      	str	r3, [r2, #0]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200003a8 	.word	0x200003a8
 8003530:	20000394 	.word	0x20000394
 8003534:	20000388 	.word	0x20000388
 8003538:	20000284 	.word	0x20000284
 800353c:	20000280 	.word	0x20000280

08003540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003548:	f000 f852 	bl	80035f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <prvIdleTask+0x28>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d9f9      	bls.n	8003548 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <prvIdleTask+0x2c>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003564:	e7f0      	b.n	8003548 <prvIdleTask+0x8>
 8003566:	bf00      	nop
 8003568:	20000284 	.word	0x20000284
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	e00c      	b.n	8003596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <prvInitialiseTaskLists+0x60>)
 8003588:	4413      	add	r3, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fb3f 	bl	8002c0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3301      	adds	r3, #1
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b06      	cmp	r3, #6
 800359a:	d9ef      	bls.n	800357c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800359c:	480d      	ldr	r0, [pc, #52]	; (80035d4 <prvInitialiseTaskLists+0x64>)
 800359e:	f7ff fb36 	bl	8002c0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035a2:	480d      	ldr	r0, [pc, #52]	; (80035d8 <prvInitialiseTaskLists+0x68>)
 80035a4:	f7ff fb33 	bl	8002c0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035a8:	480c      	ldr	r0, [pc, #48]	; (80035dc <prvInitialiseTaskLists+0x6c>)
 80035aa:	f7ff fb30 	bl	8002c0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035ae:	480c      	ldr	r0, [pc, #48]	; (80035e0 <prvInitialiseTaskLists+0x70>)
 80035b0:	f7ff fb2d 	bl	8002c0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035b4:	480b      	ldr	r0, [pc, #44]	; (80035e4 <prvInitialiseTaskLists+0x74>)
 80035b6:	f7ff fb2a 	bl	8002c0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <prvInitialiseTaskLists+0x78>)
 80035bc:	4a05      	ldr	r2, [pc, #20]	; (80035d4 <prvInitialiseTaskLists+0x64>)
 80035be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <prvInitialiseTaskLists+0x7c>)
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <prvInitialiseTaskLists+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000284 	.word	0x20000284
 80035d4:	20000310 	.word	0x20000310
 80035d8:	20000324 	.word	0x20000324
 80035dc:	20000340 	.word	0x20000340
 80035e0:	20000354 	.word	0x20000354
 80035e4:	2000036c 	.word	0x2000036c
 80035e8:	20000338 	.word	0x20000338
 80035ec:	2000033c 	.word	0x2000033c

080035f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035f6:	e019      	b.n	800362c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80035f8:	f000 fa0c 	bl	8003a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <prvCheckTasksWaitingTermination+0x50>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fb8a 	bl	8002d22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <prvCheckTasksWaitingTermination+0x54>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3b01      	subs	r3, #1
 8003614:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <prvCheckTasksWaitingTermination+0x54>)
 8003616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <prvCheckTasksWaitingTermination+0x58>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3b01      	subs	r3, #1
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <prvCheckTasksWaitingTermination+0x58>)
 8003620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003622:	f000 fa27 	bl	8003a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f810 	bl	800364c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <prvCheckTasksWaitingTermination+0x58>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e1      	bne.n	80035f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000354 	.word	0x20000354
 8003644:	20000380 	.word	0x20000380
 8003648:	20000368 	.word	0x20000368

0800364c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fb7c 	bl	8003d60 <vPortFree>
				vPortFree( pxTCB );
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fb79 	bl	8003d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800366e:	e018      	b.n	80036a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003676:	2b01      	cmp	r3, #1
 8003678:	d103      	bne.n	8003682 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fb70 	bl	8003d60 <vPortFree>
	}
 8003680:	e00f      	b.n	80036a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003688:	2b02      	cmp	r3, #2
 800368a:	d00a      	beq.n	80036a2 <prvDeleteTCB+0x56>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	60fb      	str	r3, [r7, #12]
}
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <prvDeleteTCB+0x54>
	}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <prvResetNextTaskUnblockTime+0x38>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <prvResetNextTaskUnblockTime+0x3c>)
 80036be:	f04f 32ff 	mov.w	r2, #4294967295
 80036c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036c4:	e008      	b.n	80036d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <prvResetNextTaskUnblockTime+0x38>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <prvResetNextTaskUnblockTime+0x3c>)
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	20000338 	.word	0x20000338
 80036e8:	200003a0 	.word	0x200003a0

080036ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <prvAddCurrentTaskToDelayedList+0xb0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036fc:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3304      	adds	r3, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fb0d 	bl	8002d22 <uxListRemove>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2201      	movs	r2, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4013      	ands	r3, r2
 8003722:	4a20      	ldr	r2, [pc, #128]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003724:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d10a      	bne.n	8003744 <prvAddCurrentTaskToDelayedList+0x58>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3304      	adds	r3, #4
 800373a:	4619      	mov	r1, r3
 800373c:	481a      	ldr	r0, [pc, #104]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800373e:	f7ff fa93 	bl	8002c68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003742:	e026      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d209      	bcs.n	8003770 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7ff faa1 	bl	8002cb0 <vListInsert>
}
 800376e:	e010      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7ff fa97 	bl	8002cb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	d202      	bcs.n	8003792 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6013      	str	r3, [r2, #0]
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000384 	.word	0x20000384
 80037a0:	20000280 	.word	0x20000280
 80037a4:	20000388 	.word	0x20000388
 80037a8:	2000036c 	.word	0x2000036c
 80037ac:	2000033c 	.word	0x2000033c
 80037b0:	20000338 	.word	0x20000338
 80037b4:	200003a0 	.word	0x200003a0

080037b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	3b04      	subs	r3, #4
 80037c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3b04      	subs	r3, #4
 80037d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f023 0201 	bic.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b04      	subs	r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037e8:	4a0c      	ldr	r2, [pc, #48]	; (800381c <pxPortInitialiseStack+0x64>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3b14      	subs	r3, #20
 80037f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b04      	subs	r3, #4
 80037fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f06f 0202 	mvn.w	r2, #2
 8003806:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3b20      	subs	r3, #32
 800380c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	08003821 	.word	0x08003821

08003820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <prvTaskExitError+0x54>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d00a      	beq.n	800384a <prvTaskExitError+0x2a>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	60fb      	str	r3, [r7, #12]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <prvTaskExitError+0x28>
	__asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	60bb      	str	r3, [r7, #8]
}
 800385c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800385e:	bf00      	nop
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0fc      	beq.n	8003860 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	2000000c 	.word	0x2000000c
	...

08003880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <pxCurrentTCBConst2>)
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	6808      	ldr	r0, [r1, #0]
 8003886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388a:	f380 8809 	msr	PSP, r0
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f04f 0000 	mov.w	r0, #0
 8003896:	f380 8811 	msr	BASEPRI, r0
 800389a:	4770      	bx	lr
 800389c:	f3af 8000 	nop.w

080038a0 <pxCurrentTCBConst2>:
 80038a0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop

080038a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80038a8:	4808      	ldr	r0, [pc, #32]	; (80038cc <prvPortStartFirstTask+0x24>)
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	6800      	ldr	r0, [r0, #0]
 80038ae:	f380 8808 	msr	MSP, r0
 80038b2:	f04f 0000 	mov.w	r0, #0
 80038b6:	f380 8814 	msr	CONTROL, r0
 80038ba:	b662      	cpsie	i
 80038bc:	b661      	cpsie	f
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	df00      	svc	0
 80038c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038ca:	bf00      	nop
 80038cc:	e000ed08 	.word	0xe000ed08

080038d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80038d6:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <xPortStartScheduler+0x120>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a46      	ldr	r2, [pc, #280]	; (80039f4 <xPortStartScheduler+0x124>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10a      	bne.n	80038f6 <xPortStartScheduler+0x26>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	613b      	str	r3, [r7, #16]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <xPortStartScheduler+0x120>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a3f      	ldr	r2, [pc, #252]	; (80039f8 <xPortStartScheduler+0x128>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d10a      	bne.n	8003916 <xPortStartScheduler+0x46>
	__asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60fb      	str	r3, [r7, #12]
}
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <xPortStartScheduler+0x12c>)
 8003918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <xPortStartScheduler+0x130>)
 800393c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800393e:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <xPortStartScheduler+0x134>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003944:	e009      	b.n	800395a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <xPortStartScheduler+0x134>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3b01      	subs	r3, #1
 800394c:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <xPortStartScheduler+0x134>)
 800394e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d0ef      	beq.n	8003946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003966:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <xPortStartScheduler+0x134>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f1c3 0307 	rsb	r3, r3, #7
 800396e:	2b04      	cmp	r3, #4
 8003970:	d00a      	beq.n	8003988 <xPortStartScheduler+0xb8>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	60bb      	str	r3, [r7, #8]
}
 8003984:	bf00      	nop
 8003986:	e7fe      	b.n	8003986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003988:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <xPortStartScheduler+0x134>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <xPortStartScheduler+0x134>)
 8003990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003992:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <xPortStartScheduler+0x134>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800399a:	4a1a      	ldr	r2, [pc, #104]	; (8003a04 <xPortStartScheduler+0x134>)
 800399c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <xPortStartScheduler+0x138>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <xPortStartScheduler+0x138>)
 80039ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <xPortStartScheduler+0x138>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <xPortStartScheduler+0x138>)
 80039b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039be:	f000 f8dd 	bl	8003b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <xPortStartScheduler+0x13c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80039c8:	f000 f8fc 	bl	8003bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <xPortStartScheduler+0x140>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <xPortStartScheduler+0x140>)
 80039d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80039d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039d8:	f7ff ff66 	bl	80038a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039dc:	f7ff fd54 	bl	8003488 <vTaskSwitchContext>
	prvTaskExitError();
 80039e0:	f7ff ff1e 	bl	8003820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000ed00 	.word	0xe000ed00
 80039f4:	410fc271 	.word	0x410fc271
 80039f8:	410fc270 	.word	0x410fc270
 80039fc:	e000e400 	.word	0xe000e400
 8003a00:	200003ac 	.word	0x200003ac
 8003a04:	200003b0 	.word	0x200003b0
 8003a08:	e000ed20 	.word	0xe000ed20
 8003a0c:	2000000c 	.word	0x2000000c
 8003a10:	e000ef34 	.word	0xe000ef34

08003a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
	__asm volatile
 8003a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	607b      	str	r3, [r7, #4]
}
 8003a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <vPortEnterCritical+0x58>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3301      	adds	r3, #1
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <vPortEnterCritical+0x58>)
 8003a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <vPortEnterCritical+0x58>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10f      	bne.n	8003a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <vPortEnterCritical+0x5c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	603b      	str	r3, [r7, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <vPortEnterCritical+0x4a>
	}
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	2000000c 	.word	0x2000000c
 8003a70:	e000ed04 	.word	0xe000ed04

08003a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <vPortExitCritical+0x50>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <vPortExitCritical+0x24>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	607b      	str	r3, [r7, #4]
}
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <vPortExitCritical+0x50>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <vPortExitCritical+0x50>)
 8003aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <vPortExitCritical+0x50>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <vPortExitCritical+0x42>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	2000000c 	.word	0x2000000c
	...

08003ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ad0:	f3ef 8009 	mrs	r0, PSP
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	4b15      	ldr	r3, [pc, #84]	; (8003b30 <pxCurrentTCBConst>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f01e 0f10 	tst.w	lr, #16
 8003ae0:	bf08      	it	eq
 8003ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aea:	6010      	str	r0, [r2, #0]
 8003aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003af4:	f380 8811 	msr	BASEPRI, r0
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f7ff fcc2 	bl	8003488 <vTaskSwitchContext>
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f380 8811 	msr	BASEPRI, r0
 8003b0c:	bc09      	pop	{r0, r3}
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	6808      	ldr	r0, [r1, #0]
 8003b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b16:	f01e 0f10 	tst.w	lr, #16
 8003b1a:	bf08      	it	eq
 8003b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b20:	f380 8809 	msr	PSP, r0
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	f3af 8000 	nop.w

08003b30 <pxCurrentTCBConst>:
 8003b30:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop

08003b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	607b      	str	r3, [r7, #4]
}
 8003b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b52:	f7ff fbe1 	bl	8003318 <xTaskIncrementTick>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <SysTick_Handler+0x40>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	2300      	movs	r3, #0
 8003b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f383 8811 	msr	BASEPRI, r3
}
 8003b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <vPortSetupTimerInterrupt+0x34>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <vPortSetupTimerInterrupt+0x38>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <vPortSetupTimerInterrupt+0x3c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <vPortSetupTimerInterrupt+0x40>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <vPortSetupTimerInterrupt+0x44>)
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <vPortSetupTimerInterrupt+0x34>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010
 8003bb4:	e000e018 	.word	0xe000e018
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	10624dd3 	.word	0x10624dd3
 8003bc0:	e000e014 	.word	0xe000e014

08003bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003bd4 <vPortEnableVFP+0x10>
 8003bc8:	6801      	ldr	r1, [r0, #0]
 8003bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bce:	6001      	str	r1, [r0, #0]
 8003bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003bd2:	bf00      	nop
 8003bd4:	e000ed88 	.word	0xe000ed88

08003bd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003be4:	f7ff faee 	bl	80031c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003be8:	4b58      	ldr	r3, [pc, #352]	; (8003d4c <pvPortMalloc+0x174>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003bf0:	f000 f910 	bl	8003e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <pvPortMalloc+0x178>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f040 808e 	bne.w	8003d1e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01d      	beq.n	8003c44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c08:	2208      	movs	r2, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d014      	beq.n	8003c44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f023 0307 	bic.w	r3, r3, #7
 8003c20:	3308      	adds	r3, #8
 8003c22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <pvPortMalloc+0x6c>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	617b      	str	r3, [r7, #20]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d069      	beq.n	8003d1e <pvPortMalloc+0x146>
 8003c4a:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <pvPortMalloc+0x17c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d864      	bhi.n	8003d1e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c54:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <pvPortMalloc+0x180>)
 8003c56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c58:	4b3f      	ldr	r3, [pc, #252]	; (8003d58 <pvPortMalloc+0x180>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c5e:	e004      	b.n	8003c6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d903      	bls.n	8003c7c <pvPortMalloc+0xa4>
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f1      	bne.n	8003c60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c7c:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <pvPortMalloc+0x174>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d04b      	beq.n	8003d1e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	4413      	add	r3, r2
 8003c8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d91f      	bls.n	8003ce8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <pvPortMalloc+0xf8>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	613b      	str	r3, [r7, #16]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ce2:	69b8      	ldr	r0, [r7, #24]
 8003ce4:	f000 f8f8 	bl	8003ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <pvPortMalloc+0x17c>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <pvPortMalloc+0x17c>)
 8003cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <pvPortMalloc+0x17c>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <pvPortMalloc+0x184>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d203      	bcs.n	8003d0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <pvPortMalloc+0x17c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <pvPortMalloc+0x184>)
 8003d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <pvPortMalloc+0x178>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d1e:	f7ff fa5f 	bl	80031e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <pvPortMalloc+0x16a>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60fb      	str	r3, [r7, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <pvPortMalloc+0x168>
	return pvReturn;
 8003d42:	69fb      	ldr	r3, [r7, #28]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3728      	adds	r7, #40	; 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20003fbc 	.word	0x20003fbc
 8003d50:	20003fc8 	.word	0x20003fc8
 8003d54:	20003fc0 	.word	0x20003fc0
 8003d58:	20003fb4 	.word	0x20003fb4
 8003d5c:	20003fc4 	.word	0x20003fc4

08003d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d048      	beq.n	8003e04 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d72:	2308      	movs	r3, #8
 8003d74:	425b      	negs	r3, r3
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4413      	add	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <vPortFree+0xac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <vPortFree+0x44>
	__asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60fb      	str	r3, [r7, #12]
}
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <vPortFree+0x62>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60bb      	str	r3, [r7, #8]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <vPortFree+0xac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d019      	beq.n	8003e04 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d115      	bne.n	8003e04 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <vPortFree+0xac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003de8:	f7ff f9ec 	bl	80031c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <vPortFree+0xb0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	4a06      	ldr	r2, [pc, #24]	; (8003e10 <vPortFree+0xb0>)
 8003df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003dfa:	6938      	ldr	r0, [r7, #16]
 8003dfc:	f000 f86c 	bl	8003ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e00:	f7ff f9ee 	bl	80031e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e04:	bf00      	nop
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20003fc8 	.word	0x20003fc8
 8003e10:	20003fc0 	.word	0x20003fc0

08003e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <prvHeapInit+0xac>)
 8003e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00c      	beq.n	8003e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3307      	adds	r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	4a1f      	ldr	r2, [pc, #124]	; (8003ec0 <prvHeapInit+0xac>)
 8003e44:	4413      	add	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ec4 <prvHeapInit+0xb0>)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e52:	4b1c      	ldr	r3, [pc, #112]	; (8003ec4 <prvHeapInit+0xb0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e60:	2208      	movs	r2, #8
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0307 	bic.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <prvHeapInit+0xb4>)
 8003e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <prvHeapInit+0xb4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <prvHeapInit+0xb4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	1ad2      	subs	r2, r2, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <prvHeapInit+0xb4>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <prvHeapInit+0xb8>)
 8003ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <prvHeapInit+0xbc>)
 8003eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <prvHeapInit+0xc0>)
 8003eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	200003b4 	.word	0x200003b4
 8003ec4:	20003fb4 	.word	0x20003fb4
 8003ec8:	20003fbc 	.word	0x20003fbc
 8003ecc:	20003fc4 	.word	0x20003fc4
 8003ed0:	20003fc0 	.word	0x20003fc0
 8003ed4:	20003fc8 	.word	0x20003fc8

08003ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ee0:	4b28      	ldr	r3, [pc, #160]	; (8003f84 <prvInsertBlockIntoFreeList+0xac>)
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e002      	b.n	8003eec <prvInsertBlockIntoFreeList+0x14>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d8f7      	bhi.n	8003ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4413      	add	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d108      	bne.n	8003f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	441a      	add	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	441a      	add	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d118      	bne.n	8003f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <prvInsertBlockIntoFreeList+0xb0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d00d      	beq.n	8003f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e008      	b.n	8003f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <prvInsertBlockIntoFreeList+0xb0>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e003      	b.n	8003f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d002      	beq.n	8003f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20003fb4 	.word	0x20003fb4
 8003f88:	20003fbc 	.word	0x20003fbc

08003f8c <__libc_init_array>:
 8003f8c:	b570      	push	{r4, r5, r6, lr}
 8003f8e:	4d0d      	ldr	r5, [pc, #52]	; (8003fc4 <__libc_init_array+0x38>)
 8003f90:	4c0d      	ldr	r4, [pc, #52]	; (8003fc8 <__libc_init_array+0x3c>)
 8003f92:	1b64      	subs	r4, r4, r5
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	2600      	movs	r6, #0
 8003f98:	42a6      	cmp	r6, r4
 8003f9a:	d109      	bne.n	8003fb0 <__libc_init_array+0x24>
 8003f9c:	4d0b      	ldr	r5, [pc, #44]	; (8003fcc <__libc_init_array+0x40>)
 8003f9e:	4c0c      	ldr	r4, [pc, #48]	; (8003fd0 <__libc_init_array+0x44>)
 8003fa0:	f000 f820 	bl	8003fe4 <_init>
 8003fa4:	1b64      	subs	r4, r4, r5
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	2600      	movs	r6, #0
 8003faa:	42a6      	cmp	r6, r4
 8003fac:	d105      	bne.n	8003fba <__libc_init_array+0x2e>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb4:	4798      	blx	r3
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	e7ee      	b.n	8003f98 <__libc_init_array+0xc>
 8003fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fbe:	4798      	blx	r3
 8003fc0:	3601      	adds	r6, #1
 8003fc2:	e7f2      	b.n	8003faa <__libc_init_array+0x1e>
 8003fc4:	08004124 	.word	0x08004124
 8003fc8:	08004124 	.word	0x08004124
 8003fcc:	08004124 	.word	0x08004124
 8003fd0:	08004128 	.word	0x08004128

08003fd4 <memset>:
 8003fd4:	4402      	add	r2, r0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d100      	bne.n	8003fde <memset+0xa>
 8003fdc:	4770      	bx	lr
 8003fde:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe2:	e7f9      	b.n	8003fd8 <memset+0x4>

08003fe4 <_init>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr

08003ff0 <_fini>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr
