
FreeRTOS_CountingSemaphore_Tutorial4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dec  08005dec  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df4  08005df4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004070  2000001c  08005e18  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000408c  08005e18  0002408c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001539a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bde  00000000  00000000  000353e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00037fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00038ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022647  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013005  00000000  00000000  0005c567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d26df  00000000  00000000  0006f56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141c4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004400  00000000  00000000  00141ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b98 	.word	0x08005b98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005b98 	.word	0x08005b98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000038 	.word	0x20000038
 8000508:	2000008c 	.word	0x2000008c

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fe51 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f86f 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f901 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051e:	f000 f8d5 	bl	80006cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	4923      	ldr	r1, [pc, #140]	; (80005b4 <main+0xa8>)
 8000526:	4824      	ldr	r0, [pc, #144]	; (80005b8 <main+0xac>)
 8000528:	f002 f9e5 	bl	80028f6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

CountingSemaphore = xSemaphoreCreateCounting(3,0);
 800052c:	2100      	movs	r1, #0
 800052e:	2003      	movs	r0, #3
 8000530:	f003 fa3f 	bl	80039b2 <xQueueCreateCountingSemaphore>
 8000534:	4603      	mov	r3, r0
 8000536:	4a21      	ldr	r2, [pc, #132]	; (80005bc <main+0xb0>)
 8000538:	6013      	str	r3, [r2, #0]
if(CountingSemaphore == NULL) HAL_UART_Transmit(&huart2, (uint8_t*)"Unable to create semaphore\n\n", 28, 100);
 800053a:	4b20      	ldr	r3, [pc, #128]	; (80005bc <main+0xb0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d106      	bne.n	8000550 <main+0x44>
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	221c      	movs	r2, #28
 8000546:	491e      	ldr	r1, [pc, #120]	; (80005c0 <main+0xb4>)
 8000548:	481b      	ldr	r0, [pc, #108]	; (80005b8 <main+0xac>)
 800054a:	f002 f942 	bl	80027d2 <HAL_UART_Transmit>
 800054e:	e005      	b.n	800055c <main+0x50>
else HAL_UART_Transmit(&huart2, (uint8_t*)"Counting Semaphore created successfully\n\n", 41, 100);
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	2229      	movs	r2, #41	; 0x29
 8000554:	491b      	ldr	r1, [pc, #108]	; (80005c4 <main+0xb8>)
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0xac>)
 8000558:	f002 f93b 	bl	80027d2 <HAL_UART_Transmit>


// create TASKS
xTaskCreate(HPT_TASK, "HPT", 128, NULL, 3, &HPThandler);
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <main+0xbc>)
 800055e:	9301      	str	r3, [sp, #4]
 8000560:	2303      	movs	r3, #3
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	4918      	ldr	r1, [pc, #96]	; (80005cc <main+0xc0>)
 800056a:	4819      	ldr	r0, [pc, #100]	; (80005d0 <main+0xc4>)
 800056c:	f003 fe4b 	bl	8004206 <xTaskCreate>

xTaskCreate(MPT_TASK, "MPT", 128, NULL, 2, &MPThandler);
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <main+0xc8>)
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	2302      	movs	r3, #2
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2300      	movs	r3, #0
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	4916      	ldr	r1, [pc, #88]	; (80005d8 <main+0xcc>)
 800057e:	4817      	ldr	r0, [pc, #92]	; (80005dc <main+0xd0>)
 8000580:	f003 fe41 	bl	8004206 <xTaskCreate>

xTaskCreate(LPT_TASK, "LPT", 128, NULL, 1, &LPThandler);
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xd4>)
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2301      	movs	r3, #1
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	4914      	ldr	r1, [pc, #80]	; (80005e4 <main+0xd8>)
 8000592:	4815      	ldr	r0, [pc, #84]	; (80005e8 <main+0xdc>)
 8000594:	f003 fe37 	bl	8004206 <xTaskCreate>

xTaskCreate(VLPT_TASK, "VLPT", 128, NULL, 0, &VLPThandler);
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <main+0xe0>)
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2300      	movs	r3, #0
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	4912      	ldr	r1, [pc, #72]	; (80005f0 <main+0xe4>)
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <main+0xe8>)
 80005a8:	f003 fe2d 	bl	8004206 <xTaskCreate>

vTaskStartScheduler();
 80005ac:	f003 fff2 	bl	8004594 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0xa4>
 80005b2:	bf00      	nop
 80005b4:	20000290 	.word	0x20000290
 80005b8:	20003ff8 	.word	0x20003ff8
 80005bc:	20003ff4 	.word	0x20003ff4
 80005c0:	08005bb0 	.word	0x08005bb0
 80005c4:	08005bd0 	.word	0x08005bd0
 80005c8:	20003fe8 	.word	0x20003fe8
 80005cc:	08005bfc 	.word	0x08005bfc
 80005d0:	080009dd 	.word	0x080009dd
 80005d4:	20003fec 	.word	0x20003fec
 80005d8:	08005c00 	.word	0x08005c00
 80005dc:	08000b35 	.word	0x08000b35
 80005e0:	2000403c 	.word	0x2000403c
 80005e4:	08005c04 	.word	0x08005c04
 80005e8:	08000c61 	.word	0x08000c61
 80005ec:	20003ff0 	.word	0x20003ff0
 80005f0:	08005c08 	.word	0x08005c08
 80005f4:	08000d8d 	.word	0x08000d8d

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fa6c 	bl	8005ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f907 	bl	8001890 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 fc54 	bl	8000f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fb68 	bl	8001d80 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 fc3d 	bl	8000f34 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f002 f818 	bl	8002738 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 fc11 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20003ff8 	.word	0x20003ff8
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	4ba2      	ldr	r3, [pc, #648]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4aa1      	ldr	r2, [pc, #644]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b9f      	ldr	r3, [pc, #636]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	61bb      	str	r3, [r7, #24]
 8000750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	4b9b      	ldr	r3, [pc, #620]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a9a      	ldr	r2, [pc, #616]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b98      	ldr	r3, [pc, #608]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b94      	ldr	r3, [pc, #592]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a93      	ldr	r2, [pc, #588]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b91      	ldr	r3, [pc, #580]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b8d      	ldr	r3, [pc, #564]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a8c      	ldr	r2, [pc, #560]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b8a      	ldr	r3, [pc, #552]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b86      	ldr	r3, [pc, #536]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a85      	ldr	r2, [pc, #532]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b83      	ldr	r3, [pc, #524]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b7f      	ldr	r3, [pc, #508]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a7e      	ldr	r2, [pc, #504]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b7c      	ldr	r3, [pc, #496]	; (80009c4 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	4879      	ldr	r0, [pc, #484]	; (80009c8 <MX_GPIO_Init+0x2a8>)
 80007e4:	f001 f83a 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	4877      	ldr	r0, [pc, #476]	; (80009cc <MX_GPIO_Init+0x2ac>)
 80007ee:	f001 f835 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f2:	2200      	movs	r2, #0
 80007f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f8:	4875      	ldr	r0, [pc, #468]	; (80009d0 <MX_GPIO_Init+0x2b0>)
 80007fa:	f001 f82f 	bl	800185c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	486c      	ldr	r0, [pc, #432]	; (80009c8 <MX_GPIO_Init+0x2a8>)
 8000816:	f000 fe85 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081a:	2301      	movs	r3, #1
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4866      	ldr	r0, [pc, #408]	; (80009cc <MX_GPIO_Init+0x2ac>)
 8000832:	f000 fe77 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000846:	2305      	movs	r3, #5
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	485e      	ldr	r0, [pc, #376]	; (80009cc <MX_GPIO_Init+0x2ac>)
 8000852:	f000 fe67 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	485a      	ldr	r0, [pc, #360]	; (80009d4 <MX_GPIO_Init+0x2b4>)
 800086c:	f000 fe5a 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000870:	2310      	movs	r3, #16
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000880:	2306      	movs	r3, #6
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4852      	ldr	r0, [pc, #328]	; (80009d4 <MX_GPIO_Init+0x2b4>)
 800088c:	f000 fe4a 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000890:	23e0      	movs	r3, #224	; 0xe0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a0:	2305      	movs	r3, #5
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	484a      	ldr	r0, [pc, #296]	; (80009d4 <MX_GPIO_Init+0x2b4>)
 80008ac:	f000 fe3a 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b0:	2304      	movs	r3, #4
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4845      	ldr	r0, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x2b8>)
 80008c4:	f000 fe2e 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	2305      	movs	r3, #5
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	483c      	ldr	r0, [pc, #240]	; (80009d8 <MX_GPIO_Init+0x2b8>)
 80008e6:	f000 fe1d 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ea:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4833      	ldr	r0, [pc, #204]	; (80009d0 <MX_GPIO_Init+0x2b0>)
 8000904:	f000 fe0e 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000908:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091a:	2306      	movs	r3, #6
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4829      	ldr	r0, [pc, #164]	; (80009cc <MX_GPIO_Init+0x2ac>)
 8000926:	f000 fdfd 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4825      	ldr	r0, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x2b4>)
 8000940:	f000 fdf0 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000944:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000956:	230a      	movs	r3, #10
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	481c      	ldr	r0, [pc, #112]	; (80009d4 <MX_GPIO_Init+0x2b4>)
 8000962:	f000 fddf 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000966:	2320      	movs	r3, #32
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4815      	ldr	r0, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x2b0>)
 800097a:	f000 fdd3 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800097e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000984:	2312      	movs	r3, #18
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000990:	2304      	movs	r3, #4
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <MX_GPIO_Init+0x2b8>)
 800099c:	f000 fdc2 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x2a8>)
 80009b6:	f000 fdb5 	bl	8001524 <HAL_GPIO_Init>

}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	; 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400

080009dc <HPT_TASK>:

/* USER CODE BEGIN 4 */

/******************************** High Priority Task *****************************/
void HPT_TASK(void *pvParameters)
{
 80009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009de:	b0ab      	sub	sp, #172	; 0xac
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	char sresource[3];

	//giving 3 semaphores at the beginning
	xSemaphoreGive(CountingSemaphore);
 80009e4:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <HPT_TASK+0x13c>)
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	f003 f813 	bl	8003a18 <xQueueGenericSend>
	xSemaphoreGive(CountingSemaphore);
 80009f2:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <HPT_TASK+0x13c>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	f003 f80c 	bl	8003a18 <xQueueGenericSend>
	xSemaphoreGive(CountingSemaphore);
 8000a00:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <HPT_TASK+0x13c>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f003 f805 	bl	8003a18 <xQueueGenericSend>


	while(1)
	{
		char str[150];
		strcpy(str, "Entered HPT Task\n About to acquire the semaphore\n\n");
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4a42      	ldr	r2, [pc, #264]	; (8000b1c <HPT_TASK+0x140>)
 8000a14:	461c      	mov	r4, r3
 8000a16:	4615      	mov	r5, r2
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	8022      	strh	r2, [r4, #0]
 8000a2a:	3402      	adds	r4, #2
 8000a2c:	0c1b      	lsrs	r3, r3, #16
 8000a2e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fbcb 	bl	80001d0 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	f107 010c 	add.w	r1, r7, #12
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	4836      	ldr	r0, [pc, #216]	; (8000b20 <HPT_TASK+0x144>)
 8000a48:	f001 fec3 	bl	80027d2 <HAL_UART_Transmit>


		xSemaphoreTake(CountingSemaphore, portMAX_DELAY);
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HPT_TASK+0x13c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 f96b 	bl	8003d30 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource, 10); // 10 stands for decimal, 16 stands for hexa, 2 stands for binary
 8000a5a:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <HPT_TASK+0x148>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <HPT_TASK+0x14c>)
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000a68:	220a      	movs	r2, #10
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f005 f82a 	bl	8005ac4 <itoa>
		strcpy(str, "Leaving HPT Task\n Accessed data is:: ");
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <HPT_TASK+0x150>)
 8000a76:	461c      	mov	r4, r3
 8000a78:	4615      	mov	r5, r2
 8000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a86:	6020      	str	r0, [r4, #0]
 8000a88:	3404      	adds	r4, #4
 8000a8a:	8021      	strh	r1, [r4, #0]
		strcat(str,sresource);
 8000a8c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 f82c 	bl	8005af4 <strcat>
		strcat(str,"\n Not releasing the semaphore \n\n\n");
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb95 	bl	80001d0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HPT_TASK+0x154>)
 8000ab2:	4614      	mov	r4, r2
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	f104 0e20 	add.w	lr, r4, #32
 8000aba:	4665      	mov	r5, ip
 8000abc:	4626      	mov	r6, r4
 8000abe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ac0:	6028      	str	r0, [r5, #0]
 8000ac2:	6069      	str	r1, [r5, #4]
 8000ac4:	60aa      	str	r2, [r5, #8]
 8000ac6:	60eb      	str	r3, [r5, #12]
 8000ac8:	3410      	adds	r4, #16
 8000aca:	f10c 0c10 	add.w	ip, ip, #16
 8000ace:	4574      	cmp	r4, lr
 8000ad0:	d1f3      	bne.n	8000aba <HPT_TASK+0xde>
 8000ad2:	4662      	mov	r2, ip
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fb76 	bl	80001d0 <strlen>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	f107 010c 	add.w	r1, r7, #12
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	480b      	ldr	r0, [pc, #44]	; (8000b20 <HPT_TASK+0x144>)
 8000af2:	f001 fe6e 	bl	80027d2 <HAL_UART_Transmit>

		indx++;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HPT_TASK+0x148>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HPT_TASK+0x148>)
 8000afe:	6013      	str	r3, [r2, #0]

		if(indx > 2) indx = 0;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HPT_TASK+0x148>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dd02      	ble.n	8000b0e <HPT_TASK+0x132>
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HPT_TASK+0x148>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]

		//vTaskDelay(3000);
		vTaskDelete(NULL);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f003 fcb0 	bl	8004474 <vTaskDelete>
	{
 8000b14:	e77b      	b.n	8000a0e <HPT_TASK+0x32>
 8000b16:	bf00      	nop
 8000b18:	20003ff4 	.word	0x20003ff4
 8000b1c:	08005c10 	.word	0x08005c10
 8000b20:	20003ff8 	.word	0x20003ff8
 8000b24:	2000028c 	.word	0x2000028c
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	08005c44 	.word	0x08005c44
 8000b30:	08005c6c 	.word	0x08005c6c

08000b34 <MPT_TASK>:
	}
}

/******************************** Medium Priority Task *****************************/
void MPT_TASK(void *pvParameters)
{
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	b0ab      	sub	sp, #172	; 0xac
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]


	while(1)
	{
		char str[150];
		strcpy(str, "Entered MPT Task\n About to acquire the semaphore\n\n");
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4a40      	ldr	r2, [pc, #256]	; (8000c44 <MPT_TASK+0x110>)
 8000b42:	461c      	mov	r4, r3
 8000b44:	4615      	mov	r5, r2
 8000b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	682b      	ldr	r3, [r5, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	8022      	strh	r2, [r4, #0]
 8000b58:	3402      	adds	r4, #2
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fb34 	bl	80001d0 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f107 010c 	add.w	r1, r7, #12
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	4834      	ldr	r0, [pc, #208]	; (8000c48 <MPT_TASK+0x114>)
 8000b76:	f001 fe2c 	bl	80027d2 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSemaphore, portMAX_DELAY);
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MPT_TASK+0x118>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f8d4 	bl	8003d30 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource, 10); // 10 stands for decimal, 16 stands for hexa, 2 stands for binary
 8000b88:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <MPT_TASK+0x11c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a31      	ldr	r2, [pc, #196]	; (8000c54 <MPT_TASK+0x120>)
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000b96:	220a      	movs	r2, #10
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 ff93 	bl	8005ac4 <itoa>
		strcpy(str, "Leaving MPT Task\n Accessed data is:: ");
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <MPT_TASK+0x124>)
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bb4:	6020      	str	r0, [r4, #0]
 8000bb6:	3404      	adds	r4, #4
 8000bb8:	8021      	strh	r1, [r4, #0]
		strcat(str,sresource);
 8000bba:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 ff95 	bl	8005af4 <strcat>
		strcat(str,"\n Not releasing the semaphore \n\n\n");
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fafe 	bl	80001d0 <strlen>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <MPT_TASK+0x128>)
 8000be0:	4614      	mov	r4, r2
 8000be2:	469c      	mov	ip, r3
 8000be4:	f104 0e20 	add.w	lr, r4, #32
 8000be8:	4665      	mov	r5, ip
 8000bea:	4626      	mov	r6, r4
 8000bec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bee:	6028      	str	r0, [r5, #0]
 8000bf0:	6069      	str	r1, [r5, #4]
 8000bf2:	60aa      	str	r2, [r5, #8]
 8000bf4:	60eb      	str	r3, [r5, #12]
 8000bf6:	3410      	adds	r4, #16
 8000bf8:	f10c 0c10 	add.w	ip, ip, #16
 8000bfc:	4574      	cmp	r4, lr
 8000bfe:	d1f3      	bne.n	8000be8 <MPT_TASK+0xb4>
 8000c00:	4662      	mov	r2, ip
 8000c02:	4623      	mov	r3, r4
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fadf 	bl	80001d0 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f107 010c 	add.w	r1, r7, #12
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <MPT_TASK+0x114>)
 8000c20:	f001 fdd7 	bl	80027d2 <HAL_UART_Transmit>

		indx++;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MPT_TASK+0x11c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <MPT_TASK+0x11c>)
 8000c2c:	6013      	str	r3, [r2, #0]

		if(indx > 2) indx = 0;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MPT_TASK+0x11c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	dd02      	ble.n	8000c3c <MPT_TASK+0x108>
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MPT_TASK+0x11c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]

		//vTaskDelay(2000);
		vTaskDelete(NULL);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f003 fc19 	bl	8004474 <vTaskDelete>
	{
 8000c42:	e77b      	b.n	8000b3c <MPT_TASK+0x8>
 8000c44:	08005c90 	.word	0x08005c90
 8000c48:	20003ff8 	.word	0x20003ff8
 8000c4c:	20003ff4 	.word	0x20003ff4
 8000c50:	2000028c 	.word	0x2000028c
 8000c54:	20000000 	.word	0x20000000
 8000c58:	08005cc4 	.word	0x08005cc4
 8000c5c:	08005c6c 	.word	0x08005c6c

08000c60 <LPT_TASK>:
	}
}

/******************************** Low Priority Task *****************************/
void LPT_TASK(void *pvParameters)
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	b0ab      	sub	sp, #172	; 0xac
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]


	while(1)
	{
		char str[150];
		strcpy(str, "Entered LPT Task\n About to acquire the semaphore\n\n");
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	4a40      	ldr	r2, [pc, #256]	; (8000d70 <LPT_TASK+0x110>)
 8000c6e:	461c      	mov	r4, r3
 8000c70:	4615      	mov	r5, r2
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	8022      	strh	r2, [r4, #0]
 8000c84:	3402      	adds	r4, #2
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa9e 	bl	80001d0 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	f107 010c 	add.w	r1, r7, #12
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	4834      	ldr	r0, [pc, #208]	; (8000d74 <LPT_TASK+0x114>)
 8000ca2:	f001 fd96 	bl	80027d2 <HAL_UART_Transmit>

 		xSemaphoreTake(CountingSemaphore, portMAX_DELAY);
 8000ca6:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <LPT_TASK+0x118>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f04f 31ff 	mov.w	r1, #4294967295
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 f83e 	bl	8003d30 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource, 10); // 10 stands for decimal, 16 stands for hexa, 2 stands for binary
 8000cb4:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <LPT_TASK+0x11c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <LPT_TASK+0x120>)
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000cc2:	220a      	movs	r2, #10
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 fefd 	bl	8005ac4 <itoa>
		strcpy(str, "Leaving LPT Task\n Accessed data is:: ");
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4a2d      	ldr	r2, [pc, #180]	; (8000d84 <LPT_TASK+0x124>)
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	4615      	mov	r5, r2
 8000cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ce0:	6020      	str	r0, [r4, #0]
 8000ce2:	3404      	adds	r4, #4
 8000ce4:	8021      	strh	r1, [r4, #0]
		strcat(str,sresource);
 8000ce6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 feff 	bl	8005af4 <strcat>
		strcat(str,"\n Not releasing the semaphore \n\n\n");
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fa68 	bl	80001d0 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a1f      	ldr	r2, [pc, #124]	; (8000d88 <LPT_TASK+0x128>)
 8000d0c:	4614      	mov	r4, r2
 8000d0e:	469c      	mov	ip, r3
 8000d10:	f104 0e20 	add.w	lr, r4, #32
 8000d14:	4665      	mov	r5, ip
 8000d16:	4626      	mov	r6, r4
 8000d18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d1a:	6028      	str	r0, [r5, #0]
 8000d1c:	6069      	str	r1, [r5, #4]
 8000d1e:	60aa      	str	r2, [r5, #8]
 8000d20:	60eb      	str	r3, [r5, #12]
 8000d22:	3410      	adds	r4, #16
 8000d24:	f10c 0c10 	add.w	ip, ip, #16
 8000d28:	4574      	cmp	r4, lr
 8000d2a:	d1f3      	bne.n	8000d14 <LPT_TASK+0xb4>
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	4623      	mov	r3, r4
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fa49 	bl	80001d0 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f107 010c 	add.w	r1, r7, #12
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	480a      	ldr	r0, [pc, #40]	; (8000d74 <LPT_TASK+0x114>)
 8000d4c:	f001 fd41 	bl	80027d2 <HAL_UART_Transmit>

		indx++;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <LPT_TASK+0x11c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <LPT_TASK+0x11c>)
 8000d58:	6013      	str	r3, [r2, #0]

		if(indx > 2) indx = 0;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <LPT_TASK+0x11c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	dd02      	ble.n	8000d68 <LPT_TASK+0x108>
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <LPT_TASK+0x11c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]

		//vTaskDelay(1000);
		vTaskDelete(NULL);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f003 fb83 	bl	8004474 <vTaskDelete>
	{
 8000d6e:	e77b      	b.n	8000c68 <LPT_TASK+0x8>
 8000d70:	08005cec 	.word	0x08005cec
 8000d74:	20003ff8 	.word	0x20003ff8
 8000d78:	20003ff4 	.word	0x20003ff4
 8000d7c:	2000028c 	.word	0x2000028c
 8000d80:	20000000 	.word	0x20000000
 8000d84:	08005d20 	.word	0x08005d20
 8000d88:	08005c6c 	.word	0x08005c6c

08000d8c <VLPT_TASK>:
	}
}

/******************************** Very Low Priority Task *****************************/
void VLPT_TASK(void *pvParameters)
{
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b0ab      	sub	sp, #172	; 0xac
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]


	while(1)
	{
		char str[150];
		strcpy(str, "Entered VLPT Task\n About to acquire the semaphore\n\n");
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <VLPT_TASK+0x110>)
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	4615      	mov	r5, r2
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	682b      	ldr	r3, [r5, #0]
 8000dac:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fa0c 	bl	80001d0 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	4836      	ldr	r0, [pc, #216]	; (8000ea0 <VLPT_TASK+0x114>)
 8000dc6:	f001 fd04 	bl	80027d2 <HAL_UART_Transmit>

		xSemaphoreTake(CountingSemaphore, portMAX_DELAY);
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <VLPT_TASK+0x118>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f002 ffac 	bl	8003d30 <xQueueSemaphoreTake>

		itoa(resource[indx],sresource, 10); // 10 stands for decimal, 16 stands for hexadecimal, 2 stands for binary
 8000dd8:	4b33      	ldr	r3, [pc, #204]	; (8000ea8 <VLPT_TASK+0x11c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a33      	ldr	r2, [pc, #204]	; (8000eac <VLPT_TASK+0x120>)
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8000de6:	220a      	movs	r2, #10
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 fe6b 	bl	8005ac4 <itoa>
		strcpy(str, "Leaving VLPT Task\n Accessed data is:: ");
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <VLPT_TASK+0x124>)
 8000df4:	461c      	mov	r4, r3
 8000df6:	4615      	mov	r5, r2
 8000df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e04:	6020      	str	r0, [r4, #0]
 8000e06:	3404      	adds	r4, #4
 8000e08:	8021      	strh	r1, [r4, #0]
 8000e0a:	3402      	adds	r4, #2
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	7023      	strb	r3, [r4, #0]
		strcat(str,sresource);
 8000e10:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 fe6a 	bl	8005af4 <strcat>
		strcat(str,"\n Not releasing the semaphore \n\n\n");
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f9d3 	bl	80001d0 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4413      	add	r3, r2
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <VLPT_TASK+0x128>)
 8000e36:	4614      	mov	r4, r2
 8000e38:	469c      	mov	ip, r3
 8000e3a:	f104 0e20 	add.w	lr, r4, #32
 8000e3e:	4665      	mov	r5, ip
 8000e40:	4626      	mov	r6, r4
 8000e42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e44:	6028      	str	r0, [r5, #0]
 8000e46:	6069      	str	r1, [r5, #4]
 8000e48:	60aa      	str	r2, [r5, #8]
 8000e4a:	60eb      	str	r3, [r5, #12]
 8000e4c:	3410      	adds	r4, #16
 8000e4e:	f10c 0c10 	add.w	ip, ip, #16
 8000e52:	4574      	cmp	r4, lr
 8000e54:	d1f3      	bne.n	8000e3e <VLPT_TASK+0xb2>
 8000e56:	4662      	mov	r2, ip
 8000e58:	4623      	mov	r3, r4
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff f9b4 	bl	80001d0 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f107 010c 	add.w	r1, r7, #12
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	480a      	ldr	r0, [pc, #40]	; (8000ea0 <VLPT_TASK+0x114>)
 8000e76:	f001 fcac 	bl	80027d2 <HAL_UART_Transmit>

		indx++;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <VLPT_TASK+0x11c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <VLPT_TASK+0x11c>)
 8000e82:	6013      	str	r3, [r2, #0]

		if(indx > 2) indx = 0;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <VLPT_TASK+0x11c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	dd02      	ble.n	8000e92 <VLPT_TASK+0x106>
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <VLPT_TASK+0x11c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

		//vTaskDelay(500);
		vTaskDelete(NULL);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f003 faee 	bl	8004474 <vTaskDelete>
	{
 8000e98:	e77c      	b.n	8000d94 <VLPT_TASK+0x8>
 8000e9a:	bf00      	nop
 8000e9c:	08005d48 	.word	0x08005d48
 8000ea0:	20003ff8 	.word	0x20003ff8
 8000ea4:	20003ff4 	.word	0x20003ff4
 8000ea8:	2000028c 	.word	0x2000028c
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	08005d7c 	.word	0x08005d7c
 8000eb4:	08005c6c 	.word	0x08005c6c

08000eb8 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, &rx_data,1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4910      	ldr	r1, [pc, #64]	; (8000f04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f001 fd16 	bl	80028f6 <HAL_UART_Receive_IT>
	if(rx_data == 'r')
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b72      	cmp	r3, #114	; 0x72
 8000ed0:	d114      	bne.n	8000efc <HAL_UART_RxCpltCallback+0x44>
	{
		//release the semaphore here
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(CountingSemaphore,&xHigherPriorityTaskWoken); // ISR safe version
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_UART_RxCpltCallback+0x50>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fe97 	bl	8003c14 <xQueueGiveFromISR>

		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d007      	beq.n	8000efc <HAL_UART_RxCpltCallback+0x44>
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <HAL_UART_RxCpltCallback+0x54>)
 8000eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	f3bf 8f4f 	dsb	sy
 8000ef8:	f3bf 8f6f 	isb	sy

	}
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000290 	.word	0x20000290
 8000f08:	20003ff4 	.word	0x20003ff4
 8000f0c:	e000ed04 	.word	0xe000ed04

08000f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d101      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f22:	f000 f96b 	bl	80011fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <Error_Handler+0x8>
	...

08000f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_MspInit+0x54>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_MspInit+0x54>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_MspInit+0x54>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_MspInit+0x54>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_MspInit+0x54>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_MspInit+0x54>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	210f      	movs	r1, #15
 8000f82:	f06f 0001 	mvn.w	r0, #1
 8000f86:	f000 fa11 	bl	80013ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	; (800102c <HAL_UART_MspInit+0x94>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d133      	bne.n	8001022 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_UART_MspInit+0x98>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ff2:	230c      	movs	r3, #12
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001002:	2307      	movs	r3, #7
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <HAL_UART_MspInit+0x9c>)
 800100e:	f000 fa89 	bl	8001524 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2105      	movs	r1, #5
 8001016:	2026      	movs	r0, #38	; 0x26
 8001018:	f000 f9c8 	bl	80013ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800101c:	2026      	movs	r0, #38	; 0x26
 800101e:	f000 f9e1 	bl	80013e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40004400 	.word	0x40004400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2036      	movs	r0, #54	; 0x36
 800104e:	f000 f9ad 	bl	80013ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001052:	2036      	movs	r0, #54	; 0x36
 8001054:	f000 f9c6 	bl	80013e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_InitTick+0xa4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_InitTick+0xa4>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_InitTick+0xa4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001074:	f107 0210 	add.w	r2, r7, #16
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 f87a 	bl	8002178 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001084:	f001 f850 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8001088:	4603      	mov	r3, r0
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <HAL_InitTick+0xa8>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	0c9b      	lsrs	r3, r3, #18
 8001098:	3b01      	subs	r3, #1
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_InitTick+0xac>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <HAL_InitTick+0xb0>)
 80010a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_InitTick+0xac>)
 80010a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_InitTick+0xac>)
 80010ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_InitTick+0xac>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_InitTick+0xac>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <HAL_InitTick+0xac>)
 80010be:	f001 f88d 	bl	80021dc <HAL_TIM_Base_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c8:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_InitTick+0xac>)
 80010ca:	f001 f8e1 	bl	8002290 <HAL_TIM_Base_Start_IT>
 80010ce:	4603      	mov	r3, r0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3730      	adds	r7, #48	; 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	20004040 	.word	0x20004040
 80010e8:	40001000 	.word	0x40001000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART2_IRQHandler+0x10>)
 800111e:	f001 fc1b 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20003ff8 	.word	0x20003ff8

0800112c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM6_DAC_IRQHandler+0x10>)
 8001132:	f001 f91d 	bl	8002370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20004040 	.word	0x20004040

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800116a:	490e      	ldr	r1, [pc, #56]	; (80011a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800116c:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001180:	4c0b      	ldr	r4, [pc, #44]	; (80011b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800118e:	f7ff ffd7 	bl	8001140 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001192:	f004 fc5b 	bl	8005a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff f9b9 	bl	800050c <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800119c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80011a8:	08005dfc 	.word	0x08005dfc
  ldr r2, =_sbss
 80011ac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80011b0:	2000408c 	.word	0x2000408c

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f8d8 	bl	8001396 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff ff26 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fea8 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000014 	.word	0x20000014
 8001220:	20004088 	.word	0x20004088

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20004088 	.word	0x20004088

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff4c 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013be:	f7ff ff61 	bl	8001284 <__NVIC_GetPriorityGrouping>
 80013c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	6978      	ldr	r0, [r7, #20]
 80013ca:	f7ff ffb1 	bl	8001330 <NVIC_EncodePriority>
 80013ce:	4602      	mov	r2, r0
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d4:	4611      	mov	r1, r2
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff80 	bl	80012dc <__NVIC_SetPriority>
}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff54 	bl	80012a0 <__NVIC_EnableIRQ>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800140e:	f7ff ff09 	bl	8001224 <HAL_GetTick>
 8001412:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d008      	beq.n	8001432 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e052      	b.n	80014d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0216 	bic.w	r2, r2, #22
 8001440:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001450:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <HAL_DMA_Abort+0x62>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0208 	bic.w	r2, r2, #8
 8001470:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001482:	e013      	b.n	80014ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001484:	f7ff fece 	bl	8001224 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b05      	cmp	r3, #5
 8001490:	d90c      	bls.n	80014ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2220      	movs	r2, #32
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e015      	b.n	80014d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1e4      	bne.n	8001484 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014be:	223f      	movs	r2, #63	; 0x3f
 80014c0:	409a      	lsls	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d004      	beq.n	80014fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00c      	b.n	8001518 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2205      	movs	r2, #5
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e16b      	b.n	8001818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 815a 	bne.w	8001812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80b4 	beq.w	8001812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b60      	ldr	r3, [pc, #384]	; (8001830 <HAL_GPIO_Init+0x30c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a5f      	ldr	r2, [pc, #380]	; (8001830 <HAL_GPIO_Init+0x30c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_GPIO_Init+0x30c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c6:	4a5b      	ldr	r2, [pc, #364]	; (8001834 <HAL_GPIO_Init+0x310>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x314>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x226>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a51      	ldr	r2, [pc, #324]	; (800183c <HAL_GPIO_Init+0x318>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d025      	beq.n	8001746 <HAL_GPIO_Init+0x222>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_GPIO_Init+0x31c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01f      	beq.n	8001742 <HAL_GPIO_Init+0x21e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x320>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x21a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <HAL_GPIO_Init+0x324>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x216>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x328>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x212>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x32c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x20e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x330>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x20a>
 800172a:	2307      	movs	r3, #7
 800172c:	e00e      	b.n	800174c <HAL_GPIO_Init+0x228>
 800172e:	2308      	movs	r3, #8
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001732:	2306      	movs	r3, #6
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x228>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x228>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x228>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x310>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_GPIO_Init+0x334>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_GPIO_Init+0x334>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_GPIO_Init+0x334>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_GPIO_Init+0x334>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae90 	bls.w	8001540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e264      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d075      	beq.n	800199a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ae:	4ba3      	ldr	r3, [pc, #652]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d00c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d112      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c6:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d2:	d10b      	bne.n	80018ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d05b      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d157      	bne.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e23f      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f4:	d106      	bne.n	8001904 <HAL_RCC_OscConfig+0x74>
 80018f6:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a87      	ldr	r2, [pc, #540]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xb0>
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a83      	ldr	r2, [pc, #524]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b81      	ldr	r3, [pc, #516]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a80      	ldr	r2, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fc6c 	bl	8001224 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fc68 	bl	8001224 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e204      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xc0>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc58 	bl	8001224 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc54 	bl	8001224 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1f0      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d063      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a6:	4b65      	ldr	r3, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019be:	4b5f      	ldr	r3, [pc, #380]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b5c      	ldr	r3, [pc, #368]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1c4      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4952      	ldr	r1, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e03a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fc0d 	bl	8001224 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fc09 	bl	8001224 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1a5      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2c:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4940      	ldr	r1, [pc, #256]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e015      	b.n	8001a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <HAL_RCC_OscConfig+0x2b0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fbec 	bl	8001224 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff fbe8 	bl	8001224 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e184      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d030      	beq.n	8001adc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d016      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7ff fbcc 	bl	8001224 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a90:	f7ff fbc8 	bl	8001224 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e164      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x200>
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCC_OscConfig+0x2b4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fbb5 	bl	8001224 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001abe:	f7ff fbb1 	bl	8001224 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e14d      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a0 	beq.w	8001c2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d121      	bne.n	8001b6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_RCC_OscConfig+0x2b8>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fb77 	bl	8001224 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e011      	b.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
 8001b48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7ff fb6a 	bl	8001224 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e106      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b85      	ldr	r3, [pc, #532]	; (8001d74 <HAL_RCC_OscConfig+0x4e4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
 8001b72:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b76:	4a80      	ldr	r2, [pc, #512]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7e:	e01c      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b7b      	ldr	r3, [pc, #492]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x32a>
 8001ba2:	4b75      	ldr	r3, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	4a74      	ldr	r2, [pc, #464]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6713      	str	r3, [r2, #112]	; 0x70
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fb2f 	bl	8001224 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fb2b 	bl	8001224 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0c5      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ee      	beq.n	8001bca <HAL_RCC_OscConfig+0x33a>
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb19 	bl	8001224 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff fb15 	bl	8001224 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0af      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 809b 	beq.w	8001d6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d05c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d141      	bne.n	8001ccc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x4ec>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fae9 	bl	8001224 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff fae5 	bl	8001224 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e081      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69da      	ldr	r2, [r3, #28]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	431a      	orrs	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	061b      	lsls	r3, r3, #24
 8001c98:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x4ec>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fabe 	bl	8001224 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff faba 	bl	8001224 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e056      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x41c>
 8001cca:	e04e      	b.n	8001d6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x4ec>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff faa7 	bl	8001224 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff faa3 	bl	8001224 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e03f      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x44a>
 8001cf8:	e037      	b.n	8001d6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e032      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_RCC_OscConfig+0x4e8>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d028      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d121      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d11a      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d111      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	085b      	lsrs	r3, r3, #1
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40007000 	.word	0x40007000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	42470060 	.word	0x42470060

08001d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0cc      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d90c      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0b8      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd4:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	494d      	ldr	r1, [pc, #308]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d044      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d119      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e07f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d003      	beq.n	8001e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e06f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e067      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4934      	ldr	r1, [pc, #208]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7ff f9d8 	bl	8001224 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff f9d4 	bl	8001224 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e04f      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d20c      	bcs.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e032      	b.n	8001f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4916      	ldr	r1, [pc, #88]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	490e      	ldr	r1, [pc, #56]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f06:	f000 f821 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	5ccb      	ldrb	r3, [r1, r3]
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f886 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	08005dac 	.word	0x08005dac
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20000010 	.word	0x20000010

08001f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f64:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 030c 	and.w	r3, r3, #12
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d00d      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x40>
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	f200 80bd 	bhi.w	80020f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_RCC_GetSysClockFreq+0x34>
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f7e:	e0b7      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f80:	4b61      	ldr	r3, [pc, #388]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f82:	60bb      	str	r3, [r7, #8]
       break;
 8001f84:	e0b7      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f86:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001f88:	60bb      	str	r3, [r7, #8]
      break;
 8001f8a:	e0b4      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f96:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d04d      	beq.n	800203e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa2:	4b58      	ldr	r3, [pc, #352]	; (8002104 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	ea02 0800 	and.w	r8, r2, r0
 8001fba:	ea03 0901 	and.w	r9, r3, r1
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	014b      	lsls	r3, r1, #5
 8001fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd0:	0142      	lsls	r2, r0, #5
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	ebb0 0008 	subs.w	r0, r0, r8
 8001fda:	eb61 0109 	sbc.w	r1, r1, r9
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	018b      	lsls	r3, r1, #6
 8001fe8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fec:	0182      	lsls	r2, r0, #6
 8001fee:	1a12      	subs	r2, r2, r0
 8001ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff4:	f04f 0000 	mov.w	r0, #0
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	00d9      	lsls	r1, r3, #3
 8001ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002002:	00d0      	lsls	r0, r2, #3
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	eb12 0208 	adds.w	r2, r2, r8
 800200c:	eb43 0309 	adc.w	r3, r3, r9
 8002010:	f04f 0000 	mov.w	r0, #0
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	0259      	lsls	r1, r3, #9
 800201a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800201e:	0250      	lsls	r0, r2, #9
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	461a      	mov	r2, r3
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	f7fe f8d6 	bl	80001e0 <__aeabi_uldivmod>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4613      	mov	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e04a      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203e:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	099b      	lsrs	r3, r3, #6
 8002044:	461a      	mov	r2, r3
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	ea02 0400 	and.w	r4, r2, r0
 8002056:	ea03 0501 	and.w	r5, r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	014b      	lsls	r3, r1, #5
 8002068:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800206c:	0142      	lsls	r2, r0, #5
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	1b00      	subs	r0, r0, r4
 8002074:	eb61 0105 	sbc.w	r1, r1, r5
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	018b      	lsls	r3, r1, #6
 8002082:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002086:	0182      	lsls	r2, r0, #6
 8002088:	1a12      	subs	r2, r2, r0
 800208a:	eb63 0301 	sbc.w	r3, r3, r1
 800208e:	f04f 0000 	mov.w	r0, #0
 8002092:	f04f 0100 	mov.w	r1, #0
 8002096:	00d9      	lsls	r1, r3, #3
 8002098:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800209c:	00d0      	lsls	r0, r2, #3
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	1912      	adds	r2, r2, r4
 80020a4:	eb45 0303 	adc.w	r3, r5, r3
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	0299      	lsls	r1, r3, #10
 80020b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020b6:	0290      	lsls	r0, r2, #10
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	f7fe f88a 	bl	80001e0 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ec:	60bb      	str	r3, [r7, #8]
      break;
 80020ee:	e002      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020f2:	60bb      	str	r3, [r7, #8]
      break;
 80020f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f6:	68bb      	ldr	r3, [r7, #8]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	2000000c 	.word	0x2000000c

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a9b      	lsrs	r3, r3, #10
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800
 800214c:	08005dbc 	.word	0x08005dbc

08002150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002154:	f7ff ffdc 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	0b5b      	lsrs	r3, r3, #13
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	08005dbc 	.word	0x08005dbc

08002178 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	220f      	movs	r2, #15
 8002186:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RCC_GetClockConfig+0x60>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0207 	and.w	r2, r3, #7
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40023c00 	.word	0x40023c00

080021dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e041      	b.n	8002272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f839 	bl	800227a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	4619      	mov	r1, r3
 800221a:	4610      	mov	r0, r2
 800221c:	f000 f9d8 	bl	80025d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d001      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e04e      	b.n	8002346 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a23      	ldr	r2, [pc, #140]	; (8002354 <HAL_TIM_Base_Start_IT+0xc4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d022      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d2:	d01d      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1f      	ldr	r2, [pc, #124]	; (8002358 <HAL_TIM_Base_Start_IT+0xc8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d018      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1e      	ldr	r2, [pc, #120]	; (800235c <HAL_TIM_Base_Start_IT+0xcc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d013      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_TIM_Base_Start_IT+0xd0>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00e      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_TIM_Base_Start_IT+0xd4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_TIM_Base_Start_IT+0xd8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_TIM_Base_Start_IT+0x80>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_TIM_Base_Start_IT+0xdc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d111      	bne.n	8002334 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b06      	cmp	r3, #6
 8002320:	d010      	beq.n	8002344 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	e007      	b.n	8002344 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800
 8002360:	40000c00 	.word	0x40000c00
 8002364:	40010400 	.word	0x40010400
 8002368:	40014000 	.word	0x40014000
 800236c:	40001800 	.word	0x40001800

08002370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b02      	cmp	r3, #2
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0202 	mvn.w	r2, #2
 800239c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8ee 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f8e0 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f8f1 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d122      	bne.n	8002420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d11b      	bne.n	8002420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0204 	mvn.w	r2, #4
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f8c4 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8b6 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f8c7 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d122      	bne.n	8002474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b08      	cmp	r3, #8
 800243a:	d11b      	bne.n	8002474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0208 	mvn.w	r2, #8
 8002444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2204      	movs	r2, #4
 800244a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f89a 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 8002460:	e005      	b.n	800246e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f88c 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f89d 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b10      	cmp	r3, #16
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b10      	cmp	r3, #16
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0210 	mvn.w	r2, #16
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2208      	movs	r2, #8
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f870 	bl	8002594 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f862 	bl	8002580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f873 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0201 	mvn.w	r2, #1
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7fe fd0e 	bl	8000f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d107      	bne.n	8002520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f902 	bl	8002724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f838 	bl	80025bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b20      	cmp	r3, #32
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0220 	mvn.w	r2, #32
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8cc 	bl	8002710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a40      	ldr	r2, [pc, #256]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d013      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d00f      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <TIM_Base_SetConfig+0x118>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00b      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a3c      	ldr	r2, [pc, #240]	; (80026ec <TIM_Base_SetConfig+0x11c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d007      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a3b      	ldr	r2, [pc, #236]	; (80026f0 <TIM_Base_SetConfig+0x120>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d003      	beq.n	8002610 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3a      	ldr	r2, [pc, #232]	; (80026f4 <TIM_Base_SetConfig+0x124>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d108      	bne.n	8002622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2f      	ldr	r2, [pc, #188]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002630:	d027      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <TIM_Base_SetConfig+0x118>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d023      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <TIM_Base_SetConfig+0x11c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d01f      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <TIM_Base_SetConfig+0x120>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01b      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <TIM_Base_SetConfig+0x124>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d017      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <TIM_Base_SetConfig+0x128>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a27      	ldr	r2, [pc, #156]	; (80026fc <TIM_Base_SetConfig+0x12c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <TIM_Base_SetConfig+0x130>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a25      	ldr	r2, [pc, #148]	; (8002704 <TIM_Base_SetConfig+0x134>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a24      	ldr	r2, [pc, #144]	; (8002708 <TIM_Base_SetConfig+0x138>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <TIM_Base_SetConfig+0x13c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <TIM_Base_SetConfig+0x114>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_Base_SetConfig+0xf8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <TIM_Base_SetConfig+0x124>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	40010400 	.word	0x40010400
 80026f8:	40014000 	.word	0x40014000
 80026fc:	40014400 	.word	0x40014400
 8002700:	40014800 	.word	0x40014800
 8002704:	40001800 	.word	0x40001800
 8002708:	40001c00 	.word	0x40001c00
 800270c:	40002000 	.word	0x40002000

08002710 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e03f      	b.n	80027ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fc1a 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	; 0x24
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fddb 	bl	8003338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b08a      	sub	sp, #40	; 0x28
 80027d6:	af02      	add	r7, sp, #8
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d17c      	bne.n	80028ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_UART_Transmit+0x2c>
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e075      	b.n	80028ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_UART_Transmit+0x3e>
 800280c:	2302      	movs	r3, #2
 800280e:	e06e      	b.n	80028ee <HAL_UART_Transmit+0x11c>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2221      	movs	r2, #33	; 0x21
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002826:	f7fe fcfd 	bl	8001224 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d108      	bne.n	8002854 <HAL_UART_Transmit+0x82>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e003      	b.n	800285c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002864:	e02a      	b.n	80028bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2200      	movs	r2, #0
 800286e:	2180      	movs	r1, #128	; 0x80
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fb1f 	bl	8002eb4 <UART_WaitOnFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e036      	b.n	80028ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002894:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	3302      	adds	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e007      	b.n	80028ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1cf      	bne.n	8002866 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 faef 	bl	8002eb4 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e006      	b.n	80028ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	4613      	mov	r3, r2
 8002902:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b20      	cmp	r3, #32
 800290e:	d11d      	bne.n	800294c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Receive_IT+0x26>
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e016      	b.n	800294e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_UART_Receive_IT+0x38>
 800292a:	2302      	movs	r3, #2
 800292c:	e00f      	b.n	800294e <HAL_UART_Receive_IT+0x58>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	461a      	mov	r2, r3
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fb24 	bl	8002f90 <UART_Start_Receive_IT>
 8002948:	4603      	mov	r3, r0
 800294a:	e000      	b.n	800294e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0ba      	sub	sp, #232	; 0xe8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800298a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_UART_IRQHandler+0x66>
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fc03 	bl	80031c2 <UART_Receive_IT>
      return;
 80029bc:	e256      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80de 	beq.w	8002b84 <HAL_UART_IRQHandler+0x22c>
 80029c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80d1 	beq.w	8002b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_UART_IRQHandler+0xae>
 80029ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
 8002a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f043 0202 	orr.w	r2, r3, #2
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_UART_IRQHandler+0xf6>
 8002a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f043 0204 	orr.w	r2, r3, #4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_UART_IRQHandler+0x126>
 8002a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d105      	bne.n	8002a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0208 	orr.w	r2, r3, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 81ed 	beq.w	8002e62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8c:	f003 0320 	and.w	r3, r3, #32
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x14e>
 8002a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d002      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fb8e 	bl	80031c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x17a>
 8002aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04f      	beq.n	8002b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fa96 	bl	8003004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d141      	bne.n	8002b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1d9      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d013      	beq.n	8002b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	4a7d      	ldr	r2, [pc, #500]	; (8002d34 <HAL_UART_IRQHandler+0x3dc>)
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fcca 	bl	80014e0 <HAL_DMA_Abort_IT>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	e00e      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f990 	bl	8002e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00a      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f98c 	bl	8002e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e006      	b.n	8002b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f988 	bl	8002e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b7e:	e170      	b.n	8002e62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	bf00      	nop
    return;
 8002b82:	e16e      	b.n	8002e62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	f040 814a 	bne.w	8002e22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8143 	beq.w	8002e22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 813c 	beq.w	8002e22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	f040 80b4 	bne.w	8002d38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8140 	beq.w	8002e66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	f080 8139 	bcs.w	8002e66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bfa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c06:	f000 8088 	beq.w	8002d1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1d9      	bne.n	8002c0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e1      	bne.n	8002c56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3314      	adds	r3, #20
 8002c98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e3      	bne.n	8002c92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	330c      	adds	r3, #12
 8002cde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cea:	f023 0310 	bic.w	r3, r3, #16
 8002cee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e3      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fb73 	bl	8001400 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f8b6 	bl	8002e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d30:	e099      	b.n	8002e66 <HAL_UART_IRQHandler+0x50e>
 8002d32:	bf00      	nop
 8002d34:	080030cb 	.word	0x080030cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 808b 	beq.w	8002e6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d82:	647a      	str	r2, [r7, #68]	; 0x44
 8002d84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	623b      	str	r3, [r7, #32]
   return(result);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dba:	633a      	str	r2, [r7, #48]	; 0x30
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0310 	bic.w	r3, r3, #16
 8002df2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e00:	61fa      	str	r2, [r7, #28]
 8002e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	69b9      	ldr	r1, [r7, #24]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e3      	bne.n	8002ddc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f83e 	bl	8002e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e20:	e023      	b.n	8002e6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_UART_IRQHandler+0x4ea>
 8002e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f959 	bl	80030f2 <UART_Transmit_IT>
    return;
 8002e40:	e014      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <HAL_UART_IRQHandler+0x514>
 8002e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f999 	bl	8003192 <UART_EndTransmit_IT>
    return;
 8002e60:	e004      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
    return;
 8002e62:	bf00      	nop
 8002e64:	e002      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
      return;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <HAL_UART_IRQHandler+0x514>
      return;
 8002e6a:	bf00      	nop
  }
}
 8002e6c:	37e8      	adds	r7, #232	; 0xe8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop

08002e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b090      	sub	sp, #64	; 0x40
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec4:	e050      	b.n	8002f68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d04c      	beq.n	8002f68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ed4:	f7fe f9a6 	bl	8001224 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d241      	bcs.n	8002f68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eee:	e853 3f00 	ldrex	r3, [r3]
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f04:	637a      	str	r2, [r7, #52]	; 0x34
 8002f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e5      	bne.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	613b      	str	r3, [r7, #16]
   return(result);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f38:	623a      	str	r2, [r7, #32]
 8002f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	69f9      	ldr	r1, [r7, #28]
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e00f      	b.n	8002f88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4013      	ands	r3, r2
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d09f      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3740      	adds	r7, #64	; 0x40
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	88fa      	ldrh	r2, [r7, #6]
 8002fa8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2222      	movs	r2, #34	; 0x22
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b095      	sub	sp, #84	; 0x54
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800302c:	643a      	str	r2, [r7, #64]	; 0x40
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3314      	adds	r3, #20
 8003046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003060:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b01      	cmp	r3, #1
 800307a:	d119      	bne.n	80030b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	60bb      	str	r3, [r7, #8]
   return(result);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0310 	bic.w	r3, r3, #16
 8003092:	647b      	str	r3, [r7, #68]	; 0x44
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800309c:	61ba      	str	r2, [r7, #24]
 800309e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	613b      	str	r3, [r7, #16]
   return(result);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030be:	bf00      	nop
 80030c0:	3754      	adds	r7, #84	; 0x54
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff fecf 	bl	8002e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b21      	cmp	r3, #33	; 0x21
 8003104:	d13e      	bne.n	8003184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310e:	d114      	bne.n	800313a <UART_Transmit_IT+0x48>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d110      	bne.n	800313a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	1c9a      	adds	r2, r3, #2
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]
 8003138:	e008      	b.n	800314c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	1c59      	adds	r1, r3, #1
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6211      	str	r1, [r2, #32]
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b29b      	uxth	r3, r3
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fe5e 	bl	8002e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08c      	sub	sp, #48	; 0x30
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b22      	cmp	r3, #34	; 0x22
 80031d4:	f040 80ab 	bne.w	800332e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d117      	bne.n	8003212 <UART_Receive_IT+0x50>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d113      	bne.n	8003212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	b29a      	uxth	r2, r3
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
 8003210:	e026      	b.n	8003260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d007      	beq.n	8003236 <UART_Receive_IT+0x74>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <UART_Receive_IT+0x82>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e008      	b.n	8003256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003250:	b2da      	uxtb	r2, r3
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29b      	uxth	r3, r3
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4619      	mov	r1, r3
 800326e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003270:	2b00      	cmp	r3, #0
 8003272:	d15a      	bne.n	800332a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0220 	bic.w	r2, r2, #32
 8003282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d135      	bne.n	8003320 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f023 0310 	bic.w	r3, r3, #16
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	623a      	str	r2, [r7, #32]
 80032dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d10a      	bne.n	8003312 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fdbf 	bl	8002e9c <HAL_UARTEx_RxEventCallback>
 800331e:	e002      	b.n	8003326 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7fd fdc9 	bl	8000eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e002      	b.n	8003330 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800332e:	2302      	movs	r3, #2
  }
}
 8003330:	4618      	mov	r0, r3
 8003332:	3730      	adds	r7, #48	; 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	b09f      	sub	sp, #124	; 0x7c
 800333e:	af00      	add	r7, sp, #0
 8003340:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	68d9      	ldr	r1, [r3, #12]
 8003350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	ea40 0301 	orr.w	r3, r0, r1
 8003358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	431a      	orrs	r2, r3
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	431a      	orrs	r2, r3
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	4313      	orrs	r3, r2
 8003370:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800337c:	f021 010c 	bic.w	r1, r1, #12
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003386:	430b      	orrs	r3, r1
 8003388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003396:	6999      	ldr	r1, [r3, #24]
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	ea40 0301 	orr.w	r3, r0, r1
 80033a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4bc5      	ldr	r3, [pc, #788]	; (80036bc <UART_SetConfig+0x384>)
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d004      	beq.n	80033b6 <UART_SetConfig+0x7e>
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4bc3      	ldr	r3, [pc, #780]	; (80036c0 <UART_SetConfig+0x388>)
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d103      	bne.n	80033be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033b6:	f7fe fecb 	bl	8002150 <HAL_RCC_GetPCLK2Freq>
 80033ba:	6778      	str	r0, [r7, #116]	; 0x74
 80033bc:	e002      	b.n	80033c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033be:	f7fe feb3 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 80033c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033cc:	f040 80b6 	bne.w	800353c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d2:	461c      	mov	r4, r3
 80033d4:	f04f 0500 	mov.w	r5, #0
 80033d8:	4622      	mov	r2, r4
 80033da:	462b      	mov	r3, r5
 80033dc:	1891      	adds	r1, r2, r2
 80033de:	6439      	str	r1, [r7, #64]	; 0x40
 80033e0:	415b      	adcs	r3, r3
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033e8:	1912      	adds	r2, r2, r4
 80033ea:	eb45 0303 	adc.w	r3, r5, r3
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033fc:	00d0      	lsls	r0, r2, #3
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	1911      	adds	r1, r2, r4
 8003404:	6639      	str	r1, [r7, #96]	; 0x60
 8003406:	416b      	adcs	r3, r5
 8003408:	667b      	str	r3, [r7, #100]	; 0x64
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	1891      	adds	r1, r2, r2
 8003416:	63b9      	str	r1, [r7, #56]	; 0x38
 8003418:	415b      	adcs	r3, r3
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800341c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003420:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003424:	f7fc fedc 	bl	80001e0 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4ba5      	ldr	r3, [pc, #660]	; (80036c4 <UART_SetConfig+0x38c>)
 800342e:	fba3 2302 	umull	r2, r3, r3, r2
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	011e      	lsls	r6, r3, #4
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	461c      	mov	r4, r3
 800343a:	f04f 0500 	mov.w	r5, #0
 800343e:	4622      	mov	r2, r4
 8003440:	462b      	mov	r3, r5
 8003442:	1891      	adds	r1, r2, r2
 8003444:	6339      	str	r1, [r7, #48]	; 0x30
 8003446:	415b      	adcs	r3, r3
 8003448:	637b      	str	r3, [r7, #52]	; 0x34
 800344a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800344e:	1912      	adds	r2, r2, r4
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	00d9      	lsls	r1, r3, #3
 800345e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003462:	00d0      	lsls	r0, r2, #3
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	1911      	adds	r1, r2, r4
 800346a:	65b9      	str	r1, [r7, #88]	; 0x58
 800346c:	416b      	adcs	r3, r5
 800346e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	1891      	adds	r1, r2, r2
 800347c:	62b9      	str	r1, [r7, #40]	; 0x28
 800347e:	415b      	adcs	r3, r3
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003486:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800348a:	f7fc fea9 	bl	80001e0 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4b8c      	ldr	r3, [pc, #560]	; (80036c4 <UART_SetConfig+0x38c>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <UART_SetConfig+0x38c>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034b4:	441e      	add	r6, r3
 80034b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b8:	4618      	mov	r0, r3
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	1894      	adds	r4, r2, r2
 80034c4:	623c      	str	r4, [r7, #32]
 80034c6:	415b      	adcs	r3, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ce:	1812      	adds	r2, r2, r0
 80034d0:	eb41 0303 	adc.w	r3, r1, r3
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	f04f 0500 	mov.w	r5, #0
 80034dc:	00dd      	lsls	r5, r3, #3
 80034de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034e2:	00d4      	lsls	r4, r2, #3
 80034e4:	4622      	mov	r2, r4
 80034e6:	462b      	mov	r3, r5
 80034e8:	1814      	adds	r4, r2, r0
 80034ea:	653c      	str	r4, [r7, #80]	; 0x50
 80034ec:	414b      	adcs	r3, r1
 80034ee:	657b      	str	r3, [r7, #84]	; 0x54
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	461a      	mov	r2, r3
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	1891      	adds	r1, r2, r2
 80034fc:	61b9      	str	r1, [r7, #24]
 80034fe:	415b      	adcs	r3, r3
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003506:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800350a:	f7fc fe69 	bl	80001e0 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <UART_SetConfig+0x38c>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <UART_SetConfig+0x38c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4432      	add	r2, r6
 8003538:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353a:	e0b9      	b.n	80036b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800353c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353e:	461c      	mov	r4, r3
 8003540:	f04f 0500 	mov.w	r5, #0
 8003544:	4622      	mov	r2, r4
 8003546:	462b      	mov	r3, r5
 8003548:	1891      	adds	r1, r2, r2
 800354a:	6139      	str	r1, [r7, #16]
 800354c:	415b      	adcs	r3, r3
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003554:	1912      	adds	r2, r2, r4
 8003556:	eb45 0303 	adc.w	r3, r5, r3
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	eb12 0804 	adds.w	r8, r2, r4
 8003572:	eb43 0905 	adc.w	r9, r3, r5
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	4618      	mov	r0, r3
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	008b      	lsls	r3, r1, #2
 800358a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800358e:	0082      	lsls	r2, r0, #2
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	f7fc fe24 	bl	80001e0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <UART_SetConfig+0x38c>)
 800359e:	fba3 2302 	umull	r2, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	011e      	lsls	r6, r3, #4
 80035a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a8:	4618      	mov	r0, r3
 80035aa:	f04f 0100 	mov.w	r1, #0
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	1894      	adds	r4, r2, r2
 80035b4:	60bc      	str	r4, [r7, #8]
 80035b6:	415b      	adcs	r3, r3
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035be:	1812      	adds	r2, r2, r0
 80035c0:	eb41 0303 	adc.w	r3, r1, r3
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	f04f 0500 	mov.w	r5, #0
 80035cc:	00dd      	lsls	r5, r3, #3
 80035ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035d2:	00d4      	lsls	r4, r2, #3
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
 80035d8:	1814      	adds	r4, r2, r0
 80035da:	64bc      	str	r4, [r7, #72]	; 0x48
 80035dc:	414b      	adcs	r3, r1
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	008b      	lsls	r3, r1, #2
 80035f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035f8:	0082      	lsls	r2, r0, #2
 80035fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80035fe:	f7fc fdef 	bl	80001e0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <UART_SetConfig+0x38c>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2164      	movs	r1, #100	; 0x64
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <UART_SetConfig+0x38c>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003626:	441e      	add	r6, r3
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	4618      	mov	r0, r3
 800362c:	f04f 0100 	mov.w	r1, #0
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	1894      	adds	r4, r2, r2
 8003636:	603c      	str	r4, [r7, #0]
 8003638:	415b      	adcs	r3, r3
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003640:	1812      	adds	r2, r2, r0
 8003642:	eb41 0303 	adc.w	r3, r1, r3
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	f04f 0500 	mov.w	r5, #0
 800364e:	00dd      	lsls	r5, r3, #3
 8003650:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003654:	00d4      	lsls	r4, r2, #3
 8003656:	4622      	mov	r2, r4
 8003658:	462b      	mov	r3, r5
 800365a:	eb12 0a00 	adds.w	sl, r2, r0
 800365e:	eb43 0b01 	adc.w	fp, r3, r1
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	008b      	lsls	r3, r1, #2
 8003676:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800367a:	0082      	lsls	r2, r0, #2
 800367c:	4650      	mov	r0, sl
 800367e:	4659      	mov	r1, fp
 8003680:	f7fc fdae 	bl	80001e0 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <UART_SetConfig+0x38c>)
 800368a:	fba3 1302 	umull	r1, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2164      	movs	r1, #100	; 0x64
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <UART_SetConfig+0x38c>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4432      	add	r2, r6
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	377c      	adds	r7, #124	; 0x7c
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	40011000 	.word	0x40011000
 80036c0:	40011400 	.word	0x40011400
 80036c4:	51eb851f 	.word	0x51eb851f

080036c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f103 0208 	add.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295
 80036e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f103 0208 	add.w	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f103 0208 	add.w	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	601a      	str	r2, [r3, #0]
}
 800375e:	bf00      	nop
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d103      	bne.n	800378a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e00c      	b.n	80037a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3308      	adds	r3, #8
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	e002      	b.n	8003798 <vListInsert+0x2e>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d2f6      	bcs.n	8003792 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6852      	ldr	r2, [r2, #4]
 80037fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d103      	bne.n	8003810 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800385a:	f001 fdeb 	bl	8005434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	441a      	add	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	3b01      	subs	r3, #1
 800388c:	68f9      	ldr	r1, [r7, #12]
 800388e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	22ff      	movs	r2, #255	; 0xff
 80038a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d114      	bne.n	80038da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01a      	beq.n	80038ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3310      	adds	r3, #16
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f8ab 	bl	8004a18 <xTaskRemoveFromEventList>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d012      	beq.n	80038ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <xQueueGenericReset+0xcc>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	e009      	b.n	80038ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3310      	adds	r3, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fef2 	bl	80036c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3324      	adds	r3, #36	; 0x24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff feed 	bl	80036c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038ee:	f001 fdd1 	bl	8005494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038f2:	2301      	movs	r3, #1
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	613b      	str	r3, [r7, #16]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3348      	adds	r3, #72	; 0x48
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fe9d 	bl	8005678 <pvPortMalloc>
 800393e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d011      	beq.n	800396a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3348      	adds	r3, #72	; 0x48
 800394e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003958:	79fa      	ldrb	r2, [r7, #7]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f805 	bl	8003974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800396a:	69bb      	ldr	r3, [r7, #24]
	}
 800396c:	4618      	mov	r0, r3
 800396e:	3720      	adds	r7, #32
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e002      	b.n	8003996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039a2:	2101      	movs	r1, #1
 80039a4:	69b8      	ldr	r0, [r7, #24]
 80039a6:	f7ff ff43 	bl	8003830 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b086      	sub	sp, #24
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	613b      	str	r3, [r7, #16]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d90a      	bls.n	80039f6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	60fb      	str	r3, [r7, #12]
}
 80039f2:	bf00      	nop
 80039f4:	e7fe      	b.n	80039f4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80039f6:	2202      	movs	r2, #2
 80039f8:	2100      	movs	r1, #0
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ff80 	bl	8003900 <xQueueGenericCreate>
 8003a00:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003a0e:	697b      	ldr	r3, [r7, #20]
	}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a26:	2300      	movs	r3, #0
 8003a28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueGenericSend+0x32>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <xQueueGenericSend+0x40>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <xQueueGenericSend+0x44>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <xQueueGenericSend+0x46>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xQueueGenericSend+0x60>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <xQueueGenericSend+0x6e>
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <xQueueGenericSend+0x72>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xQueueGenericSend+0x74>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	623b      	str	r3, [r7, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aa6:	f001 f973 	bl	8004d90 <xTaskGetSchedulerState>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <xQueueGenericSend+0x9e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <xQueueGenericSend+0xa2>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <xQueueGenericSend+0xa4>
 8003aba:	2300      	movs	r3, #0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	61fb      	str	r3, [r7, #28]
}
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ad6:	f001 fcad 	bl	8005434 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <xQueueGenericSend+0xd4>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d129      	bne.n	8003b40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af2:	f000 fa41 	bl	8003f78 <prvCopyDataToQueue>
 8003af6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d010      	beq.n	8003b22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b02:	3324      	adds	r3, #36	; 0x24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 ff87 	bl	8004a18 <xTaskRemoveFromEventList>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d013      	beq.n	8003b38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b10:	4b3f      	ldr	r3, [pc, #252]	; (8003c10 <xQueueGenericSend+0x1f8>)
 8003b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	e00a      	b.n	8003b38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b28:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <xQueueGenericSend+0x1f8>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b38:	f001 fcac 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e063      	b.n	8003c08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b46:	f001 fca5 	bl	8005494 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e05c      	b.n	8003c08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 ffbf 	bl	8004adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b62:	f001 fc97 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b66:	f000 fd75 	bl	8004654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b6a:	f001 fc63 	bl	8005434 <vPortEnterCritical>
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d103      	bne.n	8003b84 <xQueueGenericSend+0x16c>
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b8a:	b25b      	sxtb	r3, r3
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d103      	bne.n	8003b9a <xQueueGenericSend+0x182>
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b9a:	f001 fc7b 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b9e:	1d3a      	adds	r2, r7, #4
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ffae 	bl	8004b08 <xTaskCheckForTimeOut>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d124      	bne.n	8003bfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb4:	f000 fab2 	bl	800411c <prvIsQueueFull>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d018      	beq.n	8003bf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 ff02 	bl	80049d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bce:	f000 fa3d 	bl	800404c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bd2:	f000 fd4d 	bl	8004670 <xTaskResumeAll>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f47f af7c 	bne.w	8003ad6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003bde:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <xQueueGenericSend+0x1f8>)
 8003be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	e772      	b.n	8003ad6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bf2:	f000 fa2b 	bl	800404c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bf6:	f000 fd3b 	bl	8004670 <xTaskResumeAll>
 8003bfa:	e76c      	b.n	8003ad6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bfe:	f000 fa25 	bl	800404c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c02:	f000 fd35 	bl	8004670 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3738      	adds	r7, #56	; 0x38
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	e000ed04 	.word	0xe000ed04

08003c14 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08e      	sub	sp, #56	; 0x38
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	623b      	str	r3, [r7, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <xQueueGiveFromISR+0x48>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	61fb      	str	r3, [r7, #28]
}
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <xQueueGiveFromISR+0x58>
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <xQueueGiveFromISR+0x5c>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <xQueueGiveFromISR+0x5e>
 8003c70:	2300      	movs	r3, #0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <xQueueGiveFromISR+0x78>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	61bb      	str	r3, [r7, #24]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c8c:	f001 fcb4 	bl	80055f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c90:	f3ef 8211 	mrs	r2, BASEPRI
 8003c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	617a      	str	r2, [r7, #20]
 8003ca6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ca8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003caa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d22b      	bcs.n	8003d14 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d112      	bne.n	8003cfe <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d016      	beq.n	8003d0e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	3324      	adds	r3, #36	; 0x24
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fe97 	bl	8004a18 <xTaskRemoveFromEventList>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00e      	beq.n	8003d0e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e007      	b.n	8003d0e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d02:	3301      	adds	r3, #1
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b25a      	sxtb	r2, r3
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
 8003d12:	e001      	b.n	8003d18 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3738      	adds	r7, #56	; 0x38
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	623b      	str	r3, [r7, #32]
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	61fb      	str	r3, [r7, #28]
}
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d80:	f001 f806 	bl	8004d90 <xTaskGetSchedulerState>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <xQueueSemaphoreTake+0x60>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <xQueueSemaphoreTake+0x64>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <xQueueSemaphoreTake+0x66>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	61bb      	str	r3, [r7, #24]
}
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003db0:	f001 fb40 	bl	8005434 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d024      	beq.n	8003e0a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	1e5a      	subs	r2, r3, #1
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003dd0:	f001 f986 	bl	80050e0 <pvTaskIncrementMutexHeldCount>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00f      	beq.n	8003e02 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	3310      	adds	r3, #16
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fe16 	bl	8004a18 <xTaskRemoveFromEventList>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <xQueueSemaphoreTake+0x214>)
 8003df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e02:	f001 fb47 	bl	8005494 <vPortExitCritical>
				return pdPASS;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e097      	b.n	8003f3a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d111      	bne.n	8003e34 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	617b      	str	r3, [r7, #20]
}
 8003e28:	bf00      	nop
 8003e2a:	e7fe      	b.n	8003e2a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e2c:	f001 fb32 	bl	8005494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e082      	b.n	8003f3a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fe4c 	bl	8004adc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e48:	f001 fb24 	bl	8005494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e4c:	f000 fc02 	bl	8004654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e50:	f001 faf0 	bl	8005434 <vPortEnterCritical>
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5a:	b25b      	sxtb	r3, r3
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d103      	bne.n	8003e6a <xQueueSemaphoreTake+0x13a>
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d103      	bne.n	8003e80 <xQueueSemaphoreTake+0x150>
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e80:	f001 fb08 	bl	8005494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e84:	463a      	mov	r2, r7
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fe3b 	bl	8004b08 <xTaskCheckForTimeOut>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d132      	bne.n	8003efe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003e9a:	f000 f929 	bl	80040f0 <prvIsQueueEmpty>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d026      	beq.n	8003ef2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003eac:	f001 fac2 	bl	8005434 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 ff89 	bl	8004dcc <xTaskPriorityInherit>
 8003eba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ebc:	f001 faea 	bl	8005494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fd81 	bl	80049d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ed0:	f000 f8bc 	bl	800404c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ed4:	f000 fbcc 	bl	8004670 <xTaskResumeAll>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f af68 	bne.w	8003db0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003ee0:	4b18      	ldr	r3, [pc, #96]	; (8003f44 <xQueueSemaphoreTake+0x214>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	e75e      	b.n	8003db0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ef4:	f000 f8aa 	bl	800404c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef8:	f000 fbba 	bl	8004670 <xTaskResumeAll>
 8003efc:	e758      	b.n	8003db0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f00:	f000 f8a4 	bl	800404c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f04:	f000 fbb4 	bl	8004670 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f0a:	f000 f8f1 	bl	80040f0 <prvIsQueueEmpty>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f43f af4d 	beq.w	8003db0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f1c:	f001 fa8a 	bl	8005434 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f22:	f000 f811 	bl	8003f48 <prvGetDisinheritPriorityAfterTimeout>
 8003f26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 f848 	bl	8004fc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f34:	f001 faae 	bl	8005494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3738      	adds	r7, #56	; 0x38
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d006      	beq.n	8003f66 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1c3 0307 	rsb	r3, r3, #7
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e001      	b.n	8003f6a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10d      	bne.n	8003fb2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14d      	bne.n	800403a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 ff88 	bl	8004eb8 <xTaskPriorityDisinherit>
 8003fa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	e043      	b.n	800403a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d119      	bne.n	8003fec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6858      	ldr	r0, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	f001 fd80 	bl	8005ac8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d32b      	bcc.n	800403a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e026      	b.n	800403a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	68d8      	ldr	r0, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	f001 fd66 	bl	8005ac8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	425b      	negs	r3, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d207      	bcs.n	8004028 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	425b      	negs	r3, r3
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d105      	bne.n	800403a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	3b01      	subs	r3, #1
 8004038:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004042:	697b      	ldr	r3, [r7, #20]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004054:	f001 f9ee 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800405e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004060:	e011      	b.n	8004086 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d012      	beq.n	8004090 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fcd2 	bl	8004a18 <xTaskRemoveFromEventList>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800407a:	f000 fda7 	bl	8004bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3b01      	subs	r3, #1
 8004082:	b2db      	uxtb	r3, r3
 8004084:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	dce9      	bgt.n	8004062 <prvUnlockQueue+0x16>
 800408e:	e000      	b.n	8004092 <prvUnlockQueue+0x46>
					break;
 8004090:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800409a:	f001 f9fb 	bl	8005494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800409e:	f001 f9c9 	bl	8005434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040aa:	e011      	b.n	80040d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3310      	adds	r3, #16
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fcad 	bl	8004a18 <xTaskRemoveFromEventList>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040c4:	f000 fd82 	bl	8004bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dce9      	bgt.n	80040ac <prvUnlockQueue+0x60>
 80040d8:	e000      	b.n	80040dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	22ff      	movs	r2, #255	; 0xff
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80040e4:	f001 f9d6 	bl	8005494 <vPortExitCritical>
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040f8:	f001 f99c 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e001      	b.n	800410e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800410e:	f001 f9c1 	bl	8005494 <vPortExitCritical>

	return xReturn;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004124:	f001 f986 	bl	8005434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	429a      	cmp	r2, r3
 8004132:	d102      	bne.n	800413a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	e001      	b.n	800413e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 f9a9 	bl	8005494 <vPortExitCritical>

	return xReturn;
 8004142:	68fb      	ldr	r3, [r7, #12]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08e      	sub	sp, #56	; 0x38
 8004150:	af04      	add	r7, sp, #16
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	623b      	str	r3, [r7, #32]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xTaskCreateStatic+0x46>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61fb      	str	r3, [r7, #28]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004192:	2354      	movs	r3, #84	; 0x54
 8004194:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b54      	cmp	r3, #84	; 0x54
 800419a:	d00a      	beq.n	80041b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	61bb      	str	r3, [r7, #24]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01e      	beq.n	80041f8 <xTaskCreateStatic+0xac>
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01b      	beq.n	80041f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041d2:	2300      	movs	r3, #0
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	9302      	str	r3, [sp, #8]
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f850 	bl	8004290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f2:	f000 f8d5 	bl	80043a0 <prvAddNewTaskToReadyList>
 80041f6:	e001      	b.n	80041fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041fc:	697b      	ldr	r3, [r7, #20]
	}
 80041fe:	4618      	mov	r0, r3
 8004200:	3728      	adds	r7, #40	; 0x28
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08c      	sub	sp, #48	; 0x30
 800420a:	af04      	add	r7, sp, #16
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fa2c 	bl	8005678 <pvPortMalloc>
 8004220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004228:	2054      	movs	r0, #84	; 0x54
 800422a:	f001 fa25 	bl	8005678 <pvPortMalloc>
 800422e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
 800423c:	e005      	b.n	800424a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f001 fae6 	bl	8005810 <vPortFree>
 8004244:	e001      	b.n	800424a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d017      	beq.n	8004280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004258:	88fa      	ldrh	r2, [r7, #6]
 800425a:	2300      	movs	r3, #0
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f80e 	bl	8004290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004274:	69f8      	ldr	r0, [r7, #28]
 8004276:	f000 f893 	bl	80043a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800427a:	2301      	movs	r3, #1
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	e002      	b.n	8004286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004286:	69bb      	ldr	r3, [r7, #24]
	}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042a8:	3b01      	subs	r3, #1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	617b      	str	r3, [r7, #20]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01f      	beq.n	800431e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e012      	b.n	800430a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	7819      	ldrb	r1, [r3, #0]
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	3334      	adds	r3, #52	; 0x34
 80042f4:	460a      	mov	r2, r1
 80042f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	4413      	add	r3, r2
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2b0f      	cmp	r3, #15
 800430e:	d9e9      	bls.n	80042e4 <prvInitialiseNewTask+0x54>
 8004310:	e000      	b.n	8004314 <prvInitialiseNewTask+0x84>
			{
				break;
 8004312:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800431c:	e003      	b.n	8004326 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	2b06      	cmp	r3, #6
 800432a:	d901      	bls.n	8004330 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800432c:	2306      	movs	r3, #6
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004334:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2200      	movs	r2, #0
 8004340:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7ff f9de 	bl	8003708 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	3318      	adds	r3, #24
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff f9d9 	bl	8003708 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	f1c3 0207 	rsb	r2, r3, #7
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2200      	movs	r2, #0
 8004370:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68f9      	ldr	r1, [r7, #12]
 800437e:	69b8      	ldr	r0, [r7, #24]
 8004380:	f000 ff28 	bl	80051d4 <pxPortInitialiseStack>
 8004384:	4602      	mov	r2, r0
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004396:	bf00      	nop
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043a8:	f001 f844 	bl	8005434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	4a29      	ldr	r2, [pc, #164]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043b6:	4b29      	ldr	r3, [pc, #164]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043be:	4a27      	ldr	r2, [pc, #156]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <prvAddNewTaskToReadyList+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d110      	bne.n	80043ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043cc:	f000 fc22 	bl	8004c14 <prvInitialiseTaskLists>
 80043d0:	e00d      	b.n	80043ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043d2:	4b23      	ldr	r3, [pc, #140]	; (8004460 <prvAddNewTaskToReadyList+0xc0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d802      	bhi.n	80043ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <prvAddNewTaskToReadyList+0xc4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <prvAddNewTaskToReadyList+0xc4>)
 80043f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2201      	movs	r2, #1
 80043fe:	409a      	lsls	r2, r3
 8004400:	4b19      	ldr	r3, [pc, #100]	; (8004468 <prvAddNewTaskToReadyList+0xc8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <prvAddNewTaskToReadyList+0xc8>)
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <prvAddNewTaskToReadyList+0xcc>)
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	4619      	mov	r1, r3
 8004420:	4610      	mov	r0, r2
 8004422:	f7ff f97e 	bl	8003722 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004426:	f001 f835 	bl	8005494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <prvAddNewTaskToReadyList+0xc0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <prvAddNewTaskToReadyList+0xbc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <prvAddNewTaskToReadyList+0xd0>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000394 	.word	0x20000394
 800445c:	20000294 	.word	0x20000294
 8004460:	200003a0 	.word	0x200003a0
 8004464:	200003b0 	.word	0x200003b0
 8004468:	2000039c 	.word	0x2000039c
 800446c:	20000298 	.word	0x20000298
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800447c:	f000 ffda 	bl	8005434 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <vTaskDelete+0x18>
 8004486:	4b39      	ldr	r3, [pc, #228]	; (800456c <vTaskDelete+0xf8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	e000      	b.n	800448e <vTaskDelete+0x1a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3304      	adds	r3, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff f9a1 	bl	80037dc <uxListRemove>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d115      	bne.n	80044cc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4932      	ldr	r1, [pc, #200]	; (8004570 <vTaskDelete+0xfc>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <vTaskDelete+0x58>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	2201      	movs	r2, #1
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43da      	mvns	r2, r3
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <vTaskDelete+0x100>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4013      	ands	r3, r2
 80044c8:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <vTaskDelete+0x100>)
 80044ca:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3318      	adds	r3, #24
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff f97f 	bl	80037dc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <vTaskDelete+0x104>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3301      	adds	r3, #1
 80044e4:	4a24      	ldr	r2, [pc, #144]	; (8004578 <vTaskDelete+0x104>)
 80044e6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80044e8:	4b20      	ldr	r3, [pc, #128]	; (800456c <vTaskDelete+0xf8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d10b      	bne.n	800450a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4820      	ldr	r0, [pc, #128]	; (800457c <vTaskDelete+0x108>)
 80044fa:	f7ff f912 	bl	8003722 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <vTaskDelete+0x10c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3301      	adds	r3, #1
 8004504:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <vTaskDelete+0x10c>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e009      	b.n	800451e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <vTaskDelete+0x110>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <vTaskDelete+0x110>)
 8004512:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fbeb 	bl	8004cf0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800451a:	f000 fc19 	bl	8004d50 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800451e:	f000 ffb9 	bl	8005494 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <vTaskDelete+0x114>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01b      	beq.n	8004562 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <vTaskDelete+0xf8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d116      	bne.n	8004562 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <vTaskDelete+0x118>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <vTaskDelete+0xde>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	60bb      	str	r3, [r7, #8]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <vTaskDelete+0x11c>)
 8004554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000294 	.word	0x20000294
 8004570:	20000298 	.word	0x20000298
 8004574:	2000039c 	.word	0x2000039c
 8004578:	200003b0 	.word	0x200003b0
 800457c:	20000368 	.word	0x20000368
 8004580:	2000037c 	.word	0x2000037c
 8004584:	20000394 	.word	0x20000394
 8004588:	200003a0 	.word	0x200003a0
 800458c:	200003bc 	.word	0x200003bc
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045a2:	463a      	mov	r2, r7
 80045a4:	1d39      	adds	r1, r7, #4
 80045a6:	f107 0308 	add.w	r3, r7, #8
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb ff94 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045b0:	6839      	ldr	r1, [r7, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	9202      	str	r2, [sp, #8]
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	2300      	movs	r3, #0
 80045c0:	460a      	mov	r2, r1
 80045c2:	491e      	ldr	r1, [pc, #120]	; (800463c <vTaskStartScheduler+0xa8>)
 80045c4:	481e      	ldr	r0, [pc, #120]	; (8004640 <vTaskStartScheduler+0xac>)
 80045c6:	f7ff fdc1 	bl	800414c <xTaskCreateStatic>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <vTaskStartScheduler+0xb0>)
 80045ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045d0:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <vTaskStartScheduler+0xb0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045d8:	2301      	movs	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e001      	b.n	80045e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d116      	bne.n	8004616 <vTaskStartScheduler+0x82>
	__asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	613b      	str	r3, [r7, #16]
}
 80045fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <vTaskStartScheduler+0xb4>)
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <vTaskStartScheduler+0xb8>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <vTaskStartScheduler+0xbc>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004610:	f000 fe6e 	bl	80052f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004614:	e00e      	b.n	8004634 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d10a      	bne.n	8004634 <vTaskStartScheduler+0xa0>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <vTaskStartScheduler+0x9e>
}
 8004634:	bf00      	nop
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08005da4 	.word	0x08005da4
 8004640:	08004be5 	.word	0x08004be5
 8004644:	200003b8 	.word	0x200003b8
 8004648:	200003b4 	.word	0x200003b4
 800464c:	200003a0 	.word	0x200003a0
 8004650:	20000398 	.word	0x20000398

08004654 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <vTaskSuspendAll+0x18>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	4a03      	ldr	r2, [pc, #12]	; (800466c <vTaskSuspendAll+0x18>)
 8004660:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	200003bc 	.word	0x200003bc

08004670 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <xTaskResumeAll+0x114>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <xTaskResumeAll+0x2c>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	603b      	str	r3, [r7, #0]
}
 8004698:	bf00      	nop
 800469a:	e7fe      	b.n	800469a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800469c:	f000 feca 	bl	8005434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046a0:	4b38      	ldr	r3, [pc, #224]	; (8004784 <xTaskResumeAll+0x114>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3b01      	subs	r3, #1
 80046a6:	4a37      	ldr	r2, [pc, #220]	; (8004784 <xTaskResumeAll+0x114>)
 80046a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046aa:	4b36      	ldr	r3, [pc, #216]	; (8004784 <xTaskResumeAll+0x114>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d161      	bne.n	8004776 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046b2:	4b35      	ldr	r3, [pc, #212]	; (8004788 <xTaskResumeAll+0x118>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d05d      	beq.n	8004776 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046ba:	e02e      	b.n	800471a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046bc:	4b33      	ldr	r3, [pc, #204]	; (800478c <xTaskResumeAll+0x11c>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3318      	adds	r3, #24
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff f887 	bl	80037dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff f882 	bl	80037dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <xTaskResumeAll+0x120>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <xTaskResumeAll+0x120>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a27      	ldr	r2, [pc, #156]	; (8004794 <xTaskResumeAll+0x124>)
 80046f8:	441a      	add	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f7ff f80e 	bl	8003722 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	4b23      	ldr	r3, [pc, #140]	; (8004798 <xTaskResumeAll+0x128>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <xTaskResumeAll+0x12c>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <xTaskResumeAll+0x11c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1cc      	bne.n	80046bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004728:	f000 fb12 	bl	8004d50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800472c:	4b1c      	ldr	r3, [pc, #112]	; (80047a0 <xTaskResumeAll+0x130>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d010      	beq.n	800475a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004738:	f000 f836 	bl	80047a8 <xTaskIncrementTick>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <xTaskResumeAll+0x12c>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3b01      	subs	r3, #1
 800474c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f1      	bne.n	8004738 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <xTaskResumeAll+0x130>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <xTaskResumeAll+0x12c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <xTaskResumeAll+0x134>)
 8004768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004776:	f000 fe8d 	bl	8005494 <vPortExitCritical>

	return xAlreadyYielded;
 800477a:	68bb      	ldr	r3, [r7, #8]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200003bc 	.word	0x200003bc
 8004788:	20000394 	.word	0x20000394
 800478c:	20000354 	.word	0x20000354
 8004790:	2000039c 	.word	0x2000039c
 8004794:	20000298 	.word	0x20000298
 8004798:	20000294 	.word	0x20000294
 800479c:	200003a8 	.word	0x200003a8
 80047a0:	200003a4 	.word	0x200003a4
 80047a4:	e000ed04 	.word	0xe000ed04

080047a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b2:	4b4e      	ldr	r3, [pc, #312]	; (80048ec <xTaskIncrementTick+0x144>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 808e 	bne.w	80048d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047bc:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <xTaskIncrementTick+0x148>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047c4:	4a4a      	ldr	r2, [pc, #296]	; (80048f0 <xTaskIncrementTick+0x148>)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d120      	bne.n	8004812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047d0:	4b48      	ldr	r3, [pc, #288]	; (80048f4 <xTaskIncrementTick+0x14c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	603b      	str	r3, [r7, #0]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xTaskIncrementTick+0x46>
 80047f0:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <xTaskIncrementTick+0x14c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <xTaskIncrementTick+0x150>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <xTaskIncrementTick+0x14c>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4a3e      	ldr	r2, [pc, #248]	; (80048f8 <xTaskIncrementTick+0x150>)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	4b3d      	ldr	r3, [pc, #244]	; (80048fc <xTaskIncrementTick+0x154>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	3301      	adds	r3, #1
 800480a:	4a3c      	ldr	r2, [pc, #240]	; (80048fc <xTaskIncrementTick+0x154>)
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	f000 fa9f 	bl	8004d50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <xTaskIncrementTick+0x158>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	429a      	cmp	r2, r3
 800481a:	d348      	bcc.n	80048ae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <xTaskIncrementTick+0x14c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d104      	bne.n	8004830 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <xTaskIncrementTick+0x158>)
 8004828:	f04f 32ff 	mov.w	r2, #4294967295
 800482c:	601a      	str	r2, [r3, #0]
					break;
 800482e:	e03e      	b.n	80048ae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004830:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <xTaskIncrementTick+0x14c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	d203      	bcs.n	8004850 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004848:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <xTaskIncrementTick+0x158>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800484e:	e02e      	b.n	80048ae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe ffc1 	bl	80037dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	3318      	adds	r3, #24
 8004866:	4618      	mov	r0, r3
 8004868:	f7fe ffb8 	bl	80037dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	2201      	movs	r2, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	4b23      	ldr	r3, [pc, #140]	; (8004904 <xTaskIncrementTick+0x15c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	4a22      	ldr	r2, [pc, #136]	; (8004904 <xTaskIncrementTick+0x15c>)
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <xTaskIncrementTick+0x160>)
 800488c:	441a      	add	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3304      	adds	r3, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f7fe ff44 	bl	8003722 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	4b1b      	ldr	r3, [pc, #108]	; (800490c <xTaskIncrementTick+0x164>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d3b9      	bcc.n	800481c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ac:	e7b6      	b.n	800481c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <xTaskIncrementTick+0x164>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4914      	ldr	r1, [pc, #80]	; (8004908 <xTaskIncrementTick+0x160>)
 80048b6:	4613      	mov	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d901      	bls.n	80048ca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80048c6:	2301      	movs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048ca:	4b11      	ldr	r3, [pc, #68]	; (8004910 <xTaskIncrementTick+0x168>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80048d2:	2301      	movs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e004      	b.n	80048e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <xTaskIncrementTick+0x16c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3301      	adds	r3, #1
 80048de:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <xTaskIncrementTick+0x16c>)
 80048e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048e2:	697b      	ldr	r3, [r7, #20]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	200003bc 	.word	0x200003bc
 80048f0:	20000398 	.word	0x20000398
 80048f4:	2000034c 	.word	0x2000034c
 80048f8:	20000350 	.word	0x20000350
 80048fc:	200003ac 	.word	0x200003ac
 8004900:	200003b4 	.word	0x200003b4
 8004904:	2000039c 	.word	0x2000039c
 8004908:	20000298 	.word	0x20000298
 800490c:	20000294 	.word	0x20000294
 8004910:	200003a8 	.word	0x200003a8
 8004914:	200003a4 	.word	0x200003a4

08004918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <vTaskSwitchContext+0xa4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <vTaskSwitchContext+0xa8>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800492c:	e03f      	b.n	80049ae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <vTaskSwitchContext+0xa8>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004934:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <vTaskSwitchContext+0xac>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	fab3 f383 	clz	r3, r3
 8004940:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004942:	7afb      	ldrb	r3, [r7, #11]
 8004944:	f1c3 031f 	rsb	r3, r3, #31
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	491f      	ldr	r1, [pc, #124]	; (80049c8 <vTaskSwitchContext+0xb0>)
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <vTaskSwitchContext+0x5c>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <vTaskSwitchContext+0x5a>
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <vTaskSwitchContext+0xb0>)
 8004980:	4413      	add	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	605a      	str	r2, [r3, #4]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3308      	adds	r3, #8
 8004996:	429a      	cmp	r2, r3
 8004998:	d104      	bne.n	80049a4 <vTaskSwitchContext+0x8c>
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <vTaskSwitchContext+0xb4>)
 80049ac:	6013      	str	r3, [r2, #0]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	200003bc 	.word	0x200003bc
 80049c0:	200003a8 	.word	0x200003a8
 80049c4:	2000039c 	.word	0x2000039c
 80049c8:	20000298 	.word	0x20000298
 80049cc:	20000294 	.word	0x20000294

080049d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049f6:	4b07      	ldr	r3, [pc, #28]	; (8004a14 <vTaskPlaceOnEventList+0x44>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3318      	adds	r3, #24
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fe feb3 	bl	800376a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a04:	2101      	movs	r1, #1
 8004a06:	6838      	ldr	r0, [r7, #0]
 8004a08:	f000 fb7e 	bl	8005108 <prvAddCurrentTaskToDelayedList>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000294 	.word	0x20000294

08004a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	60fb      	str	r3, [r7, #12]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3318      	adds	r3, #24
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fec7 	bl	80037dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <xTaskRemoveFromEventList+0xac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d11c      	bne.n	8004a90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe febe 	bl	80037dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <xTaskRemoveFromEventList+0xb0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <xTaskRemoveFromEventList+0xb0>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4a13      	ldr	r2, [pc, #76]	; (8004acc <xTaskRemoveFromEventList+0xb4>)
 8004a80:	441a      	add	r2, r3
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fe fe4a 	bl	8003722 <vListInsertEnd>
 8004a8e:	e005      	b.n	8004a9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	3318      	adds	r3, #24
 8004a94:	4619      	mov	r1, r3
 8004a96:	480e      	ldr	r0, [pc, #56]	; (8004ad0 <xTaskRemoveFromEventList+0xb8>)
 8004a98:	f7fe fe43 	bl	8003722 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <xTaskRemoveFromEventList+0xbc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d905      	bls.n	8004ab6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <xTaskRemoveFromEventList+0xc0>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e001      	b.n	8004aba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004aba:	697b      	ldr	r3, [r7, #20]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200003bc 	.word	0x200003bc
 8004ac8:	2000039c 	.word	0x2000039c
 8004acc:	20000298 	.word	0x20000298
 8004ad0:	20000354 	.word	0x20000354
 8004ad4:	20000294 	.word	0x20000294
 8004ad8:	200003a8 	.word	0x200003a8

08004adc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <vTaskInternalSetTimeOutState+0x24>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <vTaskInternalSetTimeOutState+0x28>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	605a      	str	r2, [r3, #4]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	200003ac 	.word	0x200003ac
 8004b04:	20000398 	.word	0x20000398

08004b08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	613b      	str	r3, [r7, #16]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60fb      	str	r3, [r7, #12]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b4a:	f000 fc73 	bl	8005434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b4e:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <xTaskCheckForTimeOut+0xbc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d102      	bne.n	8004b6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e023      	b.n	8004bb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <xTaskCheckForTimeOut+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d007      	beq.n	8004b8a <xTaskCheckForTimeOut+0x82>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	e015      	b.n	8004bb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d20b      	bcs.n	8004bac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff ff9b 	bl	8004adc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e004      	b.n	8004bb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bb6:	f000 fc6d 	bl	8005494 <vPortExitCritical>

	return xReturn;
 8004bba:	69fb      	ldr	r3, [r7, #28]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000398 	.word	0x20000398
 8004bc8:	200003ac 	.word	0x200003ac

08004bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bd0:	4b03      	ldr	r3, [pc, #12]	; (8004be0 <vTaskMissedYield+0x14>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	200003a8 	.word	0x200003a8

08004be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bec:	f000 f852 	bl	8004c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <prvIdleTask+0x28>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d9f9      	bls.n	8004bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <prvIdleTask+0x2c>)
 8004bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c08:	e7f0      	b.n	8004bec <prvIdleTask+0x8>
 8004c0a:	bf00      	nop
 8004c0c:	20000298 	.word	0x20000298
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	e00c      	b.n	8004c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4a12      	ldr	r2, [pc, #72]	; (8004c74 <prvInitialiseTaskLists+0x60>)
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe fd4a 	bl	80036c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3301      	adds	r3, #1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b06      	cmp	r3, #6
 8004c3e:	d9ef      	bls.n	8004c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c42:	f7fe fd41 	bl	80036c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c46:	480d      	ldr	r0, [pc, #52]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c48:	f7fe fd3e 	bl	80036c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <prvInitialiseTaskLists+0x6c>)
 8004c4e:	f7fe fd3b 	bl	80036c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c52:	480c      	ldr	r0, [pc, #48]	; (8004c84 <prvInitialiseTaskLists+0x70>)
 8004c54:	f7fe fd38 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <prvInitialiseTaskLists+0x74>)
 8004c5a:	f7fe fd35 	bl	80036c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <prvInitialiseTaskLists+0x78>)
 8004c60:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <prvInitialiseTaskLists+0x64>)
 8004c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <prvInitialiseTaskLists+0x7c>)
 8004c66:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <prvInitialiseTaskLists+0x68>)
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000298 	.word	0x20000298
 8004c78:	20000324 	.word	0x20000324
 8004c7c:	20000338 	.word	0x20000338
 8004c80:	20000354 	.word	0x20000354
 8004c84:	20000368 	.word	0x20000368
 8004c88:	20000380 	.word	0x20000380
 8004c8c:	2000034c 	.word	0x2000034c
 8004c90:	20000350 	.word	0x20000350

08004c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c9a:	e019      	b.n	8004cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c9c:	f000 fbca 	bl	8005434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <prvCheckTasksWaitingTermination+0x50>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fd95 	bl	80037dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <prvCheckTasksWaitingTermination+0x54>)
 8004cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <prvCheckTasksWaitingTermination+0x58>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <prvCheckTasksWaitingTermination+0x58>)
 8004cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cc6:	f000 fbe5 	bl	8005494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f810 	bl	8004cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <prvCheckTasksWaitingTermination+0x58>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e1      	bne.n	8004c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000368 	.word	0x20000368
 8004ce8:	20000394 	.word	0x20000394
 8004cec:	2000037c 	.word	0x2000037c

08004cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d108      	bne.n	8004d14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fd82 	bl	8005810 <vPortFree>
				vPortFree( pxTCB );
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fd7f 	bl	8005810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d12:	e018      	b.n	8004d46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d103      	bne.n	8004d26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fd76 	bl	8005810 <vPortFree>
	}
 8004d24:	e00f      	b.n	8004d46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d00a      	beq.n	8004d46 <prvDeleteTCB+0x56>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	60fb      	str	r3, [r7, #12]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <prvDeleteTCB+0x54>
	}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d56:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <prvResetNextTaskUnblockTime+0x38>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d60:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <prvResetNextTaskUnblockTime+0x3c>)
 8004d62:	f04f 32ff 	mov.w	r2, #4294967295
 8004d66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d68:	e008      	b.n	8004d7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6a:	4b07      	ldr	r3, [pc, #28]	; (8004d88 <prvResetNextTaskUnblockTime+0x38>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <prvResetNextTaskUnblockTime+0x3c>)
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	2000034c 	.word	0x2000034c
 8004d8c:	200003b4 	.word	0x200003b4

08004d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <xTaskGetSchedulerState+0x34>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	e008      	b.n	8004db6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da4:	4b08      	ldr	r3, [pc, #32]	; (8004dc8 <xTaskGetSchedulerState+0x38>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dac:	2302      	movs	r3, #2
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	e001      	b.n	8004db6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004db6:	687b      	ldr	r3, [r7, #4]
	}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	200003a0 	.word	0x200003a0
 8004dc8:	200003bc 	.word	0x200003bc

08004dcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d05e      	beq.n	8004ea0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4b31      	ldr	r3, [pc, #196]	; (8004eac <xTaskPriorityInherit+0xe0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d24e      	bcs.n	8004e8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	db06      	blt.n	8004e06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004df8:	4b2c      	ldr	r3, [pc, #176]	; (8004eac <xTaskPriorityInherit+0xe0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f1c3 0207 	rsb	r2, r3, #7
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <xTaskPriorityInherit+0xe4>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4299      	cmp	r1, r3
 8004e1c:	d12f      	bne.n	8004e7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3304      	adds	r3, #4
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fe fcda 	bl	80037dc <uxListRemove>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	2201      	movs	r2, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43da      	mvns	r2, r3
 8004e3a:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <xTaskPriorityInherit+0xe8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <xTaskPriorityInherit+0xe8>)
 8004e42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e44:	4b19      	ldr	r3, [pc, #100]	; (8004eac <xTaskPriorityInherit+0xe0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	2201      	movs	r2, #1
 8004e54:	409a      	lsls	r2, r3
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <xTaskPriorityInherit+0xe8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <xTaskPriorityInherit+0xe8>)
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <xTaskPriorityInherit+0xe4>)
 8004e6e:	441a      	add	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7fe fc53 	bl	8003722 <vListInsertEnd>
 8004e7c:	e004      	b.n	8004e88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <xTaskPriorityInherit+0xe0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e008      	b.n	8004ea0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <xTaskPriorityInherit+0xe0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d201      	bcs.n	8004ea0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
	}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000294 	.word	0x20000294
 8004eb0:	20000298 	.word	0x20000298
 8004eb4:	2000039c 	.word	0x2000039c

08004eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d06e      	beq.n	8004fac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ece:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <xTaskPriorityDisinherit+0x100>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d00a      	beq.n	8004eee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60fb      	str	r3, [r7, #12]
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60bb      	str	r3, [r7, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d044      	beq.n	8004fac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d140      	bne.n	8004fac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fc54 	bl	80037dc <uxListRemove>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d115      	bne.n	8004f66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	491f      	ldr	r1, [pc, #124]	; (8004fbc <xTaskPriorityDisinherit+0x104>)
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xTaskPriorityDisinherit+0xae>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <xTaskPriorityDisinherit+0x108>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4013      	ands	r3, r2
 8004f62:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <xTaskPriorityDisinherit+0x108>)
 8004f64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f1c3 0207 	rsb	r2, r3, #7
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	2201      	movs	r2, #1
 8004f80:	409a      	lsls	r2, r3
 8004f82:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <xTaskPriorityDisinherit+0x108>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <xTaskPriorityDisinherit+0x108>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <xTaskPriorityDisinherit+0x104>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe fbbd 	bl	8003722 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fac:	697b      	ldr	r3, [r7, #20]
	}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000294 	.word	0x20000294
 8004fbc:	20000298 	.word	0x20000298
 8004fc0:	2000039c 	.word	0x2000039c

08004fc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d077      	beq.n	80050cc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	60fb      	str	r3, [r7, #12]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d902      	bls.n	800500a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e002      	b.n	8005010 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	429a      	cmp	r2, r3
 8005018:	d058      	beq.n	80050cc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	429a      	cmp	r2, r3
 8005022:	d153      	bne.n	80050cc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005024:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	429a      	cmp	r2, r3
 800502c:	d10a      	bne.n	8005044 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	60bb      	str	r3, [r7, #8]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db04      	blt.n	8005062 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f1c3 0207 	rsb	r2, r3, #7
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	6959      	ldr	r1, [r3, #20]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005072:	4413      	add	r3, r2
 8005074:	4299      	cmp	r1, r3
 8005076:	d129      	bne.n	80050cc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	3304      	adds	r3, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe fbad 	bl	80037dc <uxListRemove>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2201      	movs	r2, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	4b11      	ldr	r3, [pc, #68]	; (80050dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4013      	ands	r3, r2
 800509a:	4a10      	ldr	r2, [pc, #64]	; (80050dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800509c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	2201      	movs	r2, #1
 80050a4:	409a      	lsls	r2, r3
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	4a0b      	ldr	r2, [pc, #44]	; (80050dc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80050be:	441a      	add	r2, r3
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	3304      	adds	r3, #4
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fe fb2b 	bl	8003722 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050cc:	bf00      	nop
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000294 	.word	0x20000294
 80050d8:	20000298 	.word	0x20000298
 80050dc:	2000039c 	.word	0x2000039c

080050e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <pvTaskIncrementMutexHeldCount+0x24>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <pvTaskIncrementMutexHeldCount+0x24>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f2:	3201      	adds	r2, #1
 80050f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80050f6:	4b03      	ldr	r3, [pc, #12]	; (8005104 <pvTaskIncrementMutexHeldCount+0x24>)
 80050f8:	681b      	ldr	r3, [r3, #0]
	}
 80050fa:	4618      	mov	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	20000294 	.word	0x20000294

08005108 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005112:	4b29      	ldr	r3, [pc, #164]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005118:	4b28      	ldr	r3, [pc, #160]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fb5c 	bl	80037dc <uxListRemove>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	2201      	movs	r2, #1
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43da      	mvns	r2, r3
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4013      	ands	r3, r2
 800513e:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005140:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d10a      	bne.n	8005160 <prvAddCurrentTaskToDelayedList+0x58>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005150:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	481a      	ldr	r0, [pc, #104]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800515a:	f7fe fae2 	bl	8003722 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800515e:	e026      	b.n	80051ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005168:	4b14      	ldr	r3, [pc, #80]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d209      	bcs.n	800518c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7fe faf0 	bl	800376a <vListInsert>
}
 800518a:	e010      	b.n	80051ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7fe fae6 	bl	800376a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800519e:	4b0c      	ldr	r3, [pc, #48]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d202      	bcs.n	80051ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6013      	str	r3, [r2, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000398 	.word	0x20000398
 80051bc:	20000294 	.word	0x20000294
 80051c0:	2000039c 	.word	0x2000039c
 80051c4:	20000380 	.word	0x20000380
 80051c8:	20000350 	.word	0x20000350
 80051cc:	2000034c 	.word	0x2000034c
 80051d0:	200003b4 	.word	0x200003b4

080051d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b04      	subs	r3, #4
 80051e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3b04      	subs	r3, #4
 80051f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3b04      	subs	r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <pxPortInitialiseStack+0x64>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b14      	subs	r3, #20
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b04      	subs	r3, #4
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f06f 0202 	mvn.w	r2, #2
 8005222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b20      	subs	r3, #32
 8005228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	0800523d 	.word	0x0800523d

0800523c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <prvTaskExitError+0x54>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d00a      	beq.n	8005266 <prvTaskExitError+0x2a>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <prvTaskExitError+0x28>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60bb      	str	r3, [r7, #8]
}
 8005278:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800527a:	bf00      	nop
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0fc      	beq.n	800527c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	20000018 	.word	0x20000018
	...

080052a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <pxCurrentTCBConst2>)
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	f380 8809 	msr	PSP, r0
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8811 	msr	BASEPRI, r0
 80052ba:	4770      	bx	lr
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst2>:
 80052c0:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052c8:	4808      	ldr	r0, [pc, #32]	; (80052ec <prvPortStartFirstTask+0x24>)
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	f380 8808 	msr	MSP, r0
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8814 	msr	CONTROL, r0
 80052da:	b662      	cpsie	i
 80052dc:	b661      	cpsie	f
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	df00      	svc	0
 80052e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ea:	bf00      	nop
 80052ec:	e000ed08 	.word	0xe000ed08

080052f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052f6:	4b46      	ldr	r3, [pc, #280]	; (8005410 <xPortStartScheduler+0x120>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a46      	ldr	r2, [pc, #280]	; (8005414 <xPortStartScheduler+0x124>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10a      	bne.n	8005316 <xPortStartScheduler+0x26>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	613b      	str	r3, [r7, #16]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005316:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <xPortStartScheduler+0x120>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <xPortStartScheduler+0x128>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10a      	bne.n	8005336 <xPortStartScheduler+0x46>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	60fb      	str	r3, [r7, #12]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005336:	4b39      	ldr	r3, [pc, #228]	; (800541c <xPortStartScheduler+0x12c>)
 8005338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	22ff      	movs	r2, #255	; 0xff
 8005346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <xPortStartScheduler+0x130>)
 800535c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <xPortStartScheduler+0x134>)
 8005360:	2207      	movs	r2, #7
 8005362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005364:	e009      	b.n	800537a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <xPortStartScheduler+0x134>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3b01      	subs	r3, #1
 800536c:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <xPortStartScheduler+0x134>)
 800536e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d0ef      	beq.n	8005366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005386:	4b27      	ldr	r3, [pc, #156]	; (8005424 <xPortStartScheduler+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1c3 0307 	rsb	r3, r3, #7
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00a      	beq.n	80053a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	60bb      	str	r3, [r7, #8]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053a8:	4b1e      	ldr	r3, [pc, #120]	; (8005424 <xPortStartScheduler+0x134>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <xPortStartScheduler+0x134>)
 80053b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <xPortStartScheduler+0x134>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <xPortStartScheduler+0x134>)
 80053bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <xPortStartScheduler+0x138>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <xPortStartScheduler+0x138>)
 80053cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <xPortStartScheduler+0x138>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <xPortStartScheduler+0x138>)
 80053d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053de:	f000 f8dd 	bl	800559c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <xPortStartScheduler+0x13c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053e8:	f000 f8fc 	bl	80055e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053ec:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xPortStartScheduler+0x140>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <xPortStartScheduler+0x140>)
 80053f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053f8:	f7ff ff66 	bl	80052c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053fc:	f7ff fa8c 	bl	8004918 <vTaskSwitchContext>
	prvTaskExitError();
 8005400:	f7ff ff1c 	bl	800523c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000ed00 	.word	0xe000ed00
 8005414:	410fc271 	.word	0x410fc271
 8005418:	410fc270 	.word	0x410fc270
 800541c:	e000e400 	.word	0xe000e400
 8005420:	200003c0 	.word	0x200003c0
 8005424:	200003c4 	.word	0x200003c4
 8005428:	e000ed20 	.word	0xe000ed20
 800542c:	20000018 	.word	0x20000018
 8005430:	e000ef34 	.word	0xe000ef34

08005434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <vPortEnterCritical+0x58>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <vPortEnterCritical+0x58>)
 8005456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <vPortEnterCritical+0x58>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10f      	bne.n	8005480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005460:	4b0b      	ldr	r3, [pc, #44]	; (8005490 <vPortEnterCritical+0x5c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <vPortEnterCritical+0x4c>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	603b      	str	r3, [r7, #0]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <vPortEnterCritical+0x4a>
	}
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000018 	.word	0x20000018
 8005490:	e000ed04 	.word	0xe000ed04

08005494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800549a:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <vPortExitCritical+0x50>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <vPortExitCritical+0x24>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	607b      	str	r3, [r7, #4]
}
 80054b4:	bf00      	nop
 80054b6:	e7fe      	b.n	80054b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <vPortExitCritical+0x50>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <vPortExitCritical+0x50>)
 80054c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <vPortExitCritical+0x50>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <vPortExitCritical+0x42>
 80054ca:	2300      	movs	r3, #0
 80054cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f383 8811 	msr	BASEPRI, r3
}
 80054d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000018 	.word	0x20000018
	...

080054f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054f0:	f3ef 8009 	mrs	r0, PSP
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	4b15      	ldr	r3, [pc, #84]	; (8005550 <pxCurrentTCBConst>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	f01e 0f10 	tst.w	lr, #16
 8005500:	bf08      	it	eq
 8005502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550a:	6010      	str	r0, [r2, #0]
 800550c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005514:	f380 8811 	msr	BASEPRI, r0
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f7ff f9fa 	bl	8004918 <vTaskSwitchContext>
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f380 8811 	msr	BASEPRI, r0
 800552c:	bc09      	pop	{r0, r3}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005536:	f01e 0f10 	tst.w	lr, #16
 800553a:	bf08      	it	eq
 800553c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005540:	f380 8809 	msr	PSP, r0
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	f3af 8000 	nop.w

08005550 <pxCurrentTCBConst>:
 8005550:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop

08005558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005572:	f7ff f919 	bl	80047a8 <xTaskIncrementTick>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <SysTick_Handler+0x40>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f383 8811 	msr	BASEPRI, r3
}
 800558e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortSetupTimerInterrupt+0x34>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <vPortSetupTimerInterrupt+0x38>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ac:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <vPortSetupTimerInterrupt+0x3c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <vPortSetupTimerInterrupt+0x40>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	099b      	lsrs	r3, r3, #6
 80055b8:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <vPortSetupTimerInterrupt+0x44>)
 80055ba:	3b01      	subs	r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <vPortSetupTimerInterrupt+0x34>)
 80055c0:	2207      	movs	r2, #7
 80055c2:	601a      	str	r2, [r3, #0]
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e010 	.word	0xe000e010
 80055d4:	e000e018 	.word	0xe000e018
 80055d8:	2000000c 	.word	0x2000000c
 80055dc:	10624dd3 	.word	0x10624dd3
 80055e0:	e000e014 	.word	0xe000e014

080055e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055f4 <vPortEnableVFP+0x10>
 80055e8:	6801      	ldr	r1, [r0, #0]
 80055ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055ee:	6001      	str	r1, [r0, #0]
 80055f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055f2:	bf00      	nop
 80055f4:	e000ed88 	.word	0xe000ed88

080055f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d914      	bls.n	8005634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800560a:	4a17      	ldr	r2, [pc, #92]	; (8005668 <vPortValidateInterruptPriority+0x70>)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005614:	4b15      	ldr	r3, [pc, #84]	; (800566c <vPortValidateInterruptPriority+0x74>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	7afa      	ldrb	r2, [r7, #11]
 800561a:	429a      	cmp	r2, r3
 800561c:	d20a      	bcs.n	8005634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
 8005632:	e7fe      	b.n	8005632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005634:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <vPortValidateInterruptPriority+0x78>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800563c:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <vPortValidateInterruptPriority+0x7c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d90a      	bls.n	800565a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	603b      	str	r3, [r7, #0]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <vPortValidateInterruptPriority+0x60>
	}
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	e000e3f0 	.word	0xe000e3f0
 800566c:	200003c0 	.word	0x200003c0
 8005670:	e000ed0c 	.word	0xe000ed0c
 8005674:	200003c4 	.word	0x200003c4

08005678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08a      	sub	sp, #40	; 0x28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005684:	f7fe ffe6 	bl	8004654 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005688:	4b5b      	ldr	r3, [pc, #364]	; (80057f8 <pvPortMalloc+0x180>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005690:	f000 f920 	bl	80058d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005694:	4b59      	ldr	r3, [pc, #356]	; (80057fc <pvPortMalloc+0x184>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	f040 8093 	bne.w	80057c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01d      	beq.n	80056e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80056a8:	2208      	movs	r2, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f023 0307 	bic.w	r3, r3, #7
 80056c0:	3308      	adds	r3, #8
 80056c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <pvPortMalloc+0x6c>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	617b      	str	r3, [r7, #20]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d06e      	beq.n	80057c8 <pvPortMalloc+0x150>
 80056ea:	4b45      	ldr	r3, [pc, #276]	; (8005800 <pvPortMalloc+0x188>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d869      	bhi.n	80057c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056f4:	4b43      	ldr	r3, [pc, #268]	; (8005804 <pvPortMalloc+0x18c>)
 80056f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056f8:	4b42      	ldr	r3, [pc, #264]	; (8005804 <pvPortMalloc+0x18c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056fe:	e004      	b.n	800570a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <pvPortMalloc+0xa4>
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f1      	bne.n	8005700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800571c:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <pvPortMalloc+0x180>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	429a      	cmp	r2, r3
 8005724:	d050      	beq.n	80057c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2208      	movs	r2, #8
 800572c:	4413      	add	r3, r2
 800572e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	2308      	movs	r3, #8
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	429a      	cmp	r2, r3
 8005746:	d91f      	bls.n	8005788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4413      	add	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <pvPortMalloc+0xf8>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	613b      	str	r3, [r7, #16]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	1ad2      	subs	r2, r2, r3
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	f000 f908 	bl	8005998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <pvPortMalloc+0x188>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	4a1b      	ldr	r2, [pc, #108]	; (8005800 <pvPortMalloc+0x188>)
 8005794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <pvPortMalloc+0x188>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <pvPortMalloc+0x190>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d203      	bcs.n	80057aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <pvPortMalloc+0x188>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a18      	ldr	r2, [pc, #96]	; (8005808 <pvPortMalloc+0x190>)
 80057a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <pvPortMalloc+0x184>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <pvPortMalloc+0x194>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <pvPortMalloc+0x194>)
 80057c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80057c8:	f7fe ff52 	bl	8004670 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <pvPortMalloc+0x174>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60fb      	str	r3, [r7, #12]
}
 80057e8:	bf00      	nop
 80057ea:	e7fe      	b.n	80057ea <pvPortMalloc+0x172>
	return pvReturn;
 80057ec:	69fb      	ldr	r3, [r7, #28]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3728      	adds	r7, #40	; 0x28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20003fd0 	.word	0x20003fd0
 80057fc:	20003fe4 	.word	0x20003fe4
 8005800:	20003fd4 	.word	0x20003fd4
 8005804:	20003fc8 	.word	0x20003fc8
 8005808:	20003fd8 	.word	0x20003fd8
 800580c:	20003fdc 	.word	0x20003fdc

08005810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d04d      	beq.n	80058be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005822:	2308      	movs	r3, #8
 8005824:	425b      	negs	r3, r3
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <vPortFree+0xb8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <vPortFree+0x44>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <vPortFree+0x62>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	60bb      	str	r3, [r7, #8]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	4b14      	ldr	r3, [pc, #80]	; (80058c8 <vPortFree+0xb8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01e      	beq.n	80058be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11a      	bne.n	80058be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	4b0e      	ldr	r3, [pc, #56]	; (80058c8 <vPortFree+0xb8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005898:	f7fe fedc 	bl	8004654 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <vPortFree+0xbc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4413      	add	r3, r2
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <vPortFree+0xbc>)
 80058a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058aa:	6938      	ldr	r0, [r7, #16]
 80058ac:	f000 f874 	bl	8005998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <vPortFree+0xc0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	4a06      	ldr	r2, [pc, #24]	; (80058d0 <vPortFree+0xc0>)
 80058b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058ba:	f7fe fed9 	bl	8004670 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058be:	bf00      	nop
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20003fe4 	.word	0x20003fe4
 80058cc:	20003fd4 	.word	0x20003fd4
 80058d0:	20003fe0 	.word	0x20003fe0

080058d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80058da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80058de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058e0:	4b27      	ldr	r3, [pc, #156]	; (8005980 <prvHeapInit+0xac>)
 80058e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3307      	adds	r3, #7
 80058f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <prvHeapInit+0xac>)
 8005904:	4413      	add	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <prvHeapInit+0xb0>)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <prvHeapInit+0xb0>)
 8005914:	2200      	movs	r2, #0
 8005916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	4413      	add	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005920:	2208      	movs	r2, #8
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a15      	ldr	r2, [pc, #84]	; (8005988 <prvHeapInit+0xb4>)
 8005934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <prvHeapInit+0xb4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800593e:	4b12      	ldr	r3, [pc, #72]	; (8005988 <prvHeapInit+0xb4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <prvHeapInit+0xb4>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a0a      	ldr	r2, [pc, #40]	; (800598c <prvHeapInit+0xb8>)
 8005962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	4a09      	ldr	r2, [pc, #36]	; (8005990 <prvHeapInit+0xbc>)
 800596a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800596c:	4b09      	ldr	r3, [pc, #36]	; (8005994 <prvHeapInit+0xc0>)
 800596e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	200003c8 	.word	0x200003c8
 8005984:	20003fc8 	.word	0x20003fc8
 8005988:	20003fd0 	.word	0x20003fd0
 800598c:	20003fd8 	.word	0x20003fd8
 8005990:	20003fd4 	.word	0x20003fd4
 8005994:	20003fe4 	.word	0x20003fe4

08005998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059a0:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <prvInsertBlockIntoFreeList+0xac>)
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e002      	b.n	80059ac <prvInsertBlockIntoFreeList+0x14>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d8f7      	bhi.n	80059a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4413      	add	r3, r2
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d108      	bne.n	80059da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	441a      	add	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d118      	bne.n	8005a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <prvInsertBlockIntoFreeList+0xb0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d00d      	beq.n	8005a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e008      	b.n	8005a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <prvInsertBlockIntoFreeList+0xb0>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e003      	b.n	8005a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d002      	beq.n	8005a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20003fc8 	.word	0x20003fc8
 8005a48:	20003fd0 	.word	0x20003fd0

08005a4c <__libc_init_array>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4d0d      	ldr	r5, [pc, #52]	; (8005a84 <__libc_init_array+0x38>)
 8005a50:	4c0d      	ldr	r4, [pc, #52]	; (8005a88 <__libc_init_array+0x3c>)
 8005a52:	1b64      	subs	r4, r4, r5
 8005a54:	10a4      	asrs	r4, r4, #2
 8005a56:	2600      	movs	r6, #0
 8005a58:	42a6      	cmp	r6, r4
 8005a5a:	d109      	bne.n	8005a70 <__libc_init_array+0x24>
 8005a5c:	4d0b      	ldr	r5, [pc, #44]	; (8005a8c <__libc_init_array+0x40>)
 8005a5e:	4c0c      	ldr	r4, [pc, #48]	; (8005a90 <__libc_init_array+0x44>)
 8005a60:	f000 f89a 	bl	8005b98 <_init>
 8005a64:	1b64      	subs	r4, r4, r5
 8005a66:	10a4      	asrs	r4, r4, #2
 8005a68:	2600      	movs	r6, #0
 8005a6a:	42a6      	cmp	r6, r4
 8005a6c:	d105      	bne.n	8005a7a <__libc_init_array+0x2e>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a74:	4798      	blx	r3
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7ee      	b.n	8005a58 <__libc_init_array+0xc>
 8005a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7e:	4798      	blx	r3
 8005a80:	3601      	adds	r6, #1
 8005a82:	e7f2      	b.n	8005a6a <__libc_init_array+0x1e>
 8005a84:	08005df4 	.word	0x08005df4
 8005a88:	08005df4 	.word	0x08005df4
 8005a8c:	08005df4 	.word	0x08005df4
 8005a90:	08005df8 	.word	0x08005df8

08005a94 <__itoa>:
 8005a94:	1e93      	subs	r3, r2, #2
 8005a96:	2b22      	cmp	r3, #34	; 0x22
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	d904      	bls.n	8005aa8 <__itoa+0x14>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	700b      	strb	r3, [r1, #0]
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	bd10      	pop	{r4, pc}
 8005aa8:	2a0a      	cmp	r2, #10
 8005aaa:	d109      	bne.n	8005ac0 <__itoa+0x2c>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	da07      	bge.n	8005ac0 <__itoa+0x2c>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	700b      	strb	r3, [r1, #0]
 8005ab4:	4240      	negs	r0, r0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4421      	add	r1, r4
 8005aba:	f000 f82b 	bl	8005b14 <__utoa>
 8005abe:	e7f1      	b.n	8005aa4 <__itoa+0x10>
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	e7f9      	b.n	8005ab8 <__itoa+0x24>

08005ac4 <itoa>:
 8005ac4:	f7ff bfe6 	b.w	8005a94 <__itoa>

08005ac8 <memcpy>:
 8005ac8:	440a      	add	r2, r1
 8005aca:	4291      	cmp	r1, r2
 8005acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xc>
 8005ad2:	4770      	bx	lr
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ade:	4291      	cmp	r1, r2
 8005ae0:	d1f9      	bne.n	8005ad6 <memcpy+0xe>
 8005ae2:	bd10      	pop	{r4, pc}

08005ae4 <memset>:
 8005ae4:	4402      	add	r2, r0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d100      	bne.n	8005aee <memset+0xa>
 8005aec:	4770      	bx	lr
 8005aee:	f803 1b01 	strb.w	r1, [r3], #1
 8005af2:	e7f9      	b.n	8005ae8 <memset+0x4>

08005af4 <strcat>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	4602      	mov	r2, r0
 8005af8:	7814      	ldrb	r4, [r2, #0]
 8005afa:	4613      	mov	r3, r2
 8005afc:	3201      	adds	r2, #1
 8005afe:	2c00      	cmp	r4, #0
 8005b00:	d1fa      	bne.n	8005af8 <strcat+0x4>
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b0c:	2a00      	cmp	r2, #0
 8005b0e:	d1f9      	bne.n	8005b04 <strcat+0x10>
 8005b10:	bd10      	pop	{r4, pc}
	...

08005b14 <__utoa>:
 8005b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b16:	4c1f      	ldr	r4, [pc, #124]	; (8005b94 <__utoa+0x80>)
 8005b18:	b08b      	sub	sp, #44	; 0x2c
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	466e      	mov	r6, sp
 8005b20:	f104 0c20 	add.w	ip, r4, #32
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	6861      	ldr	r1, [r4, #4]
 8005b28:	4637      	mov	r7, r6
 8005b2a:	c703      	stmia	r7!, {r0, r1}
 8005b2c:	3408      	adds	r4, #8
 8005b2e:	4564      	cmp	r4, ip
 8005b30:	463e      	mov	r6, r7
 8005b32:	d1f7      	bne.n	8005b24 <__utoa+0x10>
 8005b34:	7921      	ldrb	r1, [r4, #4]
 8005b36:	7139      	strb	r1, [r7, #4]
 8005b38:	1e91      	subs	r1, r2, #2
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	6038      	str	r0, [r7, #0]
 8005b3e:	2922      	cmp	r1, #34	; 0x22
 8005b40:	f04f 0100 	mov.w	r1, #0
 8005b44:	d904      	bls.n	8005b50 <__utoa+0x3c>
 8005b46:	7019      	strb	r1, [r3, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	b00b      	add	sp, #44	; 0x2c
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	1e58      	subs	r0, r3, #1
 8005b52:	4684      	mov	ip, r0
 8005b54:	fbb5 f7f2 	udiv	r7, r5, r2
 8005b58:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005b5c:	fb02 5617 	mls	r6, r2, r7, r5
 8005b60:	4476      	add	r6, lr
 8005b62:	460c      	mov	r4, r1
 8005b64:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005b68:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005b6c:	462e      	mov	r6, r5
 8005b6e:	42b2      	cmp	r2, r6
 8005b70:	f101 0101 	add.w	r1, r1, #1
 8005b74:	463d      	mov	r5, r7
 8005b76:	d9ed      	bls.n	8005b54 <__utoa+0x40>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	545a      	strb	r2, [r3, r1]
 8005b7c:	1919      	adds	r1, r3, r4
 8005b7e:	1aa5      	subs	r5, r4, r2
 8005b80:	42aa      	cmp	r2, r5
 8005b82:	dae2      	bge.n	8005b4a <__utoa+0x36>
 8005b84:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005b88:	780e      	ldrb	r6, [r1, #0]
 8005b8a:	7006      	strb	r6, [r0, #0]
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	f801 5901 	strb.w	r5, [r1], #-1
 8005b92:	e7f4      	b.n	8005b7e <__utoa+0x6a>
 8005b94:	08005dc4 	.word	0x08005dc4

08005b98 <_init>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr

08005ba4 <_fini>:
 8005ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba6:	bf00      	nop
 8005ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005baa:	bc08      	pop	{r3}
 8005bac:	469e      	mov	lr, r3
 8005bae:	4770      	bx	lr
